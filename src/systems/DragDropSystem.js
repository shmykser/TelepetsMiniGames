import { ISystem } from './interfaces/ISystem.js';
import { EVENT_TYPES } from '../types/EventTypes.js';

/** –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û, –û–¢–ö–õ–Æ–ß–ï–ù–û
 * –°–∏—Å—Ç–µ–º–∞ drag & drop –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 */
export class DragDropSystem extends ISystem {
    constructor(scene) {
        super(scene);
        this.draggedObject = null;
        this.isEnabled = true;
        this.isInitialized = false;
        this.initializationAttempts = 0;
        this.maxAttempts = 10;
        this.retryTimer = null;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
     */
    initialize() {
        // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        console.log('üéØ [DragDropSystem] Drag & drop –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω');
        this.isInitialized = true;
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–≤–æ–¥–∞
     */
    setupInputHandlers() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        if (this.isInitialized) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
        if (this.initializationAttempts >= this.maxAttempts) {
            console.error('üéØ [DragDropSystem] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ input –¥–æ—Å—Ç—É–ø–µ–Ω
        if (!this.scene || !this.scene.input) {
            this.initializationAttempts++;
            console.warn(`üéØ [DragDropSystem] Input –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ ${this.initializationAttempts}/${this.maxAttempts}`);
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
            if (this.retryTimer) {
                clearTimeout(this.retryTimer);
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
            this.retryTimer = setTimeout(() => {
                this.setupInputHandlers();
            }, 500);
            return;
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (this.retryTimer) {
            clearTimeout(this.retryTimer);
            this.retryTimer = null;
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ —Ç–∞—á–∞
        this.scene.input.on('pointerdown', this.onPointerDown, this);
        this.scene.input.on('pointermove', this.onPointerMove, this);
        this.scene.input.on('pointerup', this.onPointerUp, this);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
        this.scene.input.on('dragstart', this.onDragStart, this);
        this.scene.input.on('drag', this.onDrag, this);
        this.scene.input.on('dragend', this.onDragEnd, this);
        
        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
        this.isInitialized = true;
        console.log('üéØ [DragDropSystem] –°–∏—Å—Ç–µ–º–∞ drag & drop –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è
     * @param {Object} pointer - –û–±—ä–µ–∫—Ç —É–∫–∞–∑–∞—Ç–µ–ª—è Phaser
     */
    onPointerDown(pointer) {
        if (!this.isEnabled) return;
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª–µ–º
        const hitObjects = this.scene.input.hitTestPointer(pointer);
        
        for (const obj of hitObjects) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç
            if (obj.isDraggable && obj.enableDrag) {
                this.draggedObject = obj;
                obj.startDrag(pointer);
                break;
            }
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è
     * @param {Object} pointer - –û–±—ä–µ–∫—Ç —É–∫–∞–∑–∞—Ç–µ–ª—è Phaser
     */
    onPointerMove(pointer) {
        if (!this.isEnabled || !this.draggedObject) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        this.draggedObject.updateDrag(pointer);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è
     * @param {Object} pointer - –û–±—ä–µ–∫—Ç —É–∫–∞–∑–∞—Ç–µ–ª—è Phaser
     */
    onPointerUp(pointer) {
        if (!this.isEnabled || !this.draggedObject) return;
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        this.draggedObject.endDrag(pointer);
        this.draggedObject = null;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è (Phaser)
     * @param {Object} pointer - –û–±—ä–µ–∫—Ç —É–∫–∞–∑–∞—Ç–µ–ª—è
     * @param {Object} gameObject - –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç
     */
    onDragStart(pointer, gameObject) {
        if (!this.isEnabled) return;
        
        console.log(`üéØ [DragDropSystem] –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ ${gameObject.defenseType || 'object'}`);
        
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        this.scene.events.emit(EVENT_TYPES.DRAG_START, {
            object: gameObject,
            pointer: pointer
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è (Phaser)
     * @param {Object} pointer - –û–±—ä–µ–∫—Ç —É–∫–∞–∑–∞—Ç–µ–ª—è
     * @param {Object} gameObject - –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç
     * @param {number} dragX - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     * @param {number} dragY - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    onDrag(pointer, gameObject, dragX, dragY) {
        if (!this.isEnabled) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
        const { width, height } = this.scene.scale;
        const margin = 50;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —ç–∫—Ä–∞–Ω–∞
        const clampedX = Math.max(margin, Math.min(width - margin, dragX));
        const clampedY = Math.max(margin, Math.min(height - margin, dragY));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞
        gameObject.x = clampedX;
        gameObject.y = clampedY;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ
        if (gameObject.physicsBody) {
            gameObject.physicsBody.setPosition(clampedX, clampedY);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è (Phaser)
     * @param {Object} pointer - –û–±—ä–µ–∫—Ç —É–∫–∞–∑–∞—Ç–µ–ª—è
     * @param {Object} gameObject - –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç
     */
    onDragEnd(pointer, gameObject) {
        if (!this.isEnabled) return;
        
        console.log(`üéØ [DragDropSystem] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ ${gameObject.defenseType || 'object'}`);
        
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        this.scene.events.emit(EVENT_TYPES.DRAG_END, {
            object: gameObject,
            pointer: pointer
        });
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–º–µ–Ω—å, —ç–º–∏—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        if (gameObject.defenseType === 'stone') {
            this.scene.events.emit(EVENT_TYPES.STONE_MOVED, {
                stone: gameObject,
                newPosition: { x: gameObject.x, y: gameObject.y }
            });
        }
    }
    
    /**
     * –í–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É drag & drop
     */
    enable() {
        this.isEnabled = true;
        console.log('üéØ [DragDropSystem] Drag & drop –≤–∫–ª—é—á–µ–Ω');
    }
    
    /**
     * –û—Ç–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É drag & drop
     */
    disable() {
        this.isEnabled = false;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        if (this.draggedObject) {
            this.draggedObject.stopDrag();
            this.draggedObject = null;
        }
        
        console.log('üéØ [DragDropSystem] Drag & drop –æ—Ç–∫–ª—é—á–µ–Ω');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
     */
    update() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (this.draggedObject && !this.draggedObject.isAlive) {
            this.draggedObject = null;
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    destroy() {
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (this.retryTimer) {
            clearTimeout(this.retryTimer);
            this.retryTimer = null;
        }

        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ input –¥–æ—Å—Ç—É–ø–µ–Ω
        if (this.scene.input) {
            this.scene.input.off('pointerdown', this.onPointerDown, this);
            this.scene.input.off('pointermove', this.onPointerMove, this);
            this.scene.input.off('pointerup', this.onPointerUp, this);
            this.scene.input.off('dragstart', this.onDragStart, this);
            this.scene.input.off('drag', this.onDrag, this);
            this.scene.input.off('dragend', this.onDragEnd, this);
        }
        
        this.isInitialized = false;
        console.log('üéØ [DragDropSystem] –°–∏—Å—Ç–µ–º–∞ drag & drop —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞');
    }
}

