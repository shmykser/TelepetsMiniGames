import { ISystem } from './interfaces/ISystem.js';
import { EVENT_TYPES } from '../types/EventTypes.js';
import { STONE_SETTINGS } from '../settings/GameSettings.js';
import { GeometryUtils } from '../utils/GeometryUtils.js';

/**
 * –°–∏—Å—Ç–µ–º–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏ (–∫–∞–º–Ω–∏, —è–º—ã –∏ —Ç.–¥.)
 */
export class ObstacleInteractionSystem extends ISystem {
    constructor(scene) {
        super(scene);
        this.obstacles = [];
        this.avoidanceRadius = STONE_SETTINGS.AVOIDANCE_RADIUS;
        this.isInitialized = false;
        this.initializationAttempts = 0;
        this.maxAttempts = 10;
        this.retryTimer = null;
        this.updateTimer = null;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
     */
    initialize() {
        this.setupEventListeners();
        
        // –ï—Å–ª–∏ events –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥
        if (!this.isInitialized) {
            console.log('üöß [ObstacleInteractionSystem] Events –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥');
            this.updateObstaclesFromScene();
            this.isInitialized = true;
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        this.startObstacleUpdate();
        
        console.log('üöß [ObstacleInteractionSystem] –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
     */
    startObstacleUpdate() {
        if (this.updateTimer) {
            clearInterval(this.updateTimer);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        this.updateTimer = setInterval(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ü–µ–Ω–∞ –≤—Å–µ –µ—â–µ –≤–∞–ª–∏–¥–Ω–∞
            if (this.scene && this.scene.scene && this.scene.scene.isActive) {
                this.updateObstaclesFromScene();
            } else {
                console.log(`üöß [ObstacleInteractionSystem] –°—Ü–µ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ`);
                this.destroy();
            }
        }, 2000);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        if (this.isInitialized) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
        if (this.initializationAttempts >= this.maxAttempts) {
            console.error('üöß [ObstacleInteractionSystem] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ events –¥–æ—Å—Ç—É–ø–Ω—ã
        if (!this.scene || !this.scene.events) {
            this.initializationAttempts++;
            console.warn(`üöß [ObstacleInteractionSystem] Events –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–ø—ã—Ç–∫–∞ ${this.initializationAttempts}/${this.maxAttempts}`);
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
            if (this.retryTimer) {
                clearTimeout(this.retryTimer);
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
            this.retryTimer = setTimeout(() => {
                this.setupEventListeners();
            }, 500);
            return;
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (this.retryTimer) {
            clearTimeout(this.retryTimer);
            this.retryTimer = null;
        }

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–∞–º–Ω–µ–π
        this.scene.events.on(EVENT_TYPES.STONE_CREATED, this.onStoneCreated, this);
        this.scene.events.on(EVENT_TYPES.STONE_MOVED, this.onStoneMoved, this);
        this.scene.events.on(EVENT_TYPES.STONE_DESTROYED, this.onStoneDestroyed, this);
        
        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
        this.isInitialized = true;
        console.log('üöß [ObstacleInteractionSystem] –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏–∑ —Å—Ü–µ–Ω—ã (fallback –º–µ—Ç–æ–¥)
     */
    updateObstaclesFromScene() {
        if (!this.scene) {
            console.log(`üöß [ObstacleInteractionSystem] –°—Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ü–µ–Ω–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
        if (this.scene.scene && !this.scene.scene.isActive) {
            console.log(`üöß [ObstacleInteractionSystem] –°—Ü–µ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞`);
            return;
        }

        // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        const allObjects = this.scene.children.list;
        console.log(`üöß [ObstacleInteractionSystem] –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ü–µ–Ω–µ: ${allObjects.length}`);
        
        // –ò—â–µ–º –æ–±—ä–µ–∫—Ç—ã —Å defenseData
        const objectsWithDefenseData = allObjects.filter(obj => obj.defenseData);
        console.log(`üöß [ObstacleInteractionSystem] –û–±—ä–µ–∫—Ç–æ–≤ —Å defenseData: ${objectsWithDefenseData.length}`);
        
        // –ò—â–µ–º –æ–±—ä–µ–∫—Ç—ã —Å isObstacle
        const objectsWithIsObstacle = allObjects.filter(obj => obj.defenseData && obj.defenseData.isObstacle);
        console.log(`üöß [ObstacleInteractionSystem] –û–±—ä–µ–∫—Ç–æ–≤ —Å isObstacle: ${objectsWithIsObstacle.length}`);
        
        // –ò—â–µ–º –∂–∏–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
        const aliveObjects = allObjects.filter(obj => obj.isAlive);
        console.log(`üöß [ObstacleInteractionSystem] –ñ–∏–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: ${aliveObjects.length}`);
        
        // –ò—â–µ–º –∫–∞–º–Ω–∏ –ø–æ —Ç–∏–ø—É
        const stoneObjects = allObjects.filter(obj => 
            obj.defenseData && 
            obj.defenseData.name === 'stone'
        );
        console.log(`üöß [ObstacleInteractionSystem] –ö–∞–º–Ω–µ–π –ø–æ —Ç–∏–ø—É: ${stoneObjects.length}`);

        // –ò—â–µ–º –≤—Å–µ –∫–∞–º–Ω–∏ –≤ —Å—Ü–µ–Ω–µ
        const stones = allObjects.filter(obj => 
            obj.defenseData && 
            obj.defenseData.isObstacle && 
            obj.isAlive
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        this.obstacles = stones;
        console.log(`üöß [ObstacleInteractionSystem] –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –≤ —Å—Ü–µ–Ω–µ: ${this.obstacles.length}`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º PathfindingSystem –æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        this.scene.events.emit(EVENT_TYPES.PATHFINDING_UPDATED, {
            reason: 'obstacles_updated',
            obstacles: this.obstacles
        });
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è—Ö
        stones.forEach((stone, index) => {
            console.log(`üöß [ObstacleInteractionSystem] –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ ${index}:`, {
                type: stone.constructor.name,
                name: stone.defenseData?.name,
                isObstacle: stone.defenseData?.isObstacle,
                affectsGround: stone.defenseData?.affectsGround,
                affectsFlying: stone.defenseData?.affectsFlying,
                isAlive: stone.isAlive,
                x: stone.x,
                y: stone.y
            });
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–Ω—è
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    onStoneCreated(data) {
        const { stone } = data;
        if (stone && stone.defenseData.isObstacle) {
            this.addObstacle(stone);
            console.log(`üöß [ObstacleInteractionSystem] –ö–∞–º–µ–Ω—å –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ (affectsGround: ${stone.defenseData.affectsGround}, affectsFlying: ${stone.defenseData.affectsFlying})`);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–∞–º–Ω—è
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    onStoneMoved(data) {
        const { stone } = data;
        if (stone && this.obstacles.includes(stone)) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
            this.updateObstaclePosition(stone);
            console.log(`üöß [ObstacleInteractionSystem] –ü–æ–∑–∏—Ü–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∫–∞–º–Ω—è
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    onStoneDestroyed(data) {
        const { stone } = data;
        this.removeObstacle(stone);
        console.log(`üöß [ObstacleInteractionSystem] –ö–∞–º–µ–Ω—å —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π`);
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É
     * @param {Object} obstacle - –û–±—ä–µ–∫—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
     */
    addObstacle(obstacle) {
        if (!this.obstacles.includes(obstacle)) {
            this.obstacles.push(obstacle);
            console.log(`üöß [ObstacleInteractionSystem] –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –≤—Å–µ–≥–æ: ${this.obstacles.length}`);
        }
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     * @param {Object} obstacle - –û–±—ä–µ–∫—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
     */
    removeObstacle(obstacle) {
        const index = this.obstacles.indexOf(obstacle);
        if (index !== -1) {
            this.obstacles.splice(index, 1);
            console.log(`üöß [ObstacleInteractionSystem] –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–æ, –≤—Å–µ–≥–æ: ${this.obstacles.length}`);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
     * @param {Object} obstacle - –û–±—ä–µ–∫—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
     */
    updateObstaclePosition(obstacle) {
        // –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç–µ, –ø—Ä–æ—Å—Ç–æ —ç–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏
        this.scene.events.emit(EVENT_TYPES.PATHFINDING_UPDATED, {
            reason: 'obstacle_moved',
            obstacle: obstacle
        });
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –≤—Ä–∞–≥ –æ–±—Ö–æ–¥–∏—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
     * @param {Object} enemy - –û–±—ä–µ–∫—Ç –≤—Ä–∞–≥–∞
     * @param {Object} obstacle - –û–±—ä–µ–∫—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
     * @returns {boolean} true –µ—Å–ª–∏ –≤—Ä–∞–≥ –¥–æ–ª–∂–µ–Ω –æ–±—Ö–æ–¥–∏—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
     */
    shouldAvoidObstacle(enemy, obstacle) {
        // –õ–µ—Ç–∞—é—â–∏–µ –≤—Ä–∞–≥–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç –∫–∞–º–Ω–∏
        if (enemy.movementType === 'flying' && obstacle.defenseType === 'stone') {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–ª–∏—è–µ—Ç –ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Ç–∏–ø –≤—Ä–∞–≥–∞
        if (obstacle.defenseData) {
            if (enemy.movementType === 'flying' && !obstacle.defenseData.affectsFlying) {
                return false;
            }
            if (enemy.movementType === 'ground' && !obstacle.defenseData.affectsGround) {
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç —Ç–æ—á–∫–∏
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞
     * @param {number} radius - –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ
     */
    getObstaclesInRadius(x, y, radius) {
        return this.obstacles.filter(obstacle => {
            if (!obstacle.isAlive) return false;
            
            const distance = GeometryUtils.distance(x, y, obstacle.x, obstacle.y);
            return distance <= radius;
        });
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –±–ª–∏–∂–∞–π—à–µ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –∫ —Ç–æ—á–∫–µ
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {Object} enemy - –û–±—ä–µ–∫—Ç –≤—Ä–∞–≥–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞)
     * @returns {Object|null} –ë–ª–∏–∂–∞–π—à–µ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ null
     */
    getNearestObstacle(x, y, enemy) {
        let nearestObstacle = null;
        let minDistance = Infinity;
        
        for (const obstacle of this.obstacles) {
            if (!obstacle.isAlive) continue;
            if (!this.shouldAvoidObstacle(enemy, obstacle)) continue;
            
            const distance = GeometryUtils.distance(x, y, obstacle.x, obstacle.y);
            if (distance < minDistance) {
                minDistance = distance;
                nearestObstacle = obstacle;
            }
        }
        
        return nearestObstacle;
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ—á–∫—É –æ–±—Ö–æ–¥–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
     * @param {Object} enemy - –û–±—ä–µ–∫—Ç –≤—Ä–∞–≥–∞
     * @param {Object} obstacle - –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
     * @param {Object} target - –¶–µ–ª–µ–≤–∞—è —Ç–æ—á–∫–∞
     * @returns {Object|null} –¢–æ—á–∫–∞ –æ–±—Ö–æ–¥–∞ –∏–ª–∏ null
     */
    calculateAvoidancePoint(enemy, obstacle, target) {
        if (!this.shouldAvoidObstacle(enemy, obstacle)) {
            return null;
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ–∫—Ç–æ—Ä –æ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∫ –≤—Ä–∞–≥—É
        const dx = enemy.x - obstacle.x;
        const dy = enemy.y - obstacle.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance === 0) return null;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä
        const nx = dx / distance;
        const ny = dy / distance;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫—É –æ–±—Ö–æ–¥–∞
        const avoidanceDistance = this.avoidanceRadius + obstacle.radius * 32; // 32 - —Ä–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞
        const avoidanceX = obstacle.x + nx * avoidanceDistance;
        const avoidanceY = obstacle.y + ny * avoidanceDistance;
        
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±—Ö–æ–¥–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        this.scene.events.emit(EVENT_TYPES.OBSTACLE_AVOIDANCE, {
            enemy: enemy,
            obstacle: obstacle,
            avoidancePoint: { x: avoidanceX, y: avoidanceY },
            target: target
        });
        
        return { x: avoidanceX, y: avoidanceY };
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
     */
    update() {
        // –£–¥–∞–ª—è–µ–º —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        this.obstacles = this.obstacles.filter(obstacle => obstacle && obstacle.isAlive);
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    destroy() {
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        if (this.retryTimer) {
            clearTimeout(this.retryTimer);
            this.retryTimer = null;
        }
        
        if (this.updateTimer) {
            clearInterval(this.updateTimer);
            this.updateTimer = null;
        }

        // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ events –¥–æ—Å—Ç—É–ø–Ω—ã
        if (this.scene && this.scene.events) {
            this.scene.events.off(EVENT_TYPES.STONE_CREATED, this.onStoneCreated, this);
            this.scene.events.off(EVENT_TYPES.STONE_MOVED, this.onStoneMoved, this);
            this.scene.events.off(EVENT_TYPES.STONE_DESTROYED, this.onStoneDestroyed, this);
        }
        
        this.obstacles = [];
        this.isInitialized = false;
        console.log('üöß [ObstacleInteractionSystem] –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞');
    }
}

