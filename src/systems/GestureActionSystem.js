import { GESTURE_ACTIONS, TARGET_TYPES, TARGET_SETTINGS } from '../types/gestureTypes';
import { DAMAGE_CONSTANTS, EFFECT_CONSTANTS } from '../constants/GameConstants.js';
import { GeometryUtils } from '../utils/GeometryUtils.js';

/**
 * –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–µ—Å—Ç–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É Single Responsibility Principle
 */
export class GestureActionSystem {
    constructor(scene, enemies, defenses, egg = null, itemDropSystem = null) {
        this.scene = scene;
        this.enemies = enemies;
        this.defenses = defenses;
        this.egg = egg;
        this.itemDropSystem = itemDropSystem;
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∂–µ—Å—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
     * @param {Object} gesture - –û–±—ä–µ–∫—Ç –∂–µ—Å—Ç–∞ –æ—Ç GestureSystem
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
     */
    handleGesture(gesture) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –∂–µ—Å—Ç–∞
        const target = this.detectTarget(gesture.x, gesture.y);
        gesture.target = target;
        
        console.log(`üéØ –ñ–µ—Å—Ç ${gesture.type} –≤ —Ç–æ—á–∫–µ (${gesture.x}, ${gesture.y}) ‚Üí —Ü–µ–ª—å: ${target.type}`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—è
        const actionKey = `${gesture.type}_${target.type}`;
        const action = GESTURE_ACTIONS[actionKey];
        
        if (!action) {
            console.log(`‚ùå –î–µ–π—Å—Ç–≤–∏–µ ${actionKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            return false;
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: ${actionKey} ‚Üí ${action.name}`);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        return this.executeAction(action, gesture, target);
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª—å –∂–µ—Å—Ç–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∂–µ—Å—Ç–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∂–µ—Å—Ç–∞
     * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Ç–∏–ø–æ–º —Ü–µ–ª–∏ –∏ —Å–∞–º–∏–º –æ–±—ä–µ–∫—Ç–æ–º
     */
    detectTarget(x, y) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 - —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞)
        if (this.itemDropSystem && this.itemDropSystem.items) {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${this.itemDropSystem.items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ`);
            
            const item = GeometryUtils.findFirstObjectInRadius(
                this.itemDropSystem.items, x, y,
                TARGET_SETTINGS.item.missTolerance,
                (item) => {
                    const itemHitRadius = GeometryUtils.calculateHitRadius(item, 'item', TARGET_SETTINGS);
                    const inRadius = GeometryUtils.isInRadius(x, y, item.x, item.y, itemHitRadius);
                    console.log(`üì¶ –ü—Ä–µ–¥–º–µ—Ç –≤ (${item.x}, ${item.y}), —Ä–∞–¥–∏—É—Å: ${itemHitRadius}, –ø–æ–ø–∞–¥–∞–Ω–∏–µ: ${inRadius}, —Å–æ–±—Ä–∞–Ω: ${item.isCollected}`);
                    return inRadius && !item.isCollected;
                }
            );
            
            if (item) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Å–±–æ—Ä–∞:`, item.itemType);
                return {
                    type: TARGET_TYPES.ITEM,
                    object: item,
                    x: x,
                    y: y
                };
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–∞–≥–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
        let foundEnemy = null;
        for (const enemy of this.enemies) {
            if (!enemy.isAlive) {
                continue;
            }
            const hitRadius = GeometryUtils.calculateHitRadius(enemy, 'enemy', TARGET_SETTINGS);
            const isInRange = GeometryUtils.isInRadius(x, y, enemy.x, enemy.y, hitRadius);
            if (isInRange) {
                foundEnemy = enemy;
                break;
            }
        }
        
        if (foundEnemy) {
            return {
                type: TARGET_TYPES.ENEMY,
                object: foundEnemy,
                x: x,
                y: y
            };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–π—Ü–æ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3)
        if (this.egg && this.egg.isAlive) {
            const eggHitRadius = GeometryUtils.calculateHitRadius(this.egg, 'egg', TARGET_SETTINGS);
            const isEggInRange = GeometryUtils.isInRadius(x, y, this.egg.x, this.egg.y, eggHitRadius);
            if (isEggInRange) {
                return {
                    type: TARGET_TYPES.EGG,
                    object: this.egg,
                    x: x,
                    y: y
                };
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4)
        const defense = GeometryUtils.findFirstObjectInRadius(
            this.defenses, x, y, 
            0,
            (defense) => {
                const defenseHitRadius = GeometryUtils.calculateHitRadius(defense, 'defense', TARGET_SETTINGS);
                return GeometryUtils.isInRadius(x, y, defense.x, defense.y, defenseHitRadius);
            }
        );
        if (defense) {
            return {
                type: TARGET_TYPES.DEFENSE,
                object: defense,
                x: x,
                y: y
            };
        }
        
        // –ü–æ–ª–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 0)
        return {
            type: TARGET_TYPES.FIELD,
            object: null,
            x: x,
            y: y
        };
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
     * @param {Object} action - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
     * @param {Object} gesture - –û–±—ä–µ–∫—Ç –∂–µ—Å—Ç–∞
     * @param {Object} target - –¶–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    executeAction(action, gesture, target) {
        try {
            switch (action.name) {
                case 'damage_enemy':
                    return this.damageEnemy(target.object, action.damage);
                    
                case 'critical_damage':
                    return this.damageEnemy(target.object, DAMAGE_CONSTANTS.TAP_DAMAGE);
                    
                case 'protect_egg':
                    console.log(`üõ°Ô∏è ${gesture.type} ‚Üí –ó–∞—â–∏—Ç–∏—Ç—å —è–π—Ü–æ (—â–∏—Ç: ${action.shield})`);
                    return true;
                    
                case 'collect_item':
                    console.log(`üíé –†–∞—Å–ø–æ–∑–Ω–∞–Ω –∂–µ—Å—Ç: ${gesture.type} ‚Üí –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç`);
                    if (this.itemDropSystem) {
                        return this.itemDropSystem.collectItem(target.object);
                    }
                    return false;
                    
                case 'place_defense':
                    console.log(`üèóÔ∏è ${gesture.type} ‚Üí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—â–∏—Ç—É (—Ç–∏–ø: ${action.defenseType})`);
                    return true;
                    
                case 'heal_egg':
                    console.log(`‚ù§Ô∏è ${gesture.type} ‚Üí –õ–µ—á–∏—Ç—å —è–π—Ü–æ (–ª–µ—á–µ–Ω–∏–µ: ${action.heal})`);
                    return true;
                    
                case 'explosion':
                    console.log(`üí£ ${gesture.type} ‚Üí –í–∑—Ä—ã–≤ (—Ä–∞–¥–∏—É—Å: ${action.radius}, —É—Ä–æ–Ω: ${action.damage})`);
                    return true;
                    
                case 'freeze_enemy':
                    console.log(`üßä ${gesture.type} ‚Üí –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –≤—Ä–∞–≥–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${action.freezeDuration}–º—Å)`);
                    return true;
                    
                case 'shield_egg':
                    console.log(`üõ°Ô∏è ${gesture.type} ‚Üí –©–∏—Ç –¥–ª—è —è–π—Ü–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${action.shieldDuration}–º—Å, —Å–∏–ª–∞: ${action.shieldStrength})`);
                    return true;
                    
                case 'create_wall':
                    console.log(`üß± ${gesture.type} ‚Üí –°–æ–∑–¥–∞—Ç—å —Å—Ç–µ–Ω—É (—Ç–∏–ø: ${action.wallType})`);
                    return true;
                    
                case 'damage_wave':
                    console.log(`üåä ${gesture.type} ‚Üí –í–æ–ª–Ω–∞ —É—Ä–æ–Ω–∞ (—É—Ä–æ–Ω: ${action.damage}, –¥–∞–ª—å–Ω–æ—Å—Ç—å: ${action.range})`);
                    return true;
                    
                default:
                    console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action.name} –¥–ª—è –∂–µ—Å—Ç–∞ ${gesture.type}`);
                    return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:', error);
            return false;
        }
    }
    
    /**
     * –ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –≤—Ä–∞–≥—É
     * @param {Object} enemy - –û–±—ä–µ–∫—Ç –≤—Ä–∞–≥–∞
     * @param {number} damage - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–Ω–∞
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏
     */
    damageEnemy(enemy, damage = DAMAGE_CONSTANTS.TAP_DAMAGE) {
        if (!enemy || !enemy.isAlive) {
            return false;
        }
        
        enemy.takeDamage(damage);
        return true;
    }
    
    
    /**
     * –í–∑—Ä—ã–≤ –≤ –æ–±–ª–∞—Å—Ç–∏
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤–∑—Ä—ã–≤–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤–∑—Ä—ã–≤–∞
     * @param {number} radius - –†–∞–¥–∏—É—Å –≤–∑—Ä—ã–≤–∞
     * @param {number} damage - –£—Ä–æ–Ω –æ—Ç –≤–∑—Ä—ã–≤–∞
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤–∑—Ä—ã–≤–∞
     */
    explosion(x, y, radius = EFFECT_CONSTANTS.EXPLOSION_RADIUS, damage = DAMAGE_CONSTANTS.EXPLOSION_DAMAGE) {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ –≤–∑—Ä—ã–≤–∞
        const enemiesInRange = GeometryUtils.findObjectsInRadius(this.enemies, x, y, radius, (enemy) => enemy.isAlive);
        enemiesInRange.forEach(enemy => {
            this.damageEnemy(enemy, damage);
        });
        
        return true;
    }
    
    /**
     * –í–æ–ª–Ω–∞ —É—Ä–æ–Ω–∞ –¥–ª—è –ª–∏–Ω–µ–π–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤–æ–ª–Ω—ã
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤–æ–ª–Ω—ã
     * @param {Object} gesture - –û–±—ä–µ–∫—Ç –∂–µ—Å—Ç–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ª–∏–Ω–∏–∏
     * @param {number} damage - –£—Ä–æ–Ω –æ—Ç –≤–æ–ª–Ω—ã
     * @param {number} range - –î–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–ª–Ω—ã
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤–æ–ª–Ω—ã
     */
    damageWave(x, y, gesture, damage = DAMAGE_CONSTANTS.WAVE_DAMAGE, range = EFFECT_CONSTANTS.WAVE_RANGE) {
        // –î–ª—è –ª–∏–Ω–µ–π–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏
        let direction = 'right'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if (gesture.type === 'line' && gesture.endX && gesture.endY) {
            const deltaX = gesture.endX - gesture.x;
            const deltaY = gesture.endY - gesture.y;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
                direction = deltaX > 0 ? 'right' : 'left';
            } else {
                direction = deltaY > 0 ? 'down' : 'up';
            }
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Ä–∞–≥–æ–≤ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ª–Ω—ã
        const enemiesInWave = GeometryUtils.findObjectsInDirection(this.enemies, x, y, direction, range, (enemy) => enemy.isAlive);
        enemiesInWave.forEach(enemy => {
            this.damageEnemy(enemy, damage);
        });
        
        return true;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
     * @param {Array} enemies - –ú–∞—Å—Å–∏–≤ –≤—Ä–∞–≥–æ–≤
     * @param {Array} defenses - –ú–∞—Å—Å–∏–≤ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
     */
    updateObjects(enemies, defenses) {
        this.enemies = enemies;
        this.defenses = defenses;
    }
}
