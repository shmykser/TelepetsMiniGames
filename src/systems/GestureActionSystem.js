import { GESTURE_ACTIONS, TARGET_TYPES, TARGET_SETTINGS } from '../types/gestureTypes';
import { GeometryUtils } from '../utils/GeometryUtils.js';
import { Defense } from '../objects/Defense.js';

/**
 * –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–µ—Å—Ç–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É Single Responsibility Principle
 */
export class GestureActionSystem {
    constructor(scene, enemies, defenses, egg = null, itemDropSystem = null, abilitySystem = null) {
        this.scene = scene;
        this.enemies = enemies;
        this.defenses = defenses;
        this.egg = egg;
        this.itemDropSystem = itemDropSystem;
        this.abilitySystem = abilitySystem;
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∂–µ—Å—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
     * @param {Object} gesture - –û–±—ä–µ–∫—Ç –∂–µ—Å—Ç–∞ –æ—Ç GestureSystem
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
     */
    handleGesture(gesture) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –∂–µ—Å—Ç–∞
        const target = this.detectTarget(gesture.x, gesture.y);
        gesture.target = target;
        
        console.log(`üéØ –ñ–µ—Å—Ç ${gesture.type} –≤ —Ç–æ—á–∫–µ (${gesture.x}, ${gesture.y}) ‚Üí —Ü–µ–ª—å: ${target.type}`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—è
        const actionKey = `${gesture.type}_${target.type}`;
        const action = GESTURE_ACTIONS[actionKey];
        
        if (!action) {
            console.log(`‚ùå –î–µ–π—Å—Ç–≤–∏–µ ${actionKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            return false;
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: ${actionKey} ‚Üí ${action.name}`);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        return this.executeAction(action, gesture, target);
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª—å –∂–µ—Å—Ç–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∂–µ—Å—Ç–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∂–µ—Å—Ç–∞
     * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Ç–∏–ø–æ–º —Ü–µ–ª–∏ –∏ —Å–∞–º–∏–º –æ–±—ä–µ–∫—Ç–æ–º
     */
    detectTarget(x, y) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 - —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞)
        if (this.itemDropSystem && this.itemDropSystem.items) {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${this.itemDropSystem.items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ`);
            
            const item = GeometryUtils.findFirstObjectInRadius(
                this.itemDropSystem.items, x, y,
                TARGET_SETTINGS.item.missTolerance,
                (item) => {
                    const itemHitRadius = GeometryUtils.calculateHitRadius(item, 'item', TARGET_SETTINGS);
                    const inRadius = GeometryUtils.isInRadius(x, y, item.x, item.y, itemHitRadius);
                    console.log(`üì¶ –ü—Ä–µ–¥–º–µ—Ç –≤ (${item.x}, ${item.y}), —Ä–∞–¥–∏—É—Å: ${itemHitRadius}, –ø–æ–ø–∞–¥–∞–Ω–∏–µ: ${inRadius}, —Å–æ–±—Ä–∞–Ω: ${item.isCollected}`);
                    return inRadius && !item.isCollected;
                }
            );
            
            if (item) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Å–±–æ—Ä–∞:`, item.itemType);
                return {
                    type: TARGET_TYPES.ITEM,
                    object: item,
                    x: x,
                    y: y
                };
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–∞–≥–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
        let foundEnemy = null;
        for (const enemy of this.enemies) {
            if (!enemy.isAlive) {
                continue;
            }
            const hitRadius = GeometryUtils.calculateHitRadius(enemy, 'enemy', TARGET_SETTINGS);
            const isInRange = GeometryUtils.isInRadius(x, y, enemy.x, enemy.y, hitRadius);
            if (isInRange) {
                foundEnemy = enemy;
                break;
            }
        }
        
        if (foundEnemy) {
            return {
                type: TARGET_TYPES.ENEMY,
                object: foundEnemy,
                x: x,
                y: y
            };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–π—Ü–æ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3)
        if (this.egg && this.egg.isAlive) {
            const eggHitRadius = GeometryUtils.calculateHitRadius(this.egg, 'egg', TARGET_SETTINGS);
            const isEggInRange = GeometryUtils.isInRadius(x, y, this.egg.x, this.egg.y, eggHitRadius);
            if (isEggInRange) {
                return {
                    type: TARGET_TYPES.EGG,
                    object: this.egg,
                    x: x,
                    y: y
                };
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4)
        const defense = GeometryUtils.findFirstObjectInRadius(
            this.defenses, x, y, 
            0,
            (defense) => {
                const defenseHitRadius = GeometryUtils.calculateHitRadius(defense, 'defense', TARGET_SETTINGS);
                return GeometryUtils.isInRadius(x, y, defense.x, defense.y, defenseHitRadius);
            }
        );
        if (defense) {
            return {
                type: TARGET_TYPES.DEFENSE,
                object: defense,
                x: x,
                y: y
            };
        }
        
        // –ü–æ–ª–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 0)
        return {
            type: TARGET_TYPES.FIELD,
            object: null,
            x: x,
            y: y
        };
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
     * @param {Object} action - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
     * @param {Object} gesture - –û–±—ä–µ–∫—Ç –∂–µ—Å—Ç–∞
     * @param {Object} target - –¶–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    executeAction(action, gesture, target) {
        try {
            switch (action.name) {
                case 'damage_enemy':
                    // –ï—Å–ª–∏ damage –Ω–µ —É–∫–∞–∑–∞–Ω –≤ action, –∏—Å–ø–æ–ª—å–∑—É–µ–º AbilitySystem
                    const damage = action.damage || this.abilitySystem?.getTapDamage() || 5;
                    return this.damageEnemy(target.object, damage);
                    
                case 'critical_damage':
                    return this.damageEnemy(target.object, this.abilitySystem?.getTapDamage() || 5);
                    
                case 'activate_egg_explosion':
                    console.log(`üí• ${gesture.type} ‚Üí –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∑—Ä—ã–≤ —è–π—Ü–∞`);
                    return this.activateEggExplosion(target.object);
                    
                case 'collect_item':
                    console.log(`üíé –†–∞—Å–ø–æ–∑–Ω–∞–Ω –∂–µ—Å—Ç: ${gesture.type} ‚Üí –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç`);
                    return this.collectItem(target.object);
                    
                case 'place_defense':
                    console.log(`üèóÔ∏è ${gesture.type} ‚Üí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—â–∏—Ç—É (—Ç–∏–ø: ${action.defenseType})`);
                    return true;
                    
                case 'heal_egg':
                    console.log(`‚ù§Ô∏è ${gesture.type} ‚Üí –õ–µ—á–∏—Ç—å —è–π—Ü–æ (–ª–µ—á–µ–Ω–∏–µ: ${action.heal})`);
                    return true;
                    
                case 'explosion':
                    console.log(`üí£ ${gesture.type} ‚Üí –í–∑—Ä—ã–≤ (—Ä–∞–¥–∏—É—Å: ${action.radius}, —É—Ä–æ–Ω: ${action.damage})`);
                    return true;
                    
                case 'freeze_enemy':
                    console.log(`üßä ${gesture.type} ‚Üí –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –≤—Ä–∞–≥–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${action.freezeDuration}–º—Å)`);
                    return true;
                    
                case 'shield_egg':
                    console.log(`üõ°Ô∏è ${gesture.type} ‚Üí –©–∏—Ç –¥–ª—è —è–π—Ü–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${action.shieldDuration}–º—Å, —Å–∏–ª–∞: ${action.shieldStrength})`);
                    return true;
                    
                case 'create_pit':
                    return this.placePit(gesture.x, gesture.y);
                    
                case 'damage_wave':
                    console.log(`üåä ${gesture.type} ‚Üí –í–æ–ª–Ω–∞ —É—Ä–æ–Ω–∞ (—É—Ä–æ–Ω: ${action.damage}, –¥–∞–ª—å–Ω–æ—Å—Ç—å: ${action.range})`);
                    return true;
                    
                default:
                    console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action.name} –¥–ª—è –∂–µ—Å—Ç–∞ ${gesture.type}`);
                    return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:', error);
            return false;
        }
    }
    
    /**
     * –ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –≤—Ä–∞–≥—É
     * @param {Object} enemy - –û–±—ä–µ–∫—Ç –≤—Ä–∞–≥–∞
     * @param {number} damage - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–Ω–∞
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏
     */
    damageEnemy(enemy, damage = null) {
        // –ï—Å–ª–∏ —É—Ä–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –∏–∑ AbilitySystem –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (damage === null) {
            damage = this.abilitySystem?.getTapDamage() || 5;
        }
        if (!enemy || !enemy.isAlive) {
            return false;
        }
        
        enemy.takeDamage(damage);
        return true;
    }
    
    
    /**
     * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∑—Ä—ã–≤ —è–π—Ü–∞
     * @param {Object} egg - –û–±—ä–µ–∫—Ç —è–π—Ü–∞
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
     */
    activateEggExplosion(egg) {
        if (!egg || !egg.activateEggExplosion) {
            return false;
        }
        
        return egg.activateEggExplosion();
    }
    
    /**
     * –°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç
     * @param {Object} item - –û–±—ä–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–±–æ—Ä–∞
     */
    collectItem(item) {
        if (!item || item.isCollected) {
            return false;
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        item.activate();
        
        // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
        return item.collect();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
     * @param {Array} enemies - –ú–∞—Å—Å–∏–≤ –≤—Ä–∞–≥–æ–≤
     * @param {Array} defenses - –ú–∞—Å—Å–∏–≤ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
     */
    updateObjects(enemies, defenses) {
        this.enemies = enemies;
        this.defenses = defenses;
    }
    
    /**
     * –†–∞–∑–º–µ—â–∞–µ—Ç –∏–ª–∏ —Ä–∞—Å—à–∏—Ä—è–µ—Ç —è–º—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
     * @param {number} x - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
     * @param {number} y - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    placePit(x, y) {
        if (!this.abilitySystem) {
            console.log(`üï≥Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π`);
            return false;
        }
        
        const shovelCount = this.abilitySystem.getShovelCount();
        const pitCount = this.abilitySystem.getPitCount();
        const maxPits = this.abilitySystem.abilities.PIT?.maxValue || 4;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–ø–∞—Ç—ã
        if (shovelCount <= 0) {
            console.log(`ü™ì –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–ø–∞—Ç –¥–ª—è –∫–æ–ø–∞–Ω–∏—è (–ª–æ–ø–∞—Ç: ${shovelCount})`);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —è–º–∞ –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ
        const existingPit = this.findPitAt(x, y);
        
        if (existingPit) {
            // –†–∞—Å—à–∏—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —è–º—É (pitCount –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
            console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —è–º–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è`);
            return this.expandPit(existingPit);
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–∫–æ–ø–∞—Ç—å –Ω–æ–≤—É—é —è–º—É
            if (pitCount >= maxPits) {
                console.log(`üï≥Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–º –Ω–∞ –ø–æ–ª–µ (${pitCount}/${maxPits})`);
                return false;
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —è–º—É (pitCount —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è)
            console.log(`üÜï –í—ã–∫–∞–ø—ã–≤–∞–µ–º –Ω–æ–≤—É—é —è–º—É`);
            return this.digNewPit(x, y);
        }
    }
    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —è–º—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
     * @param {number} x - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
     * @param {number} y - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
     * @returns {Object|null} –ù–∞–π–¥–µ–Ω–Ω–∞—è —è–º–∞ –∏–ª–∏ null
     */
    findPitAt(x, y) {
        const searchRadius = 50; // –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        
        if (!this.defenses || this.defenses.length === 0) {
            return null;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º GeometryUtils –¥–ª—è –ø–æ–∏—Å–∫–∞
        const pit = GeometryUtils.findFirstObjectInRadius(
            this.defenses, 
            x, y, 
            searchRadius,
            (defense) => defense && defense.defenseType === 'pit' && defense.isAlive
        );
        
        if (pit) {
            const distance = GeometryUtils.distance(x, y, pit.x, pit.y);
            console.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ —è–º–∞ –≤ —Ä–∞–¥–∏—É—Å–µ ${distance.toFixed(1)}px –æ—Ç (${x}, ${y})`);
        } else {
            console.log(`üîç –Ø–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–∞–¥–∏—É—Å–µ ${searchRadius}px –æ—Ç (${x}, ${y})`);
        }
        
        return pit;
    }
    
    /**
     * –†–∞—Å—à–∏—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —è–º—É
     * @param {Object} pit - –û–±—ä–µ–∫—Ç —è–º—ã
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
     */
    expandPit(pit) {
        try {
            const pitHealthIncrease = this.abilitySystem.getPitHealth();
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —è–º—ã (Defense –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ health)
            const oldHealth = pit.health;
            const newHealth = Math.min(pit.health + pitHealthIncrease, pit.maxHealth);
            pit.health = newHealth;
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤–∏–∑—É–∞–ª—å–Ω–æ
            const currentScale = pit.scaleX;
            const newScale = Math.min(currentScale * 1.2, 3.0); // –ú–∞–∫—Å–∏–º—É–º –≤ 5 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ
            pit.setScale(newScale);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –ª–æ–ø–∞—Ç—ã, pitCount –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
            this.abilitySystem.abilities.SHOVEL_COUNT -= 1;
            
            console.log(`üï≥Ô∏è –Ø–º–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –≤ (${pit.x}, ${pit.y})`);
            console.log(`üíö –ó–¥–æ—Ä–æ–≤—å–µ: ${oldHealth} ‚Üí ${newHealth} (+${pitHealthIncrease})`);
            console.log(`üìè –†–∞–∑–º–µ—Ä: ${currentScale.toFixed(1)} ‚Üí ${newScale.toFixed(1)}`);
            console.log(`ü™ì –õ–æ–ø–∞—Ç –æ—Å—Ç–∞–ª–æ—Å—å: ${this.abilitySystem.getShovelCount()}`);
            
            // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤—Ä–∞–≥–æ–º - –∑–∞–≥–ª—É—à–∫–∞
            console.log(`‚öîÔ∏è –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤—Ä–∞–≥–∞–º–∏ (–∑–∞–≥–ª—É—à–∫–∞)`);
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —è–º—ã:', error);
            return false;
        }
    }
    
    /**
     * –í—ã–∫–∞–ø—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —è–º—É
     * @param {number} x - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
     * @param {number} y - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è
     */
    digNewPit(x, y) {
        try {
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —è–º—ã —á–µ—Ä–µ–∑ Defense.createDefense
            const pit = Defense.createDefense(this.scene, 'pit', x, y);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ü–µ–Ω—ã
            this.scene.defenses.push(pit);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            this.abilitySystem.abilities.PIT += 1;
            this.abilitySystem.abilities.SHOVEL_COUNT -= 1;
            
            console.log(`üï≥Ô∏è –Ø–º–∞ –≤—ã–∫–æ–ø–∞–Ω–∞ –≤ (${x}, ${y}), –∑–¥–æ—Ä–æ–≤—å–µ: ${pit.health}`);
            console.log(`üï≥Ô∏è –Ø–º –Ω–∞ –ø–æ–ª–µ: ${this.abilitySystem.getPitCount()}`);
            console.log(`ü™ì –õ–æ–ø–∞—Ç –æ—Å—Ç–∞–ª–æ—Å—å: ${this.abilitySystem.getShovelCount()}`);
            
            // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤—Ä–∞–≥–æ–º - –∑–∞–≥–ª—É—à–∫–∞
            console.log(`‚öîÔ∏è –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤—Ä–∞–≥–∞–º–∏ (–∑–∞–≥–ª—É—à–∫–∞)`);
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è–º—ã:', error);
            return false;
        }
    }
    
}
