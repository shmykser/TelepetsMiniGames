import { GESTURE_ACTIONS, TARGET_TYPES, TARGET_SETTINGS } from '../types/gestureTypes';
import { EVENT_TYPES } from '../types/EventTypes.js';
import { GeometryUtils } from '../utils/GeometryUtils.js';
import { Defense } from '../objects/Defense.js';
import { Enemy } from '../objects/Enemy.js';

/**
 * –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–µ—Å—Ç–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É Single Responsibility Principle
 */
export class GestureActionSystem {
    constructor(scene, enemies, defenses, egg = null, itemDropSystem = null, abilitySystem = null) {
        this.scene = scene;
        this.enemies = enemies;
        this.defenses = defenses || (scene && scene.defenses) || [];
        this.egg = egg;
        this.itemDropSystem = itemDropSystem;
        this.abilitySystem = abilitySystem;
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–∞—Ö–∞—Ä–∞, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –≤—Ä–∞–≥–∏ —Ç–æ–∂–µ –ø—Ä–∏—Ç—è–≥–∏–≤–∞–ª–∏—Å—å
        if (this.scene && this.scene.time) {
            this._sugarRefreshTimer = this.scene.time.addEvent({
                delay: 300,
                loop: true,
                callback: () => { this.updateSugarEffects(); this.updatePitEffects(); },
                callbackScope: this
            });
        }
        // –¢–∞–∫–∂–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–ø–∞–≤–Ω –≤—Ä–∞–≥–æ–≤, —á—Ç–æ–±—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏—Ö –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–¥–∏—É—Å
        if (this.scene && this.scene.events) {
            this.scene.events.on(EVENT_TYPES.ENEMY_SPAWN, (payload) => {
                const spawned = payload?.enemy;
                if (!spawned) return;
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞–≥–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
                const arr = this.getEnemiesArray();
                if (!arr.includes(spawned)) {
                    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤, –¥–æ–±–∞–≤–∏–º —Ç—É–¥–∞
                    if (arr === this.enemies) {
                        this.enemies.push(spawned);
                    }
                }
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∞—Ö–∞—Ä–æ–≤
                const sugars = this.getSugarsArray();
                sugars.forEach(s => this.updateSingleSugarEffect(s));
            });
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤—Ä–∞–≥–æ–≤ (–∏–∑ waveSystem, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
     */
    getEnemiesArray() {
        const wsEnemies = this.scene?.waveSystem?.enemies;
        return Array.isArray(wsEnemies) ? wsEnemies : this.enemies;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–∞—Ö–∞—Ä–æ–≤ –∏–∑ —Å—Ü–µ–Ω—ã
     */
    getSugarsArray() {
        const list = this.scene?.defenses || this.defenses || [];
        return list.filter(d => d && d.defenseType === 'sugar' && d.isAlive);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∂–µ—Å—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
     * @param {Object} gesture - –û–±—ä–µ–∫—Ç –∂–µ—Å—Ç–∞ –æ—Ç GestureSystem
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
     */
    handleGesture(gesture) {
        console.log(`üéØ [DEBUG] handleGesture: type=${gesture.type}, x=${gesture.x}, y=${gesture.y}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –∂–µ—Å—Ç–∞
        const target = this.detectTarget(gesture.x, gesture.y);
        gesture.target = target;
        
        console.log(`üéØ [DEBUG] detectTarget result: type=${target.type}`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—è
        const actionKey = `${gesture.type}_${target.type}`;
        const action = GESTURE_ACTIONS[actionKey];
        
        console.log(`üéØ [DEBUG] actionKey=${actionKey}, action=${action?.name || 'null'}`);
        
        if (!action) {
            console.log(`üéØ [DEBUG] No action found for ${actionKey}`);
            return false;
        }
        
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        return this.executeAction(action, gesture, target);
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª—å –∂–µ—Å—Ç–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∂–µ—Å—Ç–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∂–µ—Å—Ç–∞
     * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Ç–∏–ø–æ–º —Ü–µ–ª–∏ –∏ —Å–∞–º–∏–º –æ–±—ä–µ–∫—Ç–æ–º
     */
    detectTarget(x, y) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 - —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞)
        if (this.itemDropSystem && this.itemDropSystem.items) {
            const item = GeometryUtils.findFirstObjectInRadius(
                this.itemDropSystem.items, x, y,
                TARGET_SETTINGS.item.missTolerance,
                (item) => {
                    const itemHitRadius = GeometryUtils.calculateHitRadius(item, 'item', TARGET_SETTINGS);
                    const inRadius = GeometryUtils.isInRadius(x, y, item.x, item.y, itemHitRadius);
                    return inRadius && !item.isCollected;
                }
            );
            
            if (item) {
                console.log('üçØ [GestureAction] –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Å–±–æ—Ä–∞:', item.itemType);
                return {
                    type: TARGET_TYPES.ITEM,
                    object: item,
                    x: x,
                    y: y
                };
            }
        } else {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ItemDropSystem –∏–∑ Enemy
            if (Enemy.itemDropSystem) {
                this.itemDropSystem = Enemy.itemDropSystem;
                
                if (this.itemDropSystem && this.itemDropSystem.items) {
                    const item = GeometryUtils.findFirstObjectInRadius(
                        this.itemDropSystem.items, x, y,
                        TARGET_SETTINGS.item.missTolerance,
                        (item) => {
                            const itemHitRadius = GeometryUtils.calculateHitRadius(item, 'item', TARGET_SETTINGS);
                            const inRadius = GeometryUtils.isInRadius(x, y, item.x, item.y, itemHitRadius);
                            return inRadius && !item.isCollected;
                        }
                    );
                    
                    if (item) {
                        return {
                            type: TARGET_TYPES.ITEM,
                            object: item,
                            x: x,
                            y: y
                        };
                    }
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–∞–≥–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
        let foundEnemy = null;
        for (const enemy of this.getEnemiesArray()) {
            if (!enemy.isAlive) {
                continue;
            }
            const hitRadius = GeometryUtils.calculateHitRadius(enemy, 'enemy', TARGET_SETTINGS);
            const isInRange = GeometryUtils.isInRadius(x, y, enemy.x, enemy.y, hitRadius);
            if (isInRange) {
                foundEnemy = enemy;
                break;
            }
        }
        
        if (foundEnemy) {
            return {
                type: TARGET_TYPES.ENEMY,
                object: foundEnemy,
                x: x,
                y: y
            };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–π—Ü–æ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3)
        if (this.egg && this.egg.isAlive) {
            const eggHitRadius = GeometryUtils.calculateHitRadius(this.egg, 'egg', TARGET_SETTINGS);
            const isEggInRange = GeometryUtils.isInRadius(x, y, this.egg.x, this.egg.y, eggHitRadius);
            if (isEggInRange) {
                return {
                    type: TARGET_TYPES.EGG,
                    object: this.egg,
                    x: x,
                    y: y
                };
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4)
        const defense = GeometryUtils.findFirstObjectInRadius(
            this.defenses, x, y, 
            0,
            (defense) => {
                const defenseHitRadius = GeometryUtils.calculateHitRadius(defense, 'defense', TARGET_SETTINGS);
                return GeometryUtils.isInRadius(x, y, defense.x, defense.y, defenseHitRadius);
            }
        );
        if (defense) {
            return {
                type: TARGET_TYPES.DEFENSE,
                object: defense,
                x: x,
                y: y
            };
        }
        
        // –ü–æ–ª–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 0)
        return {
            type: TARGET_TYPES.FIELD,
            object: null,
            x: x,
            y: y
        };
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
     * @param {Object} action - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
     * @param {Object} gesture - –û–±—ä–µ–∫—Ç –∂–µ—Å—Ç–∞
     * @param {Object} target - –¶–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    executeAction(action, gesture, target) {
        try {
            switch (action.name) {
                case 'damage_enemy':
                    // –ï—Å–ª–∏ damage –Ω–µ —É–∫–∞–∑–∞–Ω –≤ action, –∏—Å–ø–æ–ª—å–∑—É–µ–º AbilitySystem
                    const damage = action.damage || this.abilitySystem?.getTapDamage() || 5;
                    return this.damageEnemy(target.object, damage);
                    
                case 'critical_damage':
                    return this.damageEnemy(target.object, this.abilitySystem?.getTapDamage() || 5);
                    
                case 'activate_egg_explosion':
                    return this.activateEggExplosion(target.object);
                    
                case 'collect_item':
                    return this.collectItem(target.object);
                    
                case 'place_defense':
                    return true;
                    
                case 'heal_egg':
                    return true;
                    
                case 'explosion':
                    return this.createSugar(gesture.x, gesture.y);
                    
                case 'freeze_enemy':
                    return true;
                    
                case 'shield_egg':
                    return true;
                    
                case 'create_pit':
                    return this.placePit(gesture.x, gesture.y);
                    
                case 'damage_wave':
                    return true;
                    
                default:
                    return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:', error);
            return false;
        }
    }
    
    /**
     * –ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –≤—Ä–∞–≥—É
     * @param {Object} enemy - –û–±—ä–µ–∫—Ç –≤—Ä–∞–≥–∞
     * @param {number} damage - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–Ω–∞
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏
     */
    damageEnemy(enemy, damage = null) {
        // –ï—Å–ª–∏ —É—Ä–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –∏–∑ AbilitySystem –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (damage === null) {
            damage = this.abilitySystem?.getTapDamage() || 5;
        }
        if (!enemy || !enemy.isAlive) {
            return false;
        }
        
        enemy.takeDamage(damage);
        return true;
    }
    
    
    /**
     * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∑—Ä—ã–≤ —è–π—Ü–∞
     * @param {Object} egg - –û–±—ä–µ–∫—Ç —è–π—Ü–∞
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
     */
    activateEggExplosion(egg) {
        if (!egg || !egg.activateEggExplosion) {
            return false;
        }
        
        return egg.activateEggExplosion();
    }
    
    /**
     * –°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç
     * @param {Object} item - –û–±—ä–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–±–æ—Ä–∞
     */
    collectItem(item) {
        if (!item || item.isCollected) {
            return false;
        }
        
        console.log('üçØ [GestureAction] –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç:', item.itemType);
        if (item.itemType === 'shovel') {
            console.log(`ü™ì [DEBUG] collectItem: –ª–æ–ø–∞—Ç –¥–æ —Å–±–æ—Ä–∞: ${this.abilitySystem.getShovelCount()}`);
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        item.activate();
        
        if (item.itemType === 'shovel') {
            console.log(`ü™ì [DEBUG] collectItem: –ª–æ–ø–∞—Ç –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞: ${this.abilitySystem.getShovelCount()}`);
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
        const result = item.collect();
        return result;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
     * @param {Array} enemies - –ú–∞—Å—Å–∏–≤ –≤—Ä–∞–≥–æ–≤
     * @param {Array} defenses - –ú–∞—Å—Å–∏–≤ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
     */
    updateObjects(enemies, defenses) {
        this.enemies = enemies;
        this.defenses = defenses;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º ItemDropSystem –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ Enemy
        if (this.itemDropSystem !== Enemy.itemDropSystem) {
            this.itemDropSystem = Enemy.itemDropSystem;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–∞—Ö–∞—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
        this.updateSugarEffects();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–∞—Ö–∞—Ä–∞ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã—Ö –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ
     */
    updateSugarEffects() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–∞—Ö–∞—Ä—ã –Ω–∞ –ø–æ–ª–µ
        const sugars = this.getSugarsArray();
        
        sugars.forEach(sugar => {
            this.updateSingleSugarEffect(sugar);
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã —è–º - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤—Ä–∞–≥–∞–º–∏
     */
    updatePitEffects() {
        if (!this.scene || !this.scene.defenses) return;
        const pits = this.scene.defenses.filter(d => d && d.isAlive && d.defenseType === 'pit');
        pits.forEach(pit => this.updateSinglePitEffect(pit));
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–∑—É–∞–ª–∞ —è–º—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {Object} pit
     */
    initPitVisual(pit) {
        if (!pit) return;
        if (pit._pitBaseInitialized) return;
        const baseHealth = pit._defenseData?.health ?? pit.health ?? 1;
        pit._pitBaseHealth = Math.max(1, baseHealth);
        pit._pitBaseScaleX = pit.scaleX || 1;
        pit._pitBaseScaleY = pit.scaleY || 1;
        pit._pitBaseInitialized = true;
        this.updatePitVisual(pit);
    }

    /**
     * –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–¥–∏—É—Å –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —è–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
     * @param {Object} pit
     */
    updatePitVisual(pit) {
        if (!pit) return;
        if (!pit._pitBaseInitialized) this.initPitVisual(pit);
        const health = Math.max(0, pit.health || 0);
        const baseHealth = pit._pitBaseHealth || 1;
        const scaleFactor = Math.max(0.1, health / baseHealth);
        
        // –ê–±—Å–æ–ª—é—Ç–Ω—ã–π —Å–∫–µ–π–ª –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–≥–æ
        pit.setScale(pit._pitBaseScaleX * scaleFactor, pit._pitBaseScaleY * scaleFactor);
        
        // –†–∞–¥–∏—É—Å –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä—É —Å–ø—Ä–∞–π—Ç–∞ (–ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç displayWidth)
        const newRadius = (pit.displayWidth || pit.width || 64) / 2;
        if (pit._defenseData) pit._defenseData.radius = newRadius;
        
        console.log(`üï≥Ô∏è [DEBUG] updatePitVisual: health=${health}, scale=${scaleFactor.toFixed(2)}, displayWidth=${pit.displayWidth}, radius=${newRadius.toFixed(1)}`);
        
        // –û–±–Ω–æ–≤–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (pit._debugCircle) {
            const g = pit._debugCircle;
            g.clear();
            g.lineStyle(2, 0xaa5500, 0.8);
            g.strokeCircle(pit.x, pit.y, newRadius);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç —è–º—ã: –∏—â–µ—Ç –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ "–≤–∑–∞–∏–º–Ω–æ–µ –≤—ã—á–∏—Ç–∞–Ω–∏–µ" –∑–¥–æ—Ä–æ–≤—å—è
     * @param {Object} pit
     */
    updateSinglePitEffect(pit) {
        if (!pit || !pit.isAlive) return;
        this.initPitVisual(pit);

        const radius = Math.max(0, pit._defenseData?.radius || 0);
        if (radius <= 0) return;

        // –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
        if (!pit._debugCircle && this.scene?.add) {
            pit._debugCircle = this.scene.add.graphics();
            pit._debugCircle.setDepth(5);
            pit._debugCircle.setAlpha(0.25);
        }
        if (pit._debugCircle) {
            const g = pit._debugCircle;
            g.clear();
            g.lineStyle(2, 0xaa5500, 0.8);
            g.strokeCircle(pit.x, pit.y, radius);
        }

           const allEnemiesInRadius = GeometryUtils.findObjectsInRadius(
               this.getEnemiesArray(),
               pit.x,
               pit.y,
               radius,
               (enemy) => enemy && enemy.isAlive && enemy.aiCoordinator
           );
           
           // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ª–µ—Ç–∞—é—â–∏—Ö –≤—Ä–∞–≥–æ–≤
           const enemies = allEnemiesInRadius.filter(enemy => !enemy.canFly);
           
           if (allEnemiesInRadius.length > 0) {
               console.log(`üï≥Ô∏è [DEBUG] –í—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ —è–º—ã: ${allEnemiesInRadius.length} (–ª–µ—Ç–∞—é—â–∏—Ö: ${allEnemiesInRadius.filter(e => e.canFly).length}, –Ω–µ–ª–µ—Ç–∞—é—â–∏—Ö: ${enemies.length})`);
           }

        if (enemies.length === 0) return;

        // –î–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        enemies.forEach(enemy => {
            if (!pit.isAlive || !enemy.isAlive) return;
            const enemyHealth = Math.max(0, enemy.health ?? 0);
            const pitHealth = Math.max(0, pit.health ?? 0);
            if (pitHealth <= 0) return;

            if (pitHealth > enemyHealth) {
                // –Ø–º–∞ —Å–∏–ª—å–Ω–µ–µ: –≤—Ä–∞–≥ —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è, —è–º–∞ —Ç–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞
                if (enemy.takeDamage) {
                    enemy.takeDamage(enemyHealth);
                } else {
                    enemy.isAlive = false;
                }
                pit.health = pitHealth - enemyHealth;
                this.updatePitVisual(pit);
            } else if (pitHealth < enemyHealth) {
                // –í—Ä–∞–≥ —Å–∏–ª—å–Ω–µ–µ: –≤—Ä–∞–≥ —Ç–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —è–º—ã, —è–º–∞ —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è
                if (enemy.takeDamage) {
                    enemy.takeDamage(pitHealth);
                }
                pit.health = 0;
                this.updatePitVisual(pit);
                // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —è–º—É
                if (pit.destroy) {
                    if (pit._debugCircle) { pit._debugCircle.destroy(); pit._debugCircle = null; }
                    pit.destroy();
                }
            } else {
                // –†–∞–≤–Ω—ã–µ: –æ–±–∞ —É–Ω–∏—á—Ç–æ–∂–∞—é—Ç—Å—è
                if (enemy.takeDamage) {
                    enemy.takeDamage(enemyHealth);
                } else {
                    enemy.isAlive = false;
                }
                pit.health = 0;
                this.updatePitVisual(pit);
                if (pit.destroy) {
                    if (pit._debugCircle) { pit._debugCircle.destroy(); pit._debugCircle = null; }
                    pit.destroy();
                }
            }
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –æ–¥–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞
     * @param {Object} sugar - –û–±—ä–µ–∫—Ç —Å–∞—Ö–∞—Ä–∞
     */
    updateSingleSugarEffect(sugar) {
        const radius = this.getSugarRadiusPx(sugar);
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∂–∏–≤—ã—Ö –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ
        const enemiesInRange = GeometryUtils.findObjectsInRadius(
            this.getEnemiesArray(),
            sugar.x,
            sugar.y,
            radius,
            (enemy) => enemy && enemy.isAlive && enemy.aiCoordinator
        );
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–∞–≥–∏ –≤ —Ä–∞–¥–∏—É—Å–µ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
        if (enemiesInRange.length > 0) {
            console.log(`üç© [Sugar] UPDATE: –Ω–∞–π–¥–µ–Ω–æ ${enemiesInRange.length} –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ ${radius}px`);
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ü–µ–ª–∏ –≤—Ä–∞–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∞—Ç–∞–∫—É—é—Ç —ç—Ç–æ—Ç —Å–∞—Ö–∞—Ä
        enemiesInRange.forEach(enemy => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞—Ç–∞–∫—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å–∞—Ö–∞—Ä
            if (enemy._target !== sugar && enemy.aiCoordinator && enemy.aiCoordinator.setTarget) {
                console.log(`üç© [Sugar] UPDATE: –ù–æ–≤—ã–π –≤—Ä–∞–≥ ${enemy.enemyType} –≤ —Ä–∞–¥–∏—É—Å–µ —Å–∞—Ö–∞—Ä–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ü–µ–ª—å`);
                console.log(`üç© [Sugar] UPDATE: - –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å: ${enemy.target?.constructor?.name || 'null'}`);
                console.log(`üç© [Sugar] UPDATE: - –¶–µ–ª—å —Å–∞—Ö–∞—Ä: ${enemy._target === sugar}`);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
                if (!enemy._originalTarget) {
                    enemy._originalTarget = enemy.target;
                    console.log(`üç© [Sugar] UPDATE: - –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å: ${enemy._originalTarget?.constructor?.name || 'null'}`);
                }
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–∞—Ö–∞—Ä
                enemy.aiCoordinator.setTarget(sugar);
                enemy._target = sugar;
                
                console.log(`üç© [Sugar] UPDATE: - –ù–æ–≤–∞—è —Ü–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${enemy._target?.constructor?.name || 'null'}`);
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
        this.updateSugarDebugCircle(sugar, radius);
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è —Å–∞—Ö–∞—Ä–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
     */
    getSugarRadiusPx(sugar) {
        if (!sugar || !sugar._defenseData) return 0;
        // –†–∞–¥–∏—É—Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–∞–∫ –ø–∏–∫—Å–µ–ª–∏, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        const r = sugar._defenseData.radius || 0;
        return Math.max(0, r);
    }
    
    /**
     * –†–∞–∑–º–µ—â–∞–µ—Ç –∏–ª–∏ —Ä–∞—Å—à–∏—Ä—è–µ—Ç —è–º—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
     * @param {number} x - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
     * @param {number} y - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    placePit(x, y) {
        if (!this.abilitySystem) {
            return false;
        }
        
        const shovelCount = this.abilitySystem.getShovelCount();
        const pitCount = this.abilitySystem.getPitCount();
        const maxPits = this.abilitySystem.abilities.PIT?.maxValue || 4;
        
        console.log(`ü™ì [DEBUG] placePit –≤—ã–∑–≤–∞–Ω: shovelCount=${shovelCount}, pitCount=${pitCount}, maxPits=${maxPits}`);
        console.log(`ü™ì [DEBUG] abilitySystem.abilities.SHOVEL_COUNT=${this.abilitySystem.abilities.SHOVEL_COUNT}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–ø–∞—Ç—ã
        if (shovelCount <= 0) {
            console.log(`ü™ì [DEBUG] –ù–µ—Ç –ª–æ–ø–∞—Ç –¥–ª—è –∫–æ–ø–∞–Ω–∏—è!`);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —è–º–∞ –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ
        const existingPit = this.findPitAt(x, y);
        
        if (existingPit) {
            // –†–∞—Å—à–∏—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —è–º—É (pitCount –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
            console.log(`ü™ì [DEBUG] –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —è–º–∞, —Ä–∞—Å—à–∏—Ä—è–µ–º...`);
            return this.expandPit(existingPit);
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–∫–æ–ø–∞—Ç—å –Ω–æ–≤—É—é —è–º—É
            if (pitCount >= maxPits) {
                console.log(`ü™ì [DEBUG] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —è–º!`);
                return false;
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —è–º—É (pitCount —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è)
            console.log(`ü™ì [DEBUG] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —è–º—É...`);
            return this.digNewPit(x, y);
        }
    }
    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —è–º—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
     * @param {number} x - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
     * @param {number} y - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
     * @returns {Object|null} –ù–∞–π–¥–µ–Ω–Ω–∞—è —è–º–∞ –∏–ª–∏ null
     */
    findPitAt(x, y) {
        // –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —è–º—É, –≤ —Ä–∞–¥–∏—É—Å –∫–æ—Ç–æ—Ä–æ–π –ø–æ–ø–∞–¥–∞–µ—Ç —Ç–æ—á–∫–∞ (x, y)
        if (!this.defenses || this.defenses.length === 0) {
            return null;
        }

        let closestPit = null;
        let closestDist = Infinity;

        for (const defense of this.defenses) {
            if (!defense || !defense.isAlive || defense.defenseType !== 'pit') {
                continue;
            }

            const radius = Math.max(0, defense._defenseData?.radius || 0);
            if (radius <= 0) {
                continue;
            }

            const dist = GeometryUtils.distance(x, y, defense.x, defense.y);
            if (dist <= radius && dist < closestDist) {
                closestDist = dist;
                closestPit = defense;
            }
        }

        if (closestPit) {
            console.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ —è–º–∞ –≤ —Ä–∞–¥–∏—É—Å–µ ${closestDist.toFixed(1)}px –æ—Ç (${x}, ${y}) (R=${closestPit._defenseData?.radius})`);
        } else {
            console.log(`üîç –Ø–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–æ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è —è–º –¥–ª—è —Ç–æ—á–∫–∏ (${x}, ${y})`);
        }

        return closestPit;
    }
    
    /**
     * –†–∞—Å—à–∏—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —è–º—É
     * @param {Object} pit - –û–±—ä–µ–∫—Ç —è–º—ã
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
     */
    expandPit(pit) {
        try {
            console.log(`ü™ì [DEBUG] expandPit –≤—ã–∑–≤–∞–Ω, –ª–æ–ø–∞—Ç –¥–æ: ${this.abilitySystem.getShovelCount()}`);
            
            const pitHealthIncrease = this.abilitySystem.getPitHealth?.() ?? (pit._defenseData?.increase ?? 50);
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —è–º—ã (Defense –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ health)
            const oldHealth = pit.health;
            const maxHealth = pit.maxHealth ?? (pit._defenseData?.maxHealth ?? 1000);
            const newHealth = Math.min(pit.health + pitHealthIncrease, maxHealth);
            pit.health = newHealth;
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª –∏ —Ä–∞–¥–∏—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–¥–æ—Ä–æ–≤—å—è
            this.updatePitVisual(pit);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –ª–æ–ø–∞—Ç—ã, pitCount –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
            this.abilitySystem.decrementAbility('SHOVEL_COUNT', 1);
            
            console.log(`üï≥Ô∏è –Ø–º–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –≤ (${pit.x}, ${pit.y})`);
            console.log(`üíö –ó–¥–æ—Ä–æ–≤—å–µ: ${oldHealth} ‚Üí ${newHealth} (+${pitHealthIncrease})`);
            console.log(`ü™ì –õ–æ–ø–∞—Ç –æ—Å—Ç–∞–ª–æ—Å—å: ${this.abilitySystem.getShovelCount()}`);
            console.log(`ü™ì [DEBUG] abilitySystem.abilities.SHOVEL_COUNT –ø–æ—Å–ª–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è: ${this.abilitySystem.abilities.SHOVEL_COUNT}`);
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —è–º—ã:', error);
            return false;
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å–∞—Ö–∞—Ä –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
     * @param {number} x - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
     * @param {number} y - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è
     */
    createSugar(x, y) {
        try {
            console.log(`üç© [GestureAction] –°–û–ó–î–ê–ù–ò–ï –°–ê–•–ê–†–ê –≤ (${x}, ${y})`);
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–∞—Ö–∞—Ä–∞ —á–µ—Ä–µ–∑ Defense.createDefense
            const sugar = Defense.createDefense(this.scene, 'sugar', x, y);
            
            console.log(`üç© [GestureAction] - –û–±—ä–µ–∫—Ç —Å–∞—Ö–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω:`, {
                x: sugar.x,
                y: sugar.y,
                defenseType: sugar.defenseType,
                health: sugar.health,
                radius: sugar._defenseData?.radius
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ü–µ–Ω—ã
            this.scene.defenses.push(sugar);
            console.log(`üç© [GestureAction] - –î–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Å—Å–∏–≤ defenses, –≤—Å–µ–≥–æ: ${this.scene.defenses.length}`);
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ü–µ–ª–µ–π –¥–ª—è –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ
            this.activateSugarEffect(sugar);
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞—Ö–∞—Ä–∞:', error);
            return false;
        }
    }
    
    /**
     * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Å–∞—Ö–∞—Ä–∞ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ü–µ–ª–∏ –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ
     * @param {Object} sugar - –û–±—ä–µ–∫—Ç —Å–∞—Ö–∞—Ä–∞
     */
    activateSugarEffect(sugar) {
        const radius = this.getSugarRadiusPx(sugar);
        
        console.log(`üç© [Sugar] –ê–ö–¢–ò–í–ê–¶–ò–Ø –°–ê–•–ê–†–ê:`);
        console.log(`üç© [Sugar] - –ü–æ–∑–∏—Ü–∏—è —Å–∞—Ö–∞—Ä–∞: (${sugar.x}, ${sugar.y})`);
        console.log(`üç© [Sugar] - –†–∞–¥–∏—É—Å: ${radius}px`);
        console.log(`üç© [Sugar] - –í—Å–µ–≥–æ –≤—Ä–∞–≥–æ–≤ –Ω–∞ –ø–æ–ª–µ: ${this.getEnemiesArray().length}`);
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–∞—Ö–∞—Ä–∞
        console.log(`üç© [Sugar] - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞–≥–∞:`);
        this.getEnemiesArray().forEach((enemy, index) => {
            if (enemy) {
                console.log(`üç© [Sugar] - - –í—Ä–∞–≥ ${index}: alive=${enemy.isAlive}, aiCoordinator=${!!enemy.aiCoordinator}, setTarget=${!!(enemy.aiCoordinator && enemy.aiCoordinator.setTarget)}`);
            }
        });
        
        const enemiesInRange = GeometryUtils.findObjectsInRadius(
            this.getEnemiesArray(),
            sugar.x,
            sugar.y,
            radius,
            (enemy) => {
                const passes = enemy && enemy.isAlive && enemy.aiCoordinator;
                console.log(`üç© [Sugar] - –§–∏–ª—å—Ç—Ä –¥–ª—è –≤—Ä–∞–≥–∞ ${enemy?.enemyType || 'null'}: ${passes}`);
                return passes;
            }
        );
        
        console.log(`üç© [Sugar] - –ù–∞–π–¥–µ–Ω–æ –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ: ${enemiesInRange.length}`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        this.getEnemiesArray().forEach((enemy, index) => {
            if (enemy && enemy.isAlive) {
                const distance = GeometryUtils.distance(sugar.x, sugar.y, enemy.x, enemy.y);
                const inRange = distance <= radius;
                console.log(`üç© [Sugar] - –í—Ä–∞–≥ ${index}: ${enemy.enemyType} –≤ (${enemy.x.toFixed(1)}, ${enemy.y.toFixed(1)}) - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance.toFixed(1)}px - –≤ —Ä–∞–¥–∏—É—Å–µ: ${inRange}`);
            }
        });
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ü–µ–ª–∏ –≤—Ä–∞–≥–æ–≤ –Ω–∞ —Å–∞—Ö–∞—Ä
        enemiesInRange.forEach((enemy, index) => {
            console.log(`üç© [Sugar] - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–∞–≥–∞ ${index}: ${enemy.enemyType}`);
            console.log(`üç© [Sugar] - - aiCoordinator —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${!!enemy.aiCoordinator}`);
            console.log(`üç© [Sugar] - - setTarget —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${!!(enemy.aiCoordinator && enemy.aiCoordinator.setTarget)}`);
            console.log(`üç© [Sugar] - - –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å: ${enemy.target?.constructor?.name || 'null'}`);
            
            if (enemy.aiCoordinator && enemy.aiCoordinator.setTarget) {
                console.log(`üç© [Sugar] - - –í–´–ü–û–õ–ù–Ø–ï–ú –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –¶–ï–õ–ò –Ω–∞ —Å–∞—Ö–∞—Ä`);
                enemy.aiCoordinator.setTarget(sugar);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å (—è–π—Ü–æ) –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                if (!enemy._originalTarget) {
                    enemy._originalTarget = enemy.target;
                    console.log(`üç© [Sugar] - - –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å: ${enemy._originalTarget?.constructor?.name || 'null'}`);
                }
                enemy._target = sugar;
                
                console.log(`üç© [Sugar] - - –ù–æ–≤–∞—è —Ü–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${enemy._target?.constructor?.name || 'null'}`);
            } else {
                console.log(`üç© [Sugar] - - –û–®–ò–ë–ö–ê: –Ω–µ –º–æ–∂–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ü–µ–ª—å (–Ω–µ—Ç aiCoordinator –∏–ª–∏ setTarget)`);
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
        this.updateSugarDebugCircle(sugar, radius);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è —Å–∞—Ö–∞—Ä–∞
        sugar.on('destroy', () => {
            this.onSugarDestroyed(sugar);
            // –£–¥–∞–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å
            if (sugar._debugCircle) {
                sugar._debugCircle.destroy();
                sugar._debugCircle = null;
            }
        });
    }

    /**
     * –†–∏—Å—É–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Ä–∞–¥–∏—É—Å–∞ —Å–∞—Ö–∞—Ä–∞
     */
    updateSugarDebugCircle(sugar, radiusPx) {
        if (!this.scene || !this.scene.add) return;
        if (!sugar._debugCircle) {
            sugar._debugCircle = this.scene.add.graphics();
            sugar._debugCircle.setDepth(5);
            sugar._debugCircle.setAlpha(0.25);
        }
        const g = sugar._debugCircle;
        g.clear();
        g.lineStyle(2, 0x00aaff, 0.8);
        g.strokeCircle(sugar.x, sugar.y, radiusPx);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–∞–≥–æ–≤ –∫ —è–π—Ü—É
     * @param {Object} destroyedSugar - –£–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã–π —Å–∞—Ö–∞—Ä
     */
    onSugarDestroyed(destroyedSugar) {
        console.log(`üç© [Sugar] –°–∞—Ö–∞—Ä —É–Ω–∏—á—Ç–æ–∂–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–∞–≥–æ–≤ –∫ —è–π—Ü—É`);
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∞—Ç–∞–∫–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —Å–∞—Ö–∞—Ä
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤—Ä–∞–≥–æ–≤
        const allEnemies = this.getEnemiesArray();
        const affectedEnemies = allEnemies.filter(enemy => 
            enemy && enemy.isAlive && (
                enemy._target === destroyedSugar || 
                (enemy.aiCoordinator && enemy.aiCoordinator.target === destroyedSugar)
            )
        );
        
        console.log(`üç© [Sugar] –ù–∞–π–¥–µ–Ω–æ ${affectedEnemies.length} –≤—Ä–∞–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∞—Ç–∞–∫–æ–≤–∞–ª–∏ —Å–∞—Ö–∞—Ä`);
        console.log(`üç© [Sugar] –í—Å–µ–≥–æ –≤—Ä–∞–≥–æ–≤ –Ω–∞ –ø–æ–ª–µ: ${allEnemies.length}`);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–∞–≥–æ–≤ –∫ –∏—Ö –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ü–µ–ª–∏ (—è–π—Ü—É)
        affectedEnemies.forEach((enemy, index) => {
            if (enemy.aiCoordinator && enemy.aiCoordinator.setTarget) {
                const originalTarget = enemy._originalTarget || this.egg;
                console.log(`üç© [Sugar] ${index+1}. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–∞–≥–∞ ${enemy.enemyType} –∫ —Ü–µ–ª–∏:`, originalTarget?.constructor?.name || 'unknown');
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ü–µ–ª—å –æ–±—Ä–∞—Ç–Ω–æ
                enemy.aiCoordinator.setTarget(originalTarget);
                enemy._target = originalTarget;
                enemy._originalTarget = null; // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ü–µ–ª—å
                
                console.log(`üç© [Sugar] ${index+1}. –¶–µ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${enemy._target?.constructor?.name || 'null'}`);
            } else {
                console.log(`üç© [Sugar] ${index+1}. –û–®–ò–ë–ö–ê: –Ω–µ –º–æ–∂–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –¥–ª—è –≤—Ä–∞–≥–∞ ${enemy.enemyType} (–Ω–µ—Ç aiCoordinator –∏–ª–∏ setTarget)`);
            }
        });
    }

    /**
     * –í—ã–∫–∞–ø—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —è–º—É
     * @param {number} x - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
     * @param {number} y - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è
     */
    digNewPit(x, y) {
        try {
            console.log(`ü™ì [DEBUG] digNewPit –≤—ã–∑–≤–∞–Ω, –ª–æ–ø–∞—Ç –¥–æ: ${this.abilitySystem.getShovelCount()}`);
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —è–º—ã —á–µ—Ä–µ–∑ Defense.createDefense
            const pit = Defense.createDefense(this.scene, 'pit', x, y);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ü–µ–Ω—ã
            this.scene.defenses.push(pit);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            this.abilitySystem.abilities.PIT += 1;
            this.abilitySystem.decrementAbility('SHOVEL_COUNT', 1);
            
            console.log(`üï≥Ô∏è –Ø–º–∞ –≤—ã–∫–æ–ø–∞–Ω–∞ –≤ (${x}, ${y}), –∑–¥–æ—Ä–æ–≤—å–µ: ${pit.health}`);
            console.log(`üï≥Ô∏è –Ø–º –Ω–∞ –ø–æ–ª–µ: ${this.abilitySystem.getPitCount()}`);
            console.log(`ü™ì –õ–æ–ø–∞—Ç –æ—Å—Ç–∞–ª–æ—Å—å: ${this.abilitySystem.getShovelCount()}`);
            console.log(`ü™ì [DEBUG] abilitySystem.abilities.SHOVEL_COUNT –ø–æ—Å–ª–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è: ${this.abilitySystem.abilities.SHOVEL_COUNT}`);
            
            // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤—Ä–∞–≥–æ–º - –∑–∞–≥–ª—É—à–∫–∞
            console.log(`‚öîÔ∏è –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤—Ä–∞–≥–∞–º–∏ (–∑–∞–≥–ª—É—à–∫–∞)`);
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è–º—ã:', error);
            return false;
        }
    }
    
}
