/**
 * –†–µ–Ω–¥–µ—Ä–µ—Ä –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –º–∏—Ä–∞ –¥–ª—è Pet Thief
 * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –º–∏—Ä, —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–º–µ—Ä–æ–π
 */

import { BIOME_VISUALS, WORLD_CONSTANTS, OBSTACLE_TYPES } from '../../types/worldTypes.js';
import { BACKGROUND_SETTINGS } from '../../settings/GameSettings.js';

export class WorldRenderer {
    constructor(scene, world) {
        this.scene = scene;
        this.world = world;
        
        // –ì—Ä—É–ø–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.backgroundGroup = null;
        this.obstacleGroup = null;
        this.houseGroup = null;
        this.coinGroup = null;
        
        console.log('üé® [WorldRenderer] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –º–∏—Ä
     */
    render() {
        console.log('üé® [WorldRenderer] –ù–∞—á–∞–ª–æ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –º–∏—Ä–∞...');
        
        // 1. –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω
        this.renderBackground();
        
        // 2. –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        this.renderObstacles();
        
        // 3. –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
        this.renderCoins();
        
        // 4. –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –æ—Ç–º—ã—á–∫–∏
        this.renderLockpicks();
        
        // 5. –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∂–∏–ª–∏—â–∞
        this.renderHouses();
        
        // 5. –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–æ–º –∏–≥—Ä–æ–∫–∞
        this.renderPlayerHouse();
        
        console.log('üé® [WorldRenderer] –ú–∏—Ä –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω');
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ñ–æ–Ω –º–∏—Ä–∞
     */
    renderBackground() {
        const biomeVisuals = BIOME_VISUALS[this.world.biome];
        
        console.log(`üé® [WorldRenderer] –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–∞ –±–∏–æ–º–∞: ${biomeVisuals.name}`);
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è —Ñ–æ–Ω–∞
        this.backgroundGroup = this.scene.add.group();
        
        let background;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã
        if (this.scene.textures.exists('grass_texture')) {
            // –°–æ–∑–¥–∞–µ–º TileSprite –¥–ª—è —Ç—Ä–∞–≤—è–Ω–æ–≥–æ —Ñ–æ–Ω–∞ –Ω–∞ –≤–µ—Å—å –º–∏—Ä
            background = this.scene.add.tileSprite(
                this.world.size.width / 2,
                this.world.size.height / 2,
                this.world.size.width,
                this.world.size.height,
                'grass_texture'
            );
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–Ω–∏—Ä–æ–≤–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏–æ–º–∞
            if (biomeVisuals.tintColor !== 0xffffff && biomeVisuals.tintColor !== 0x4a7c2e) {
                background.setTint(biomeVisuals.tintColor);
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
            background.setDepth(WORLD_CONSTANTS.DEPTH.BACKGROUND);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫—É—é –∞–Ω–∏–º–∞—Ü–∏—é —Ç—Ä–∞–≤—ã
            if (BACKGROUND_SETTINGS.animate) {
                this.scene.tweens.add({
                    targets: background,
                    tilePositionX: { from: 0, to: BACKGROUND_SETTINGS.animation.speedX },
                    tilePositionY: { from: 0, to: BACKGROUND_SETTINGS.animation.speedY },
                    duration: BACKGROUND_SETTINGS.animation.duration,
                    repeat: -1,
                    ease: 'Linear'
                });
            }
        } else {
            // Fallback: —Å–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            console.warn(`üé® [WorldRenderer] –¢–µ–∫—Å—Ç—É—Ä–∞ —Ç—Ä–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ü–≤–µ—Ç`);
            background = this.scene.add.rectangle(
                this.world.size.width / 2,
                this.world.size.height / 2,
                this.world.size.width,
                this.world.size.height,
                biomeVisuals.backgroundColor
            );
            background.setDepth(WORLD_CONSTANTS.DEPTH.BACKGROUND);
        }
        
        this.backgroundGroup.add(background);
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
     */
    renderObstacles() {
        console.log(`üé® [WorldRenderer] –û—Ç—Ä–∏—Å–æ–≤–∫–∞ ${this.world.obstacles.length} –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π...`);
        
        this.obstacleGroup = this.scene.add.group();
        
        this.world.obstacles.forEach(obstacleData => {
            const obstacle = this.createObstacle(obstacleData);
            if (obstacle) {
                this.obstacleGroup.add(obstacle);
            }
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
     * @param {Object} data 
     * @returns {Phaser.GameObjects.Text|null}
     */
    createObstacle(data) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        const obstacleConfig = OBSTACLE_TYPES[data.type.toUpperCase()];
        
        if (!obstacleConfig) {
            console.warn(`üé® [WorldRenderer] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è: ${data.type}`);
            return null;
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å —ç–º–æ–¥–∑–∏
        const obstacle = this.scene.add.text(
            data.position.x,
            data.position.y,
            obstacleConfig.texture,
            {
                fontSize: `${32 * obstacleConfig.size}px`,
                fontFamily: 'Arial'
            }
        ).setOrigin(0.5);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
        obstacle.setDepth(WORLD_CONSTANTS.DEPTH.OBSTACLES);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∑–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–ª–ª–∏–∑–∏—è
        if (obstacleConfig.collision) {
            this.scene.physics.add.existing(obstacle, true); // true = immovable
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π
            if (obstacle.body) {
                const bodySize = 32 * obstacleConfig.size * 0.8;
                obstacle.body.setSize(bodySize, bodySize);
                obstacle.body.setOffset(
                    (obstacle.width - bodySize) / 2,
                    (obstacle.height - bodySize) / 2
                );
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        obstacle.setData('obstacleData', data);
        obstacle.setData('isObstacle', true);
        
        return obstacle;
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –º–æ–Ω–µ—Ç—ã
     */
    renderCoins() {
        console.log(`üé® [WorldRenderer] –û—Ç—Ä–∏—Å–æ–≤–∫–∞ ${this.world.coins.length} –º–æ–Ω–µ—Ç...`);
        
        this.coinGroup = this.scene.add.group();
        
        this.world.coins.forEach(coinData => {
            const coin = this.createCoin(coinData);
            if (coin) {
                this.coinGroup.add(coin);
            }
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –º–æ–Ω–µ—Ç—ã
     * @param {Object} data 
     * @returns {Phaser.GameObjects.Text}
     */
    createCoin(data) {
        const coin = this.scene.add.text(
            data.position.x,
            data.position.y,
            'üí∞',
            {
                fontSize: '24px',
                fontFamily: 'Arial'
            }
        ).setOrigin(0.5);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
        coin.setDepth(WORLD_CONSTANTS.DEPTH.ITEMS);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∑–∏–∫—É
        this.scene.physics.add.existing(coin);
        
        if (coin.body) {
            coin.body.setSize(24, 24);
            coin.body.setImmovable(true);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        coin.setData('coinData', data);
        coin.setData('isCoin', true);
        coin.setData('collected', false);
        
        // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è (–ø—É–ª—å—Å–∞—Ü–∏—è)
        this.scene.tweens.add({
            targets: coin,
            scaleX: 1.2,
            scaleY: 1.2,
            duration: 500,
            yoyo: true,
            repeat: -1,
            ease: 'Sine.easeInOut'
        });
        
        return coin;
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –æ—Ç–º—ã—á–∫–∏
     */
    renderLockpicks() {
        if (!this.world.lockpicks || this.world.lockpicks.length === 0) {
            console.log('üé® [WorldRenderer] –ù–µ—Ç –æ—Ç–º—ã—á–µ–∫ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏');
            return;
        }
        
        console.log(`üé® [WorldRenderer] –û—Ç—Ä–∏—Å–æ–≤–∫–∞ ${this.world.lockpicks.length} –æ—Ç–º—ã—á–µ–∫...`);
        
        this.lockpickGroup = this.scene.add.group();
        
        this.world.lockpicks.forEach(lockpickData => {
            if (!lockpickData.collected) {
                const lockpick = this.createLockpick(lockpickData);
                if (lockpick) {
                    this.lockpickGroup.add(lockpick);
                }
            }
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –æ—Ç–º—ã—á–∫–∏
     * @param {Object} data 
     * @returns {Phaser.GameObjects.Text}
     */
    createLockpick(data) {
        const lockpick = this.scene.add.text(
            data.position.x,
            data.position.y,
            'üîß',
            {
                fontSize: '28px',
                fontFamily: 'Arial'
            }
        ).setOrigin(0.5);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
        lockpick.setDepth(WORLD_CONSTANTS.DEPTH.ITEMS);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∑–∏–∫—É
        this.scene.physics.add.existing(lockpick);
        
        if (lockpick.body) {
            lockpick.body.setSize(28, 28);
            lockpick.body.setImmovable(true);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        lockpick.setData('lockpickData', data);
        lockpick.setData('isLockpick', true);
        lockpick.setData('collected', false);
        
        // –í—Ä–∞—â–µ–Ω–∏–µ
        this.scene.tweens.add({
            targets: lockpick,
            angle: 360,
            duration: 3000,
            repeat: -1,
            ease: 'Linear'
        });
        
        // –ü—É–ª—å—Å–∞—Ü–∏—è (–Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ —á–µ–º —É –º–æ–Ω–µ—Ç)
        this.scene.tweens.add({
            targets: lockpick,
            scaleX: 1.05,
            scaleY: 1.05,
            duration: 1200,
            yoyo: true,
            repeat: -1,
            ease: 'Sine.easeInOut'
        });
        
        return lockpick;
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∂–∏–ª–∏—â–∞ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
     */
    renderHouses() {
        console.log(`üé® [WorldRenderer] –û—Ç—Ä–∏—Å–æ–≤–∫–∞ ${this.world.houses.length} –∂–∏–ª–∏—â...`);
        
        this.houseGroup = this.scene.add.group();
        
        this.world.houses.forEach(houseData => {
            const house = this.createHouse(houseData);
            if (house) {
                this.houseGroup.add(house);
            }
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∂–∏–ª–∏—â–∞
     * @param {Object} data 
     * @returns {Phaser.GameObjects.Container}
     */
    createHouse(data) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–æ–º–∞
        const container = this.scene.add.container(data.position.x, data.position.y);
        
        // –ò–∫–æ–Ω–∫–∞ –¥–æ–º–∞
        const houseIcon = this.scene.add.text(0, 0, data.texture, {
            fontSize: '48px',
            fontFamily: 'Arial'
        }).setOrigin(0.5);
        
        // –ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        const ownerName = this.scene.add.text(0, 35, data.ownerName, {
            fontSize: '12px',
            fontFamily: 'Arial',
            color: '#ffffff',
            backgroundColor: '#000000',
            padding: { x: 4, y: 2 }
        }).setOrigin(0.5);
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞ –∑–∞–º–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        let lockIndicator = null;
        if (data.security && data.security.lockType) {
            const lockEmojis = {
                'simple': 'üîì',
                'maze': 'üß©', 
                'pattern': 'üéØ'
            };
            const lockEmoji = lockEmojis[data.security.lockType] || 'üîí';
            const lockLevel = data.security.level || 1;
            
            lockIndicator = this.scene.add.text(0, 50, `${lockEmoji}${lockLevel}`, {
                fontSize: '14px',
                fontFamily: 'Arial',
                color: '#ffff00',
                backgroundColor: '#000000',
                padding: { x: 4, y: 2 }
            }).setOrigin(0.5);
        }
        
        const elements = [houseIcon, ownerName];
        if (lockIndicator) {
            elements.push(lockIndicator);
        }
        container.add(elements);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
        container.setDepth(WORLD_CONSTANTS.DEPTH.HOUSES);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∑–∏–∫—É –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
        this.scene.physics.add.existing(container);
        
        if (container.body) {
            container.body.setSize(48, 48);
            container.body.setImmovable(true);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        container.setData('houseData', data);
        container.setData('isHouse', true);
        
        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è)
        container.setSize(48, 48);
        container.setInteractive();
        
        return container;
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –¥–æ–º –∏–≥—Ä–æ–∫–∞
     */
    renderPlayerHouse() {
        console.log('üé® [WorldRenderer] –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–æ–º–∞ –∏–≥—Ä–æ–∫–∞...');
        
        const data = this.world.playerHouse;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–æ–º–∞ –∏–≥—Ä–æ–∫–∞
        const container = this.scene.add.container(data.position.x, data.position.y);
        
        // –ò–∫–æ–Ω–∫–∞ –¥–æ–º–∞
        const houseIcon = this.scene.add.text(0, 0, data.texture, {
            fontSize: '56px',
            fontFamily: 'Arial'
        }).setOrigin(0.5);
        
        // –ù–∞–¥–ø–∏—Å—å "–ú–æ–π –¥–æ–º"
        const label = this.scene.add.text(0, 40, '–ú–æ–π –¥–æ–º', {
            fontSize: '14px',
            fontFamily: 'Arial',
            fontStyle: 'bold',
            color: '#ffffff',
            backgroundColor: '#00aa00',
            padding: { x: 6, y: 3 }
        }).setOrigin(0.5);
        
        container.add([houseIcon, label]);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
        container.setDepth(WORLD_CONSTANTS.DEPTH.HOUSES);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∑–∏–∫—É
        this.scene.physics.add.existing(container);
        
        if (container.body) {
            container.body.setSize(56, 56);
            container.body.setImmovable(true);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        container.setData('houseData', data);
        container.setData('isPlayerHouse', true);
        
        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        container.setSize(56, 56);
        container.setInteractive();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        this.playerHouse = container;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä)
     */
    update(time, delta) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –º–æ–Ω–µ—Ç
     */
    getCoins() {
        return this.coinGroup ? this.coinGroup.getChildren() : [];
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
     */
    getObstacles() {
        return this.obstacleGroup ? this.obstacleGroup.getChildren() : [];
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –∂–∏–ª–∏—â
     */
    getHouses() {
        return this.houseGroup ? this.houseGroup.getChildren() : [];
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        if (this.backgroundGroup) {
            this.backgroundGroup.destroy(true);
        }
        if (this.obstacleGroup) {
            this.obstacleGroup.destroy(true);
        }
        if (this.houseGroup) {
            this.houseGroup.destroy(true);
        }
        if (this.coinGroup) {
            this.coinGroup.destroy(true);
        }
        
        console.log('üé® [WorldRenderer] –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

