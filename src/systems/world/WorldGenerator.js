/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –º–∏—Ä–∞ –¥–ª—è Pet Thief
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π –º–∏—Ä —Å –±–∏–æ–º–∞–º–∏, –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏ –∏ –∂–∏–ª–∏—â–∞–º–∏
 */

import { 
    BIOME_TYPES, 
    WORLD_SIZE, 
    WORLD_GENERATION,
    generateValidPosition,
    generateRandomPosition
} from '../../types/worldTypes.js';

export class WorldGenerator {
    constructor(seed = null) {
        // Seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –¥–ª—è 24-—á–∞—Å–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞)
        this.seed = seed || WORLD_GENERATION.getSeed();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª —Å seed
        this.rng = this.seedRandom(this.seed);
        
        console.log(`üó∫Ô∏è [WorldGenerator] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏—Ä–∞ —Å seed: ${this.seed}`);
    }
    
    /**
     * –ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª —Å seed (–¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏)
     * @param {string} seed 
     * @returns {Function}
     */
    seedRandom(seed) {
        // –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à seed –≤ —á–∏—Å–ª–æ
        let hash = 0;
        for (let i = 0; i < seed.length; i++) {
            hash = ((hash << 5) - hash) + seed.charCodeAt(i);
            hash = hash & hash; // Convert to 32bit integer
        }
        
        // Linear Congruential Generator
        let current = Math.abs(hash);
        return () => {
            current = (current * 1664525 + 1013904223) % 4294967296;
            return current / 4294967296;
        };
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∏—Ä
     * @returns {Object} –î–∞–Ω–Ω—ã–µ –º–∏—Ä–∞
     */
    generate() {
        console.log('üó∫Ô∏è [WorldGenerator] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏—Ä–∞...');
        
        const world = {
            seed: this.seed,
            size: { ...WORLD_SIZE },
            biome: BIOME_TYPES.FOREST, // –ü–æ–∫–∞ –æ–¥–∏–Ω –±–∏–æ–º - –ª–µ—Å
            playerHouse: this.generatePlayerHouse(),
            houses: [],
            obstacles: [],
            coins: []
        };
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∂–∏–ª–∏—â–∞ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        world.houses = this.generateHouses(world.playerHouse.position);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        world.obstacles = this.generateObstacles([world.playerHouse.position, ...world.houses.map(h => h.position)]);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã
        world.coins = this.generateCoins([world.playerHouse.position, ...world.houses.map(h => h.position)]);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–º—ã—á–∫–∏
        world.lockpicks = this.generateLockpicks([world.playerHouse.position, ...world.houses.map(h => h.position)]);
        
        console.log(`üó∫Ô∏è [WorldGenerator] –ú–∏—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:`);
        console.log(`   - –ñ–∏–ª–∏—â –∏–≥—Ä–æ–∫–æ–≤: ${world.houses.length}`);
        console.log(`   - –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π: ${world.obstacles.length}`);
        console.log(`   - –ú–æ–Ω–µ—Ç: ${world.coins.length}`);
        console.log(`   - –û—Ç–º—ã—á–µ–∫: ${world.lockpicks.length}`);
        
        return world;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∂–∏–ª–∏—â–µ –∏–≥—Ä–æ–∫–∞ (–≤ —Ü–µ–Ω—Ç—Ä–µ –º–∏—Ä–∞)
     * @returns {Object}
     */
    generatePlayerHouse() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 1 —Å—É–Ω–¥—É–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∫—Ä–∞–¥–µ–Ω–Ω–æ–≥–æ
        const playerChest = [{
            id: 'player_chest_0',
            coins: 0,
            jewels: 0,
            keys: 0,
            isLocked: false,
            lockLevel: 0,
            isOpened: false,
            isEmpty: false
        }];
        
        return {
            id: 'player_house',
            ownerId: 'player',
            ownerName: '–ú–æ–π –¥–æ–º',
            isPlayerHouse: true,
            position: {
                x: WORLD_SIZE.width / 2,
                y: WORLD_SIZE.height / 2
            },
            type: 'home',
            texture: 'üè°',
            chests: playerChest
        };
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∂–∏–ª–∏—â–∞ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
     * @param {{x: number, y: number}} playerPosition - –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞
     * @returns {Array}
     */
    generateHouses(playerPosition) {
        const houses = [];
        const houseCount = Math.floor(
            WORLD_GENERATION.HOUSES.MIN + 
            this.rng() * (WORLD_GENERATION.HOUSES.MAX - WORLD_GENERATION.HOUSES.MIN)
        );
        
        console.log(`üè† [WorldGenerator] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${houseCount} –∂–∏–ª–∏—â...`);
        
        const occupiedPositions = [playerPosition];
        
        for (let i = 0; i < houseCount; i++) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            const position = this.generateValidPositionWithRng(
                occupiedPositions,
                WORLD_GENERATION.MIN_DISTANCE_BETWEEN_HOUSES
            );
            
            if (!position) {
                console.warn(`üè† [WorldGenerator] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∂–∏–ª–∏—â–∞ ${i + 1}`);
                continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞
            const dx = position.x - playerPosition.x;
            const dy = position.y - playerPosition.y;
            const distanceFromPlayer = Math.sqrt(dx * dx + dy * dy);
            
            if (distanceFromPlayer < WORLD_GENERATION.MIN_DISTANCE_FROM_PLAYER) {
                i--; // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                continue;
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–Ω–¥—É–∫–∏ –¥–ª—è –¥–æ–º–∞
            const chestsCount = 2 + Math.floor(this.rng() * 2); // 2-3 —Å—É–Ω–¥—É–∫–∞
            const chests = this.generateChestsForHouse(chestsCount);
            
            // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞—â–∏—Ç–∞: 70% —à–∞–Ω—Å —á—Ç–æ –¥–æ–º –∑–∞—â–∏—â–µ–Ω
            const hasSecurity = this.rng() > 0.3; // 70% —à–∞–Ω—Å –∑–∞—â–∏—Ç—ã
            const securityLevel = hasSecurity ? Math.floor(this.rng() * 3) + 1 : 0; // 1-3 —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ 0
            
            console.log(`üè† [WorldGenerator] –î–æ–º ${i + 1}: ${hasSecurity ? `–∑–∞—â–∏—â–µ–Ω (—É—Ä–æ–≤–µ–Ω—å ${securityLevel})` : '–Ω–µ –∑–∞—â–∏—â–µ–Ω'}`);
            
            houses.push({
                id: `house_${i}`,
                ownerId: `player_${i}`,
                ownerName: `–ò–≥—Ä–æ–∫ ${i + 1}`,
                ownerOnline: false,
                position: position,
                type: 'house',
                texture: 'üè†',
                security: {
                    lockType: hasSecurity ? 'simple' : null,
                    level: securityLevel,
                    traps: []
                },
                chests: chests, // –ú–∞—Å—Å–∏–≤ —Å—É–Ω–¥—É–∫–æ–≤ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                isPlayerHouse: false
            });
            
            occupiedPositions.push(position);
        }
        
        return houses;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—É–Ω–¥—É–∫–∏ –¥–ª—è –¥–æ–º–∞
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É–Ω–¥—É–∫–æ–≤
     * @returns {Array}
     */
    generateChestsForHouse(count) {
        const chests = [];
        
        for (let i = 0; i < count; i++) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–Ω–¥—É–∫–∞
            const coins = 10 + Math.floor(this.rng() * 40); // 10-50 –º–æ–Ω–µ—Ç
            const jewels = Math.floor(this.rng() * 5); // 0-4 –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏
            const keys = this.rng() > 0.7 ? 1 : 0; // 30% —à–∞–Ω—Å –∫–ª—é—á–∞
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–º–æ–∫
            const isLocked = this.rng() > 0.5; // 50% —à–∞–Ω—Å –∑–∞–º–∫–∞
            const lockLevel = isLocked ? Math.floor(this.rng() * 3) + 1 : 0; // –£—Ä–æ–≤–µ–Ω—å 1-3
            
            chests.push({
                id: `chest_${i}`,
                coins: coins,
                jewels: jewels,
                keys: keys,
                isLocked: isLocked,
                lockLevel: lockLevel,
                isOpened: false, // –§–ª–∞–≥ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É–Ω–¥—É–∫–∞
                isEmpty: false // –§–ª–∞–≥ –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏—è
            });
        }
        
        return chests;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
     * @param {Array<{x: number, y: number}>} occupiedPositions - –ó–∞–Ω—è—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
     * @returns {Array}
     */
    generateObstacles(occupiedPositions) {
        const obstacles = [];
        const obstacleCount = Math.floor(
            WORLD_GENERATION.OBSTACLES.MIN +
            this.rng() * (WORLD_GENERATION.OBSTACLES.MAX - WORLD_GENERATION.OBSTACLES.MIN)
        );
        
        console.log(`ü™® [WorldGenerator] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${obstacleCount} –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π...`);
        
        // –¢–∏–ø—ã –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –¥–ª—è –ª–µ—Å–∞
        const forestObstacles = ['tree', 'bush', 'stone'];
        
        for (let i = 0; i < obstacleCount; i++) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –æ—Ç –≤–∞–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            const position = this.generateValidPositionWithRng(
                occupiedPositions,
                100 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¥–æ–º–æ–≤
            );
            
            if (!position) {
                continue;
            }
            
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
            const obstacleType = forestObstacles[Math.floor(this.rng() * forestObstacles.length)];
            
            obstacles.push({
                id: `obstacle_${i}`,
                type: obstacleType,
                position: position,
                collision: true
            });
        }
        
        return obstacles;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–Ω–µ—Ç—ã
     * @param {Array<{x: number, y: number}>} occupiedPositions - –ó–∞–Ω—è—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
     * @returns {Array}
     */
    generateCoins(occupiedPositions) {
        const coins = [];
        const coinCount = Math.floor(
            WORLD_GENERATION.COINS.MIN +
            this.rng() * (WORLD_GENERATION.COINS.MAX - WORLD_GENERATION.COINS.MIN)
        );
        
        console.log(`üí∞ [WorldGenerator] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${coinCount} –º–æ–Ω–µ—Ç...`);
        
        for (let i = 0; i < coinCount; i++) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –æ—Ç –≤–∞–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            const position = this.generateValidPositionWithRng(
                occupiedPositions,
                50 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¥–æ–º–æ–≤
            );
            
            if (!position) {
                continue;
            }
            
            coins.push({
                id: `coin_${i}`,
                type: 'coin',
                position: position,
                value: 1
            });
        }
        
        return coins;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–º—ã—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
     * @param {Array<{x: number, y: number}>} occupiedPositions - –ó–∞–Ω—è—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
     * @returns {Array}
     */
    generateLockpicks(occupiedPositions) {
        const lockpicks = [];
        const lockpickCount = 3 + Math.floor(this.rng() * 4); // 3-6 –æ—Ç–º—ã—á–µ–∫
        
        console.log(`üîß [WorldGenerator] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${lockpickCount} –æ—Ç–º—ã—á–µ–∫...`);
        
        for (let i = 0; i < lockpickCount; i++) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –æ—Ç –≤–∞–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            const position = this.generateValidPositionWithRng(
                occupiedPositions,
                50 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¥–æ–º–æ–≤
            );
            
            if (!position) {
                continue;
            }
            
            lockpicks.push({
                id: `lockpick_${i}`,
                type: 'lockpick',
                position: position,
                collected: false
            });
        }
        
        return lockpicks;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º rng
     * @param {Array<{x: number, y: number}>} existingPositions 
     * @param {number} minDistance 
     * @param {number} maxAttempts 
     * @returns {{x: number, y: number}|null}
     */
    generateValidPositionWithRng(existingPositions, minDistance, maxAttempts = 100) {
        const margin = 100;
        
        for (let i = 0; i < maxAttempts; i++) {
            const pos = {
                x: margin + this.rng() * (WORLD_SIZE.width - margin * 2),
                y: margin + this.rng() * (WORLD_SIZE.height - margin * 2)
            };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
            let valid = true;
            for (const existingPos of existingPositions) {
                const dx = pos.x - existingPos.x;
                const dy = pos.y - existingPos.y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                if (distance < minDistance) {
                    valid = false;
                    break;
                }
            }
            
            if (valid) {
                return pos;
            }
        }
        
        return null;
    }
}

