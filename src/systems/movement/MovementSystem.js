import { InsectMovementPatterns } from './InsectMovementPatterns.js';

/**
 * –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–µ–º –≤—Ä–∞–≥–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤—Ä–∞–≥–æ–≤
 */
export class MovementSystem {
    constructor(scene) {
        this.scene = scene;
        this.patterns = new Map(); // –ö—ç—à –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞–≥–∞
        this.context = {
            otherEnemies: [],
            pheromones: [],
            obstacles: []
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –≤—Ä–∞–≥–∞
     * @param {string} enemyType - –¢–∏–ø –≤—Ä–∞–≥–∞
     * @param {string} enemyId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤—Ä–∞–≥–∞
     * @returns {InsectMovementPatterns} –ü–∞—Ç—Ç–µ—Ä–Ω –¥–≤–∏–∂–µ–Ω–∏—è
     */
    getPattern(enemyType, enemyId) {
        if (!this.patterns.has(enemyId)) {
            const pattern = new InsectMovementPatterns(enemyType);
            this.patterns.set(enemyId, pattern);
            console.log(`üîÑ Created movement pattern for ${enemyType} (ID: ${enemyId})`);
        }
        return this.patterns.get(enemyId);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –≤—Ä–∞–≥–∞
     * @param {Enemy} enemy - –û–±—ä–µ–∫—Ç –≤—Ä–∞–≥–∞
     * @param {GameObject} target - –¶–µ–ª—å (—è–π—Ü–æ)
     * @param {number} deltaTime - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    updateEnemyMovement(enemy, target, deltaTime) {
        const pattern = this.getPattern(enemy.enemyType, enemy.id);
        
        // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if (enemy.enemyType === 'ant' && Math.random() < 0.05) {
            console.log(`üêú MovementSystem Pattern Debug:`, {
                enemyType: enemy.enemyType,
                patternType: pattern.type,
                patternParams: pattern.params,
                hasPattern: !!pattern
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        this.updateContext(enemy, target);
        
        // –î–æ–±–∞–≤–ª—è–µ–º enemyData –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–æ–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        this.context.enemyData = enemy.enemyData;
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        const newPosition = pattern.update(
            enemy.x,
            enemy.y,
            target.x,
            target.y,
            deltaTime,
            this.context
        );
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Phaser Physics
        const direction = this.normalizeDirection(newPosition.x - enemy.x, newPosition.y - enemy.y);
        const baseSpeed = 10; // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        const actualSpeed = baseSpeed * enemy.speed;
        
        // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –º—É—Ä–∞–≤—å—è
        if (enemy.enemyType === 'ant' && Math.random() < 0.1) {
            console.log(`üêú MovementSystem Debug:`, {
                enemyType: enemy.enemyType,
                position: `(${enemy.x.toFixed(1)}, ${enemy.y.toFixed(1)})`,
                target: `(${target.x.toFixed(1)}, ${target.y.toFixed(1)})`,
                newPosition: `(${newPosition.x.toFixed(1)}, ${newPosition.y.toFixed(1)})`,
                direction: `(${direction.x.toFixed(3)}, ${direction.y.toFixed(3)})`,
                speed: {
                    base: baseSpeed,
                    enemy: enemy.speed,
                    actual: actualSpeed.toFixed(1)
                },
                velocity: `(${(direction.x * actualSpeed).toFixed(1)}, ${(direction.y * actualSpeed).toFixed(1)})`,
                deltaTime: deltaTime
            });
        }
        
        enemy.physicsBody.setVelocity(
            direction.x * actualSpeed,
            direction.y * actualSpeed
        );
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è
     * @param {Enemy} currentEnemy - –¢–µ–∫—É—â–∏–π –≤—Ä–∞–≥
     * @param {GameObject} target - –¶–µ–ª—å
     */
    updateContext(currentEnemy, target) {
        // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö –≤—Ä–∞–≥–∞—Ö
        this.context.otherEnemies = this.scene.enemies?.getChildren() || [];
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–∞–≥–∞
        this.context.otherEnemies = this.context.otherEnemies.filter(
            enemy => enemy.id !== currentEnemy.id
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è—Ö (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
        this.context.obstacles = [];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–µ—Ä–æ–º–æ–Ω—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
        this.context.pheromones = [];
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω –¥–≤–∏–∂–µ–Ω–∏—è –≤—Ä–∞–≥–∞
     * @param {string} enemyId - ID –≤—Ä–∞–≥–∞
     */
    removePattern(enemyId) {
        this.patterns.delete(enemyId);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
     */
    clearAllPatterns() {
        this.patterns.clear();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –¥–≤–∏–∂–µ–Ω–∏—è
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getStats() {
        return {
            activePatterns: this.patterns.size,
            patternTypes: Array.from(this.patterns.values()).map(p => p.type)
        };
    }
    
    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
     * @param {number} dx - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ X
     * @param {number} dy - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ Y
     * @returns {Object} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
     */
    normalizeDirection(dx, dy) {
        const length = Math.sqrt(dx * dx + dy * dy);
        if (length === 0) return { x: 0, y: 0 };
        return { x: dx / length, y: dy / length };
    }
}
