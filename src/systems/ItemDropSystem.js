import { Item } from '../objects/Item.js';
import { ITEM_TYPES, ITEMS, ENEMY_DROP_MODIFIERS } from '../types/itemTypes.js';
import { enemyTypes } from '../types/enemyTypes.js';

/**
 * –°–∏—Å—Ç–µ–º–∞ –¥—Ä–æ–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
 */
export class ItemDropSystem {
    constructor(scene, egg, probabilitySystem = null, abilitySystem = null) {
        this.scene = scene;
        this.egg = egg;
        this.probabilitySystem = probabilitySystem;
        this.abilitySystem = abilitySystem;
        this.items = []; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        this.scene.events.on('item:created', this.onItemCreated.bind(this));
        this.scene.events.on('item:removed', this.onItemRemoved.bind(this));
    }
    
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞–≥–∞
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {string} enemyType - –¢–∏–ø –≤—Ä–∞–≥–∞
     * @param {number} gameMinute - –¢–µ–∫—É—â–∞—è –º–∏–Ω—É—Ç–∞ –∏–≥—Ä—ã
     * @returns {Item|null} –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ null
     */
    dropRandomItem(x, y, enemyType = 'unknown', gameMinute = 1) {
        const enemyConfig = enemyTypes[enemyType];
        if (!enemyConfig || !enemyConfig.dropList || enemyConfig.dropList.length === 0) {
            console.log(`üéÅ [ItemDropSystem] –£ –≤—Ä–∞–≥–∞ ${enemyType} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥—Ä–æ–ø–∞`);
            return null;
        }
        
        const playerLuck = this.abilitySystem ? this.abilitySystem.getLuck() : 5;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞–≥–∞
        for (const itemType of enemyConfig.dropList) {
            if (this.checkItemDrop(playerLuck, itemType, enemyType, gameMinute)) {
                console.log(`üéÅ [ItemDropSystem] –í—Ä–∞–≥ ${enemyType} –¥—Ä–æ–ø–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç: ${itemType}`);
                return Item.CreateItem(this.scene, x, y, itemType, this.abilitySystem);
            }
        }
        
        return null; // –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥—Ä–æ–ø–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
     * @param {number} playerLuck - –£–¥–∞—á–∞ –∏–≥—Ä–æ–∫–∞ (5-30)
     * @param {string} itemType - –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞
     * @param {string} enemyType - –¢–∏–ø –≤—Ä–∞–≥–∞
     * @param {number} gameMinute - –¢–µ–∫—É—â–∞—è –º–∏–Ω—É—Ç–∞ –∏–≥—Ä—ã
     * @returns {boolean} true –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–ø–∞—Å—Ç—å
     */
    checkItemDrop(playerLuck, itemType, enemyType, gameMinute) {
        const itemConfig = ITEMS[itemType];
        if (!itemConfig) {
            console.warn(`[ItemDropSystem] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞: ${itemType}`);
            return false;
        }
        
        const itemDropChance = itemConfig.dropChance;
        const timeModifier = 1 + (gameMinute - 1) * 0.1; // +10% –∑–∞ –º–∏–Ω—É—Ç—É
        const enemyModifier = ENEMY_DROP_MODIFIERS[enemyType] || 1.0;
        
        const finalChance = (playerLuck / 100) * itemDropChance * timeModifier * enemyModifier;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ 75%
        const cappedChance = Math.min(finalChance, 0.75);
        
        const roll = Math.random();
        const success = roll < cappedChance;
        
        if (success) {
            console.log(`üé≤ [ItemDropSystem] ${itemType}: —É–¥–∞—á–∞=${playerLuck}, –ø—Ä–µ–¥–º–µ—Ç=${(itemDropChance*100).toFixed(1)}%, –≤—Ä–µ–º—è=${(timeModifier*100).toFixed(1)}%, –≤—Ä–∞–≥=${(enemyModifier*100).toFixed(1)}%, –∏—Ç–æ–≥–æ=${(cappedChance*100).toFixed(1)}%`);
        }
        
        return success;
    }
    
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ (—Å–æ–±—ã—Ç–∏–µ)
     */
    onItemCreated(item) {
        this.items.push(item);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ (—Å–æ–±—ã—Ç–∏–µ)
     */
    onItemRemoved(item) {
        const index = this.items.indexOf(item);
        if (index !== -1) {
            this.items.splice(index, 1);
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
     */
    clearAllItems() {
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ - –ø—Ä–µ–¥–º–µ—Ç—ã —Å–∞–º–∏ —Å–µ–±—è —É–Ω–∏—á—Ç–æ–∂–∞—Ç
        this.scene.events.emit('items:clear-all');
        
        // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        this.items = [];
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
     */
    destroy() {
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
        this.scene.events.off('item:created', this.onItemCreated.bind(this));
        this.scene.events.off('item:removed', this.onItemRemoved.bind(this));
        
        this.clearAllItems();
    }
}
