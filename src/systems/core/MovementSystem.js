import { ISystem } from '../interfaces/ISystem.js';
import { GeometryUtils } from '../../utils/GeometryUtils.js';
import { OrbitalMovementStrategy } from '../strategies/movement/OrbitalMovementStrategy.js';
import { RandomPointMovementStrategy } from '../strategies/movement/RandomPointMovementStrategy.js';
import { SpawnerMovementStrategy } from '../strategies/movement/SpawnerMovementStrategy.js';
import { InertiaMovementStrategy } from '../strategies/movement/InertiaMovementStrategy.js';
import { JitteryMovementStrategy } from '../strategies/movement/JitteryMovementStrategy.js';
import { JumpingMovementStrategy } from '../strategies/movement/JumpingMovementStrategy.js';

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
 */
export class MovementSystem extends ISystem {
    constructor(gameObject, config) {
        super(gameObject, config);
        this.currentTarget = null;
        this.currentPath = null;
        this.pathIndex = 0;
        this.isMoving = false;
        this.lastUpdateTime = 0;
        this.updateInterval = this.getConfigValue('updateInterval', 16); // ~60 FPS
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
        this.strategy = null;
        // –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ movement –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const movementConfig = this.config.get('movement', {});
        this.strategyType = movementConfig.strategy || this.getConfigValue('strategy', 'linear');
        
        this.initialize();
    }

    initialize() {
        this.setupStrategy();
        this.setupPhysics();
    }

    setupStrategy() {
        // –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ movement –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const movementConfig = this.config.get('movement', {});
        this.strategyType = movementConfig.strategy || this.getConfigValue('strategy', 'linear');
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ –¥–ª—è –∫–æ–º–∞—Ä–∞
        if (this.gameObject.enemyType === 'mosquito') {
            console.log(`ü¶ü MOVEMENT SETUP: strategyType=${this.strategyType}, movementConfig=`, movementConfig);
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
        switch (this.strategyType) {
            case 'orbital':
                this.strategy = new OrbitalMovementStrategy(this.gameObject, this.config);
                break;
            case 'randomPoint':
                this.strategy = new RandomPointMovementStrategy(this.gameObject, this.config);
                break;
            case 'spawner':
                this.strategy = new SpawnerMovementStrategy(this.gameObject, this.config);
                break;
            case 'inertia':
                this.strategy = new InertiaMovementStrategy(this.gameObject, this.config);
                break;
            case 'jittery':
                this.strategy = new JitteryMovementStrategy(this.gameObject, this.config);
                break;
            case 'jumping':
                this.strategy = new JumpingMovementStrategy(this.gameObject, this.config);
                break;
            default:
                this.strategy = null;
                break;
        }
    }

    setupPhysics() {
        const physicsBody = this.gameObject.body || this.gameObject.physicsBody;
        if (!physicsBody) {
            console.warn('MovementSystem: GameObject has no physics body');
            return;
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–∑–∏–∫–∏ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
        physicsBody.setCollideWorldBounds(true);
        physicsBody.setBounce(this.getConfigValue('bounce', 0.1));
        physicsBody.setDrag(
            this.getConfigValue('dragX', 50),
            this.getConfigValue('dragY', 50)
        );
    }

    updateSystem(time, delta) {
        if (time - this.lastUpdateTime < this.updateInterval) {
            return;
        }

        this.lastUpdateTime = time;

        if (this.strategy) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞–ø—Ä—è–º—É—é
            this.strategy.update(time, delta);
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É MovementSystem
            this.defaultMovement(time, delta);
        }
    }

    defaultMovement(time, delta) {
        if (!this.currentTarget) {
            this.stopMovement();
            return;
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—Ä–∞–≥–æ–≤
        switch (this.strategyType) {
            case 'flying':
                // –õ–µ—Ç–∞—é—â–∏–µ –≤—Ä–∞–≥–∏ —Å –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏
                this.handleFlyingBehavior(time, delta);
                break;
            case 'jittery':
                // –î–µ—Ä–≥–∞–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (–∫–æ–º–∞—Ä)
                this.handleJitteryBehavior(time, delta);
                break;
            case 'jumping':
                // –ü—Ä—ã–≥–∞—é—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (–±–ª–æ—Ö–∞)
                this.handleJumpingBehavior(time, delta);
                break;
            case 'stealth':
                // –ù–µ–≤–∏–¥–∏–º—ã–π —Å–ª–∏–∑–µ–Ω—å
                this.handleStealthBehavior(time, delta);
                break;
            case 'burrow':
                // –ö—Ä–æ—Ç –ø–æ–¥ –∑–µ–º–ª–µ–π
                this.handleBurrowBehavior(time, delta);
                break;
            case 'shell':
                // –£–ª–∏—Ç–∫–∞ —Å —Ä–∞–∫–æ–≤–∏–Ω–æ–π
                this.handleShellBehavior(time, delta);
                break;
            default:
                // –û–±—ã—á–Ω–æ–µ –ª–∏–Ω–µ–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (–≤–∫–ª—é—á–∞—è —Å–∞–º–∫—É –ø–∞—É–∫–∞)
                this.moveToTarget(this.currentTarget);
        }
    }


    /**
     * –ü–æ–≤–µ–¥–µ–Ω–∏–µ –¥–µ—Ä–≥–∞–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è (–∫–æ–º–∞—Ä)
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    handleJitteryBehavior(time, delta) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é jittery
        if (this.strategy && this.strategy.update) {
            this.strategy.update(time, delta);
        } else {
            // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –¥–≤–∏–∂–µ–Ω–∏—é
            this.moveToTarget(this.currentTarget);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—ã–≥–∞—é—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    handleJumpingBehavior(time, delta) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é jumping
        if (this.strategy && this.strategy.update) {
            this.strategy.update(time, delta);
        } else {
            // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –¥–≤–∏–∂–µ–Ω–∏—é
            this.moveToTarget(this.currentTarget);
        }
    }

    /**
     * –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ª–µ—Ç–∞—é—â–∏—Ö –≤—Ä–∞–≥–æ–≤
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    handleFlyingBehavior(time, delta) {
        if (!this.currentTarget) {
            this.stopMovement();
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏
        const distance = GeometryUtils.distance(this.gameObject.x, this.gameObject.y, this.currentTarget.x, this.currentTarget.y);
        const movementConfig = this.config.get('movement', {});
        const attackRange = movementConfig.attackRange || this.getConfigValue('attackRange', 30);

        // –ï—Å–ª–∏ —Ü–µ–ª—å –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        if (distance <= attackRange) {
            this.stopMovement();
            this.onTargetReached(this.currentTarget);
            return;
        }

        // –õ–µ—Ç–∞—é—â–∏–µ –≤—Ä–∞–≥–∏ —Å –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏
        if (!this.flightTime) {
            this.flightTime = 0;
        }
        this.flightTime += delta;
        
        const direction = this.getFlyingDirection();
        const speed = movementConfig.speed || this.getConfigValue('speed', 120);
        
        const velocityX = direction.x * speed;
        const velocityY = direction.y * speed;
        
        if (this.gameObject.body) {
            this.gameObject.body.setVelocity(velocityX, velocityY);
        } else if (this.gameObject.physicsBody) {
            this.gameObject.physicsBody.setVelocity(velocityX, velocityY);
        }
        
        this.rotateToDirection(direction);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ª–µ—Ç–∞—é—â–∏—Ö –≤—Ä–∞–≥–æ–≤ —Å –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏
     * @returns {Object} –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {x, y}
     */
    getFlyingDirection() {
        const dx = this.currentTarget.x - this.gameObject.x;
        const dy = this.currentTarget.y - this.gameObject.y;
        const baseDirection = GeometryUtils.normalize(dx, dy);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–µ–±–∞–Ω–∏—è (—á–∏—Ç–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        const movementConfig = this.config.get('movement', {});
        const oscillationSpeed = movementConfig.oscillationSpeed || 0.02;
        const amplitude = (movementConfig.amplitude || 35) * 0.01; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–∏–∫—Å–µ–ª–∏
        
        const time = this.flightTime * oscillationSpeed;
        const oscillationX = Math.cos(time) * amplitude;
        const oscillationY = Math.sin(time) * amplitude;
        
        
        return {
            x: baseDirection.x + oscillationX,
            y: baseDirection.y + oscillationY
        };
    }

    /**
     * –ü–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ —Å–ª–∏–∑–Ω—è
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    handleStealthBehavior(time, delta) {
        // –ù–µ–≤–∏–¥–∏–º—ã–π —Å–ª–∏–∑–µ–Ω—å –¥–≤–∏–∂–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ
        this.moveToTarget(this.currentTarget);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        if (!this.stealthInitialized) {
            this.gameObject.setAlpha(0.05); // 95% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            this.stealthInitialized = true;
        }
    }

    /**
     * –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∫—Ä–æ—Ç–∞ –ø–æ–¥ –∑–µ–º–ª–µ–π
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    handleBurrowBehavior(time, delta) {
        // –ö—Ä–æ—Ç –¥–≤–∏–∂–µ—Ç—Å—è –ø–æ–¥ –∑–µ–º–ª–µ–π
        this.moveToTarget(this.currentTarget);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        if (!this.burrowInitialized) {
            this.gameObject.setAlpha(0.3);
            this.burrowInitialized = true;
        }
    }

    /**
     * –ü–æ–≤–µ–¥–µ–Ω–∏–µ —É–ª–∏—Ç–∫–∏ —Å —Ä–∞–∫–æ–≤–∏–Ω–æ–π
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    handleShellBehavior(time, delta) {
        // –£–ª–∏—Ç–∫–∞ –¥–≤–∏–∂–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ
        this.moveToTarget(this.currentTarget);
    }

    /**
     * –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
     * @param {Object} target - –¶–µ–ª—å {x, y}
     */
    moveTo(target) {
        this.currentTarget = target;
        this.isMoving = true;
        this.setState('moving');
        
        // –ü–µ—Ä–µ–¥–∞–µ–º —Ü–µ–ª—å –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤–Ω–µ—à–Ω–∏–µ —Ü–µ–ª–∏
        if (this.strategy && this.strategy.setTarget && 
            this.strategyType !== 'randomPoint' && this.strategyType !== 'spawner') {
            this.strategy.setTarget(target);
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ –¥–ª—è –±–ª–æ—Ö–∏
            if (this.gameObject.enemyType === 'flea') {
                console.log(`ü¶ó MOVEMENT: –ü–µ—Ä–µ–¥–∞–µ–º —Ü–µ–ª—å –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é jumping (${target.x.toFixed(1)}, ${target.y.toFixed(1)})`);
            }
        }
    }

    /**
     * –î–≤–∏–∂–µ–Ω–∏–µ –∫ –ø–æ–∑–∏—Ü–∏–∏
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     */
    moveToPosition(x, y) {
        this.moveTo({ x, y });
    }

    /**
     * –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏
     * @param {Array} path - –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –ø—É—Ç–∏ [{x, y}, ...]
     */
    moveAlongPath(path) {
        if (!path || path.length === 0) {
            this.stopMovement();
            return;
        }

        this.currentPath = path;
        this.pathIndex = 0;
        this.moveTo(path[0]);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    stopMovement() {
        this.currentTarget = null;
        this.currentPath = null;
        this.pathIndex = 0;
        this.isMoving = false;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–∏–∑–∏–∫—É
        if (this.gameObject.body) {
            this.gameObject.body.setVelocity(0, 0);
        } else if (this.gameObject.physicsBody) {
            this.gameObject.physicsBody.setVelocity(0, 0);
        }
        
        this.setState('idle');
    }

    /**
     * –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–π —Ü–µ–ª–∏
     * @param {Object} target - –¶–µ–ª—å
     */
    moveToTarget(target) {
        if (!target || !this.gameObject.isAlive) {
            this.stopMovement();
            return;
        }

        const distance = GeometryUtils.distance(this.gameObject.x, this.gameObject.y, target.x, target.y);
        const attackRange = this.getConfigValue('attackRange', 30);


        // –ï—Å–ª–∏ —Ü–µ–ª—å –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        if (distance <= attackRange) {
            this.stopMovement();
            this.onTargetReached(target);
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
        const direction = GeometryUtils.normalize(target.x - this.gameObject.x, target.y - this.gameObject.y);
        const speed = this.getConfigValue('speed', 100);
        
        const velocityX = direction.x * speed;
        const velocityY = direction.y * speed;


        if (this.gameObject.body) {
            this.gameObject.body.setVelocity(velocityX, velocityY);
        } else if (this.gameObject.physicsBody) {
            this.gameObject.physicsBody.setVelocity(velocityX, velocityY);
        } else {
            console.warn('MovementSystem: No body or physicsBody for setting velocity');
        }

        // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        this.rotateToDirection(direction);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏ –ø—É—Ç–∏
        this.checkPathProgress();
    }

    /**
     * –ü–æ–≤–æ—Ä–æ—Ç –æ–±—ä–µ–∫—Ç–∞ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
     * @param {Object} direction - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {x, y}
     */
    rotateToDirection(direction) {
        if (direction.x === 0 && direction.y === 0) return;

        const targetAngle = Math.atan2(direction.y, direction.x);
        const currentAngle = this.gameObject.rotation;
        
        // –ü–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
        const movementConfig = this.config.get('movement', {});
        const rotationSpeed = movementConfig.rotationSpeed || this.getConfigValue('rotationSpeed', 0.1); // –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–∞
        const angleDiff = this.normalizeAngle(targetAngle - currentAngle);
        
        if (Math.abs(angleDiff) > 0.01) { // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 0.01 —Ä–∞–¥–∏–∞–Ω–∞
            const newAngle = currentAngle + angleDiff * rotationSpeed;
            this.gameObject.setRotation(newAngle);
        } else {
            this.gameObject.setRotation(targetAngle);
        }
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É–≥–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-œÄ, œÄ]
     * @param {number} angle - –£–≥–æ–ª –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
     * @returns {number} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —É–≥–æ–ª
     */
    normalizeAngle(angle) {
        while (angle > Math.PI) angle -= 2 * Math.PI;
        while (angle < -Math.PI) angle += 2 * Math.PI;
        return angle;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –ø—É—Ç–∏
     */
    checkPathProgress() {
        if (!this.currentPath || this.pathIndex >= this.currentPath.length - 1) {
            return;
        }

        const currentTarget = this.currentPath[this.pathIndex];
        const distance = GeometryUtils.distance(this.gameObject.x, this.gameObject.y, currentTarget.x, currentTarget.y);
        const threshold = this.getConfigValue('pathThreshold', 10);

        if (distance <= threshold) {
            this.pathIndex++;
            if (this.pathIndex < this.currentPath.length) {
                this.moveTo(this.currentPath[this.pathIndex]);
            } else {
                this.stopMovement();
                this.onPathCompleted();
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
     * @param {Object} target - –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è —Ü–µ–ª—å
     */
    onTargetReached(target) {
        this.emit('targetReached', { target, gameObject: this.gameObject });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—É—Ç–∏
     */
    onPathCompleted() {
        this.emit('pathCompleted', { gameObject: this.gameObject });
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
     * @param {string} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    setState(state) {
        this.state = state;
        this.emit('stateChanged', { 
            state, 
            gameObject: this.gameObject,
            system: 'MovementSystem'
        });
    }

    /**
     * –≠–º–∏—Ç —Å–æ–±—ã—Ç–∏—è
     * @param {string} event - –°–æ–±—ã—Ç–∏–µ
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ
     */
    emit(event, data) {
        if (this.gameObject.scene && this.gameObject.scene.events) {
            this.gameObject.scene.events.emit(`movement:${event}`, data);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @returns {Object}
     */
    getMovementState() {
        return {
            isMoving: this.isMoving,
            currentTarget: this.currentTarget,
            currentPath: this.currentPath,
            pathIndex: this.pathIndex,
            state: this.state,
            strategy: this.strategyType
        };
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
     * @param {string} strategyType - –¢–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    setStrategy(strategyType) {
        this.strategyType = strategyType;
        this.setupStrategy();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è
     * @returns {number}
     */
    getSpeed() {
        return this.getConfigValue('speed', 100);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è
     * @param {number} speed - –°–∫–æ—Ä–æ—Å—Ç—å
     */
    setSpeed(speed) {
        this.config.setOverride('speed', speed);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–≤–∏–∂–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç
     * @returns {boolean}
     */
    isMovingToTarget() {
        return this.isMoving && this.currentTarget !== null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–ª–∏
     * @returns {number}
     */
    getDistanceToTarget() {
        if (!this.currentTarget) return Infinity;
        return GeometryUtils.distance(this.gameObject.x, this.gameObject.y, this.currentTarget.x, this.currentTarget.y);
    }

    destroy() {
        this.stopMovement();
        if (this.strategy && this.strategy.destroy) {
            this.strategy.destroy();
        }
        super.destroy();
    }
}
