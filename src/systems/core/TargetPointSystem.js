import { GeometryUtils } from '../../utils/GeometryUtils.js';

/**
 * –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
 * –°–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–≤–∏–¥–∏–º—ã–º–∏ —Ü–µ–ª–µ–≤—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
 */
export class TargetPointSystem {
    constructor(scene) {
        this.scene = scene;
        this.targetPoints = new Map(); // ID -> TargetPoint
        this.nextId = 1;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–∏
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * @returns {string} ID —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–∏
     */
    createTargetPoint(x, y, options = {}) {
        const id = `target_${this.nextId++}`;
        
        const targetPoint = {
            id: id,
            x: x,
            y: y,
            created: this.scene.time.now,
            lifetime: options.lifetime || 10000, // 10 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            owner: options.owner || null,
            isActive: true
        };
        
        this.targetPoints.set(id, targetPoint);
        
        console.log(`üéØ [TargetPointSystem] –°–æ–∑–¥–∞–Ω–∞ —Ü–µ–ª–µ–≤–∞—è —Ç–æ—á–∫–∞ ${id} –≤ (${x.toFixed(1)}, ${y.toFixed(1)})`);
        
        return id;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–∏ –ø–æ ID
     * @param {string} id - ID —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–∏
     * @returns {Object|null}
     */
    getTargetPoint(id) {
        return this.targetPoints.get(id) || null;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–∏
     * @param {string} id - ID —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–∏
     */
    removeTargetPoint(id) {
        if (this.targetPoints.has(id)) {
            this.targetPoints.delete(id);
            console.log(`üéØ [TargetPointSystem] –£–¥–∞–ª–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è —Ç–æ—á–∫–∞ ${id}`);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞
     * @param {Object} owner - –í–ª–∞–¥–µ–ª–µ—Ü
     */
    removeTargetPointsByOwner(owner) {
        for (const [id, point] of this.targetPoints) {
            if (point.owner === owner) {
                this.removeTargetPoint(id);
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–∏
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean}
     */
    isValidPoint(x, y, options = {}) {
        if (!this.scene) return false;

        const camera = this.scene.cameras.main;
        const sceneWidth = camera.width;
        const sceneHeight = camera.height;
        const margin = options.margin || 50;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
        if (x < margin || x > sceneWidth - margin || 
            y < margin || y > sceneHeight - margin) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        if (options.checkObstacles !== false) {
            return this.checkObstacles(x, y, options.obstacleRadius || 30);
        }
        
        return true;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –≤ —Ç–æ—á–∫–µ
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} radius - –†–∞–¥–∏—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean}
     */
    checkObstacles(x, y, radius = 30) {
        if (!this.scene) return true;

        const obstacles = this.scene.children.list.filter(obj => 
            obj.isObstacle || obj.isProtection || obj.body || obj.physicsBody
        );
        
        for (const obstacle of obstacles) {
            const distance = GeometryUtils.distance(x, y, obstacle.x, obstacle.y);
            const obstacleRadius = obstacle.width ? obstacle.width / 2 : 30;
            
            if (distance < obstacleRadius + radius) {
                return false;
            }
        }
        
        return true;
    }

    /**
     * –ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π —Ç–æ—á–∫–∏
     * @param {Object} center - –¶–µ–Ω—Ç—Ä –ø–æ–∏—Å–∫–∞ {x, y}
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
     * @returns {Object|null} –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –∏–ª–∏ null
     */
    findRandomValidPoint(center, options = {}) {
        const searchRadius = options.searchRadius || 200;
        const minDistance = options.minDistance || 50;
        const maxAttempts = options.maxAttempts || 10;
        
        for (let attempt = 0; attempt < maxAttempts; attempt++) {
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            const angle = Math.random() * Math.PI * 2;
            const distance = minDistance + Math.random() * (searchRadius - minDistance);
            
            const x = center.x + Math.cos(angle) * distance;
            const y = center.y + Math.sin(angle) * distance;
            
            if (this.isValidPoint(x, y, options)) {
                return { x, y };
            }
        }
        
        return null;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (—É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–æ—á–µ–∫)
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    update(time) {
        for (const [id, point] of this.targetPoints) {
            if (time - point.created > point.lifetime) {
                this.removeTargetPoint(id);
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫
     * @returns {Array}
     */
    getAllActiveTargetPoints() {
        return Array.from(this.targetPoints.values()).filter(point => point.isActive);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞
     * @param {Object} owner - –í–ª–∞–¥–µ–ª–µ—Ü
     * @returns {Array}
     */
    getTargetPointsByOwner(owner) {
        return Array.from(this.targetPoints.values())
            .filter(point => point.owner === owner && point.isActive);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫
     */
    clear() {
        this.targetPoints.clear();
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
     */
    destroy() {
        this.clear();
        this.scene = null;
    }
}

