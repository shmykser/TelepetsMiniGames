import { MovementSystem } from './MovementSystem.js';
import { AttackSystem } from './AttackSystem.js';
import { CollisionSystem } from './CollisionSystem.js';
import { PathfindingSystem } from './PathfindingSystem.js';
import { RecoverySystem } from '../RecoverySystem.js';
import { SystemConfig } from '../config/SystemConfig.js';
import { StealthStrategy } from '../strategies/stealth/StealthStrategy.js';
import { BurrowStealthStrategy } from '../strategies/stealth/BurrowStealthStrategy.js';
import { TargetPointSystem } from './TargetPointSystem.js';

/**
 * –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º –ò–ò
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∏—Ö —Ä–∞–±–æ—Ç—É
 */
export class AICoordinator {
    constructor(gameObject, config) {
        this.gameObject = gameObject;
        this.config = config;
        this.systems = new Map();
        this.isActive = true;
        this.updateInterval = 16; // ~60 FPS
        this.lastUpdateTime = 0;
        
        // –¶–µ–ª—å –¥–ª—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
        this.currentTarget = null;
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
        this.stealthStrategy = null;
        this.targetPointSystem = null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ò–ò
        this.state = 'idle'; // idle, moving, attacking, pathfinding
        this.lastStateChange = 0;
        
        this.initialize();
    }

    initialize() {
        this.setupSystems();
        this.setupStrategies();
        this.setupEventListeners();
    }

    setupSystems() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–∏—Å—Ç–µ–º—ã
        const movementConfig = new SystemConfig([
            this.config.get('movement', {}),
            this.config.get('behaviorParams', {}),
            this.config
        ]);

        const attackConfig = new SystemConfig([
            this.config.get('attack', {}),
            this.config.get('behaviorParams', {}),
            this.config
        ]);

        const collisionConfig = new SystemConfig([
            this.config.get('collision', {}),
            this.config.get('behaviorParams', {}),
            this.config
        ]);

        const pathfindingConfig = new SystemConfig([
            this.config.get('pathfinding', {}),
            this.config.get('behaviorParams', {}),
            this.config
        ]);

        // –°–æ–∑–¥–∞–µ–º recoveryConfig –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
        const recoveryConfig = this.config;

        // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ gameObject —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (this.gameObject) {
            this.systems.set('movement', new MovementSystem(this.gameObject, movementConfig));
            this.systems.set('attack', new AttackSystem(this.gameObject, attackConfig));
            this.systems.set('collision', new CollisionSystem(this.gameObject, collisionConfig));
            this.systems.set('pathfinding', new PathfindingSystem(this.gameObject, pathfindingConfig));
            this.systems.set('recovery', new RecoverySystem(this.gameObject, recoveryConfig));
        }
    }

    setupStrategies() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ü–µ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫
        if (this.gameObject && this.gameObject.scene) {
            this.targetPointSystem = new TargetPointSystem(this.gameObject.scene);
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
        const movementSystem = this.systems.get('movement');
        if (movementSystem) {
            const movementStrategy = this.config.get('movement.strategy', 'linear');
            movementSystem.setStrategy(movementStrategy);
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∞—Ç–∞–∫–∏
        const attackSystem = this.systems.get('attack');
        if (attackSystem) {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—Ç–∞–∫–∏
            const attackConfig = this.config.get('attack', {});
            const attackStrategy = attackConfig.strategy || this.config.get('strategy', 'simple');
            
            console.log(`üéØ [AICoordinator] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞—Ç–∞–∫–∏: ${attackStrategy} –¥–ª—è ${this.gameObject.enemyType}`);
            
            attackSystem.setStrategy(attackStrategy);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–π —Å–ø–∞–≤–Ω –¥–ª—è –∫—Ä–æ—Ç–∞
            if (attackStrategy === 'spawn' && attackConfig.conditionalSpawn) {
                const spawnAttack = attackSystem.strategy;
                if (spawnAttack && spawnAttack.setConditionCallback) {
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å–ª–æ–≤–∏–µ: —Å–ø–∞–≤–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
                    spawnAttack.setConditionCallback(() => {
                        const isOnSurface = this.stealthStrategy && this.stealthStrategy.isOnSurfaceNow();
                        if (this.gameObject.enemyType === 'mole') {
                            console.log(`üêÄ [AICoordinator] –ö–†–û–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è —Å–ø–∞–≤–Ω–∞ - –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏: ${isOnSurface}`);
                        }
                        return isOnSurface;
                    });
                }
            }
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å—Ç–µ–ª—Å–∞
        const stealthConfig = this.config.get('stealth', {});
        if (stealthConfig && stealthConfig.strategy) {
            const stealthSystemConfig = new SystemConfig([stealthConfig, this.config]);
            
            if (stealthConfig.strategy === 'stealth') {
                this.stealthStrategy = new StealthStrategy(this.gameObject, stealthSystemConfig);
                console.log(`üëª [AICoordinator] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—Ç–µ–ª—Å–∞ –¥–ª—è ${this.gameObject.enemyType}`);
            } else if (stealthConfig.strategy === 'burrow') {
                this.stealthStrategy = new BurrowStealthStrategy(this.gameObject, stealthSystemConfig);
        }
            
            if (this.stealthStrategy) {
                this.stealthStrategy.activate();
            }
        }
    }

    setupEventListeners() {
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç —Å–∏—Å—Ç–µ–º
        if (this.gameObject && this.gameObject.scene && this.gameObject.scene.events) {
            this.gameObject.scene.events.on('movement:targetReached', this.onTargetReached.bind(this));
            this.gameObject.scene.events.on('movement:pathCompleted', this.onPathCompleted.bind(this));
            this.gameObject.scene.events.on('attack:attackPerformed', this.onAttackPerformed.bind(this));
            this.gameObject.scene.events.on('collision:collision', this.onCollision.bind(this));
            this.gameObject.scene.events.on('pathfinding:pathCompleted', this.onPathfindingCompleted.bind(this));
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    update(time, delta) {
        if (!this.isActive || !this.gameObject || !this.gameObject.isAlive) {
            return;
        }

        if (time - this.lastUpdateTime < this.updateInterval) {
            return;
        }

        this.lastUpdateTime = time;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
        this.systems.forEach(system => {
            if (system.isActive) {
                system.update(time, delta);
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å—Ç–µ–ª—Å–∞
        if (this.stealthStrategy) {
            this.stealthStrategy.update(time, delta);
        }

        // –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º
        this.coordinateSystems(time, delta);
    }

    /**
     * –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    coordinateSystems(time, delta) {
        const movementSystem = this.systems.get('movement');
        const attackSystem = this.systems.get('attack');
        const pathfindingSystem = this.systems.get('pathfinding');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å—Ç–µ–ª—Å–∞
        if (this.stealthStrategy && this.stealthStrategy.update) {
            this.stealthStrategy.update(time, delta);
        }

        if (!this.currentTarget) {
            console.log(`üéØ [AICoordinator] –ù–µ—Ç —Ü–µ–ª–∏, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: idle`);
            this.setState('idle');
            return;
        }

        // console.log(`üéØ [AICoordinator] –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:`, this.currentTarget);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –∞—Ç–∞–∫–æ–≤–∞—Ç—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞—Ç–∞–∫–∏ –Ω–µ 'none')
        const attackConfig = this.config.get('attack', {});
        const attackStrategy = attackConfig.strategy || 'simple';
        
        if (attackSystem && attackStrategy !== 'none' && attackSystem.isInRange && attackSystem.isInRange()) {
            this.setState('attacking');
            attackSystem.attack(this.currentTarget);
            return;
        }

        // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∞—Ç–∞–∫–æ–≤–∞—Ç—å, –∏—â–µ–º –ø—É—Ç—å
        if (pathfindingSystem && this.shouldUsePathfinding()) {
            const path = pathfindingSystem.findPath(this.currentTarget);
            if (path && path.length > 0) {
                this.setState('pathfinding');
                pathfindingSystem.setPath(path);
                movementSystem.moveAlongPath(path);
                return;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        const movementStrategy = this.config.get('movement.strategy', 'linear');
        
        if (movementStrategy === 'randomPoint' || movementStrategy === 'spawner') {
            // –î–ª—è —ç—Ç–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤–Ω–µ—à–Ω—é—é —Ü–µ–ª—å
            // –û–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–æ —Å–≤–æ–∏–º–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Ü–µ–ª—è–º–∏
            console.log(`üéØ [AICoordinator] ${movementStrategy} —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–Ω–µ—à–Ω—é—é —Ü–µ–ª—å`);
            // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ moving –¥–ª—è —ç—Ç–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            return;
        }
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        this.setState('moving');
        movementSystem.moveTo(this.currentTarget);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø—É—Ç–∏
     * @returns {boolean}
     */
    shouldUsePathfinding() {
        const pathfindingSystem = this.systems.get('pathfinding');
        if (!pathfindingSystem) {
            return false;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø—É—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        const hasObstacles = this.gameObject && this.gameObject.scene && 
            this.gameObject.scene.children.list.some(obj => obj.isObstacle);
        
        return hasObstacles;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –¥–ª—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
     * @param {Object} target - –¶–µ–ª—å
     */
    setTarget(target) {
        this.currentTarget = target;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—ã –æ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
        const movementSystem = this.systems.get('movement');
        const attackSystem = this.systems.get('attack');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        const movementConfig = this.config.get('movement', {});
        const movementStrategy = movementConfig.strategy || this.config.get('movement.strategy', 'linear');
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ –¥–ª—è –±–ª–æ—Ö–∏
        if (this.gameObject && this.gameObject.enemyType === 'flea') {
            console.log(`ü¶ó AI: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å (${target.x.toFixed(1)}, ${target.y.toFixed(1)}), —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: ${movementStrategy}`);
        }
        
        if (movementSystem && movementStrategy !== 'randomPoint' && movementStrategy !== 'spawner') {
            movementSystem.moveTo(target);
            
            // –î–ª—è inertia —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–µ—Ä–µ–¥–∞–µ–º cooldown –∞—Ç–∞–∫–∏
            if (movementStrategy === 'inertia' && movementSystem.strategy && movementSystem.strategy.updateAttackCooldown) {
                const attackConfig = this.config.get('attack', {});
                const cooldown = attackConfig.cooldown || 5000; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∏–Ω–æ
                movementSystem.strategy.updateAttackCooldown(cooldown);
            }
        }
        
        if (attackSystem) {
            attackSystem.setTarget(target);
        }

        if (this.gameObject) {
            this.emit('targetChanged', {
                oldTarget: this.currentTarget,
                newTarget: target,
                gameObject: this.gameObject
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–ª–∏
     * @returns {Object|null}
     */
    getTarget() {
        return this.currentTarget;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ò–ò
     * @param {string} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    setState(state) {
        if (this.state === state) {
            return;
        }

        const oldState = this.state;
        this.state = state;
        this.lastStateChange = (this.gameObject && this.gameObject.scene && this.gameObject.scene.time) ? 
            this.gameObject.scene.time.now : Date.now();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ gameObject —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ —ç–º–∏—Ç–æ–º —Å–æ–±—ã—Ç–∏—è
        if (this.gameObject) {
            this.emit('stateChanged', {
                oldState,
                newState: state,
                gameObject: this.gameObject
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ò–ò
     * @returns {string}
     */
    getState() {
        return this.state;
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
     */
    activate() {
        this.isActive = true;
        this.systems.forEach(system => system.activate());
        if (this.gameObject) {
            this.emit('activated', { gameObject: this.gameObject });
        }
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
     */
    deactivate() {
        this.isActive = false;
        this.systems.forEach(system => system.deactivate());
        if (this.gameObject) {
            this.emit('deactivated', { gameObject: this.gameObject });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ –∏–º–µ–Ω–∏
     * @param {string} systemName - –ò–º—è —Å–∏—Å—Ç–µ–º—ã
     * @returns {Object|null}
     */
    getSystem(systemName) {
        return this.systems.get(systemName) || null;
    }

    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
     * @param {string} systemName - –ò–º—è —Å–∏—Å—Ç–µ–º—ã
     * @param {boolean} enabled - –í–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞
     */
    setSystemEnabled(systemName, enabled) {
        const system = this.systems.get(systemName);
        if (system) {
            system.setEnabled(enabled);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
     * @param {Object} event - –°–æ–±—ã—Ç–∏–µ
     */
    onTargetReached(event) {
        this.setState('idle');
        if (this.gameObject) {
            this.emit('targetReached', event);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—É—Ç–∏
     * @param {Object} event - –°–æ–±—ã—Ç–∏–µ
     */
    onPathCompleted(event) {
        this.setState('idle');
        if (this.gameObject) {
            this.emit('pathCompleted', event);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∞—Ç–∞–∫–∏
     * @param {Object} event - –°–æ–±—ã—Ç–∏–µ
     */
    onAttackPerformed(event) {
        if (this.gameObject) {
            this.emit('attackPerformed', event);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–∏–∑–∏–∏
     * @param {Object} event - –°–æ–±—ã—Ç–∏–µ
     */
    onCollision(event) {
        if (this.gameObject) {
            this.emit('collision', event);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏
     * @param {Object} event - –°–æ–±—ã—Ç–∏–µ
     */
    onPathfindingCompleted(event) {
        this.setState('moving');
        if (this.gameObject) {
            this.emit('pathfindingCompleted', event);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
     * @returns {Object}
     */
    getSystemsState() {
        const state = {};
        this.systems.forEach((system, name) => {
            state[name] = system.getState ? system.getState() : {
                isActive: system.isActive,
                enabled: system.enabled
            };
        });
        return state;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ò–ò
     * @returns {Object}
     */
    getAIState() {
        return {
            isActive: this.isActive,
            state: this.state,
            currentTarget: this.currentTarget,
            lastStateChange: this.lastStateChange,
            systems: this.getSystemsState()
        };
    }

    /**
     * –≠–º–∏—Ç —Å–æ–±—ã—Ç–∏—è
     * @param {string} event - –°–æ–±—ã—Ç–∏–µ
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ
     */
    emit(event, data) {
        if (this.gameObject && this.gameObject.scene && this.gameObject.scene.events) {
            this.gameObject.scene.events.emit(`ai:${event}`, data);
        } else {
            console.warn(`AICoordinator: Cannot emit event '${event}' - scene not available`);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    onTargetReached(time) {
        console.log(`üéØ [AICoordinator] –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç–∞–∫—É`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –∞—Ç–∞–∫–æ–≤–∞—Ç—å
        const attackSystem = this.systems.get('attack');
        
        if (!attackSystem) {
            console.log(`üéØ [AICoordinator] –ù–µ—Ç —Å–∏—Å—Ç–µ–º—ã –∞—Ç–∞–∫–∏`);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—Ç–∞–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        const attackConfig = this.config ? this.config.get('attack', {}) : {};
        const attackStrategy = attackConfig.strategy || 'simple';
        
        console.log(`üéØ [AICoordinator] –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∞—Ç–∞–∫–∏: ${attackStrategy}, —Å–∏—Å—Ç–µ–º–∞ –∞—Ç–∞–∫–∏:`, attackSystem);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞—Ç–∞–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π isInRange
        if (this.currentTarget) {
            attackSystem.setTarget(this.currentTarget);
        }
        
        if (attackStrategy !== 'none' && attackSystem.isInRange && attackSystem.isInRange()) {
            console.log(`üéØ [AICoordinator] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞—Ç–∞–∫–µ`);
            this.setState('attacking');
            attackSystem.attack(this.currentTarget);
            return;
        } else {
            console.log(`üéØ [AICoordinator] –ù–µ –º–æ–∂–µ–º –∞—Ç–∞–∫–æ–≤–∞—Ç—å: strategy=${attackStrategy}, isInRange=${attackSystem.isInRange ? attackSystem.isInRange() : 'undefined'}`);
        }
        
        // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å—Ç–µ–ª—Å–∞ burrow, –≤—ã–≤–æ–¥–∏–º –∫—Ä–æ—Ç–∞ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
        if (this.stealthStrategy && this.stealthStrategy.goSurface) {
            console.log(`üêÄ [AICoordinator] –ó–∞—Å—Ç–∞–≤–ª—è–µ–º –∫—Ä–æ—Ç–∞ –≤—ã–π—Ç–∏ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å`);
            this.stealthStrategy.goSurface(time);
        }
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
     */
    destroy() {
        this.deactivate();
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
        this.systems.forEach(system => {
            if (system.destroy) {
                system.destroy();
            }
        });
        this.systems.clear();

        // –û—á–∏—â–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
        if (this.gameObject && this.gameObject.scene && this.gameObject.scene.events) {
            this.gameObject.scene.events.off('movement:targetReached', this.onTargetReached);
            this.gameObject.scene.events.off('movement:pathCompleted', this.onPathCompleted);
            this.gameObject.scene.events.off('attack:attackPerformed', this.onAttackPerformed);
            this.gameObject.scene.events.off('collision:collision', this.onCollision);
            this.gameObject.scene.events.off('pathfinding:pathCompleted', this.onPathfindingCompleted);
        }

        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å—Ç–µ–ª—Å–∞
        if (this.stealthStrategy) {
            this.stealthStrategy.destroy();
            this.stealthStrategy = null;
        }

        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ü–µ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫
        if (this.targetPointSystem) {
            this.targetPointSystem.destroy();
            this.targetPointSystem = null;
        }

        this.gameObject = null;
        this.config = null;
        this.currentTarget = null;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–Ω–∞
     * @param {number} damage - –£—Ä–æ–Ω
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    takeDamage(damage, time) {
        // –ü–µ—Ä–µ–¥–∞–µ–º —É—Ä–æ–Ω –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å—Ç–µ–ª—Å–∞
        if (this.stealthStrategy) {
            this.stealthStrategy.takeDamage(damage, time);
        }
    }
}
