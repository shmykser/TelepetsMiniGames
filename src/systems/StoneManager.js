import { Defense } from '../objects/Defense.js';
import { STONE_SETTINGS } from '../settings/GameSettings.js';
import { defenseTypes } from '../types/defenseTypes.js';
import { EVENT_TYPES } from '../types/EventTypes.js';
import { GeometryUtils } from '../utils/GeometryUtils.js';

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–º–Ω–µ–π - —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –∫–∞–º–Ω–µ–π –Ω–∞ –ø–æ–ª–µ
 */
export class StoneManager {
    constructor(scene) {
        this.scene = scene;
        this.stones = [];
        // –ß–∏—Ç–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ defenseTypes.stone.spawn, —Å fallback –Ω–∞ GameSettings
        const stoneSpawn = defenseTypes.stone?.spawn || {};
        this.minStones = stoneSpawn.minCount ?? STONE_SETTINGS.MIN_STONES;
        this.maxStones = stoneSpawn.maxCount ?? STONE_SETTINGS.MAX_STONES;
        this.spawnMargin = stoneSpawn.margin ?? STONE_SETTINGS.STONE_SPAWN_MARGIN;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–Ω–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å—Ü–µ–Ω—ã
     */
    initializeStones() {
        const count = GeometryUtils.randomBetween(this.minStones, this.maxStones);
        console.log(`üóø [StoneManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ${count} –∫–∞–º–Ω–µ–π`);
        
        for (let i = 0; i < count; i++) {
            const position = this.getRandomValidPosition();
            if (position) {
                const stone = Defense.createDefense(this.scene, 'stone', position.x, position.y);
                
                // –í–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
                if (stone.enableDrag) {
                    stone.enableDrag();
                }
                
                this.stones.push(stone);
                
                // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–Ω—è
                this.scene.events.emit(EVENT_TYPES.STONE_CREATED, {
                    stone: stone,
                    position: position,
                    index: i
                });
                
                console.log(`üóø [StoneManager] –ö–∞–º–µ–Ω—å ${i + 1} —Å–æ–∑–¥–∞–Ω –≤ (${position.x.toFixed(1)}, ${position.y.toFixed(1)})`);
            }
        }
        
        console.log(`üóø [StoneManager] –°–æ–∑–¥–∞–Ω–æ ${this.stones.length} –∫–∞–º–Ω–µ–π –∏–∑ ${count} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö`);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–º–Ω—è
     * @returns {Object|null} –ü–æ–∑–∏—Ü–∏—è {x, y} –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
     */
    getRandomValidPosition() {
        const { width, height } = this.scene.scale;
        const maxAttempts = 50;
        
        for (let attempt = 0; attempt < maxAttempts; attempt++) {
            const x = GeometryUtils.randomFloat(
                this.spawnMargin, 
                width - this.spawnMargin
            );
            const y = GeometryUtils.randomFloat(
                this.spawnMargin, 
                height - this.spawnMargin
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
            if (this.isPositionValid(x, y)) {
                return { x, y };
            }
        }
        
        console.warn(`üóø [StoneManager] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
        return null;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @returns {boolean} true –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
     */
    isPositionValid(x, y) {
        const minDistance = 100; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–º–Ω—è–º–∏
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–º–Ω–µ–π
        for (const stone of this.stones) {
            const distance = GeometryUtils.distance(x, y, stone.x, stone.y);
            if (distance < minDistance) {
                return false;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —è–π—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (this.scene.egg) {
            const distanceToEgg = GeometryUtils.distance(x, y, this.scene.egg.x, this.scene.egg.y);
            if (distanceToEgg < 150) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —è–π—Ü–∞
                return false;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—â–∏—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if (this.scene.defenses) {
            for (const defense of this.scene.defenses) {
                if (defense.defenseType !== 'stone') { // –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∫–∞–º–Ω–∏
                    const distance = GeometryUtils.distance(x, y, defense.x, defense.y);
                    if (distance < minDistance) {
                        return false;
                    }
                }
            }
        }
        
        return true;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–Ω–µ–π
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–Ω–µ–π
     */
    getActiveStones() {
        return this.stones.filter(stone => stone && stone.isAlive);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–º–Ω–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç —Ç–æ—á–∫–∏
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞
     * @param {number} radius - –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∫–∞–º–Ω–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ
     */
    getStonesInRadius(x, y, radius) {
        return this.getActiveStones().filter(stone => {
            const distance = GeometryUtils.distance(x, y, stone.x, stone.y);
            return distance <= radius;
        });
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–º–Ω—è
     * @param {Object} stone - –û–±—ä–µ–∫—Ç –∫–∞–º–Ω—è
     */
    removeStone(stone) {
        const index = this.stones.indexOf(stone);
        if (index !== -1) {
            this.stones.splice(index, 1);
            
            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–º–Ω—è
            this.scene.events.emit(EVENT_TYPES.STONE_DESTROYED, {
                stone: stone,
                index: index
            });
            
            console.log(`üóø [StoneManager] –ö–∞–º–µ–Ω—å —É–¥–∞–ª–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å: ${this.stones.length}`);
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–∞–º–Ω–µ–π
     */
    clearAllStones() {
        this.stones.forEach(stone => {
            if (stone && stone.destroy) {
                stone.destroy();
            }
        });
        this.stones = [];
        console.log(`üóø [StoneManager] –í—Å–µ –∫–∞–º–Ω–∏ –æ—á–∏—â–µ–Ω—ã`);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–∞–º–Ω–µ–π
     */
    update() {
        // –£–¥–∞–ª—è–µ–º —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã–µ –∫–∞–º–Ω–∏
        this.stones = this.stones.filter(stone => stone && stone.isAlive);
    }
}

