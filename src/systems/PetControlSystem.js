/**
 * –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–º –¥–ª—è Pet Thief
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫–∏ –ø–æ –º–∏—Ä—É –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ–º –ø–∏—Ç–æ–º—Ü–∞
 */

import { ISystem } from './interfaces/ISystem.js';
import { GeometryUtils } from '../utils/GeometryUtils.js';

export class PetControlSystem extends ISystem {
    constructor(scene, pet) {
        super(scene);
        
        this.scene = scene; // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ü–µ–Ω—É
        this.pet = pet;
        this.camera = scene.cameras.main;
        this.isEnabled = true;
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–≤–∏–∂–µ–Ω–∏—è
        this.moveSpeed = pet.getConfigValue ? pet.getConfigValue('speed', 150) : 150;
        this.stopDistance = 5; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        
        console.log('üéÆ [PetControlSystem] –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞
        this.setupInputHandlers();
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–≤–æ–¥–∞
     */
    setupInputHandlers() {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫/—Ç–∞–ø –ø–æ –º–∏—Ä—É
        this.scene.input.on('pointerdown', this.onPointerDown, this);
        
        console.log('üéÆ [PetControlSystem] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è
     * @param {Phaser.Input.Pointer} pointer 
     */
    onPointerDown(pointer) {
        if (!this.isEnabled || !this.pet || !this.pet.isAlive) {
            return;
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–∏—Ä–æ–≤—ã–µ
        const worldX = pointer.worldX;
        const worldY = pointer.worldY;
        
        console.log(`üéÆ [PetControlSystem] –ö–ª–∏–∫ –ø–æ –º–∏—Ä—É:`, { worldX, worldY });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–ª–∏–∫–Ω—É–ª–∏ –ª–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç
        const clickedObject = this.getObjectAtPosition(worldX, worldY);
        
        if (clickedObject) {
            this.handleObjectClick(clickedObject);
        } else {
            // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –∫ —Ç–æ—á–∫–µ –∫–ª–∏–∫–∞
            this.moveToPosition(worldX, worldY);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
     * @param {number} worldX 
     * @param {number} worldY 
     * @returns {Phaser.GameObjects.GameObject|null}
     */
    getObjectAtPosition(worldX, worldY) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª–µ–º
        const objects = this.scene.children.list.filter(obj => {
            if (!obj.getData) return false;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –Ω–∞—Å —Ç–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤
            const isCoin = obj.getData('isCoin');
            const isLockpick = obj.getData('isLockpick');
            const isHouse = obj.getData('isHouse');
            const isPlayerHouse = obj.getData('isPlayerHouse');
            
            if (!isCoin && !isLockpick && !isHouse && !isPlayerHouse) return false;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –≤ —Ä–∞–¥–∏—É—Å–µ –∫–ª–∏–∫–∞
            const distance = GeometryUtils.distance(obj.x, obj.y, worldX, worldY);
            return distance < 30; // –†–∞–¥–∏—É—Å –∫–ª–∏–∫–∞
        });
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –æ–±—ä–µ–∫—Ç
        if (objects.length > 0) {
            objects.sort((a, b) => {
                const distA = GeometryUtils.distance(a.x, a.y, worldX, worldY);
                const distB = GeometryUtils.distance(b.x, b.y, worldX, worldY);
                return distA - distB;
            });
            return objects[0];
        }
        
        return null;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç
     * @param {Phaser.GameObjects.GameObject} object 
     */
    handleObjectClick(object) {
        const isCoin = object.getData('isCoin');
        const isLockpick = object.getData('isLockpick');
        const isHouse = object.getData('isHouse');
        const isPlayerHouse = object.getData('isPlayerHouse');
        
        if (isCoin) {
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –∫ –º–æ–Ω–µ—Ç–µ –¥–ª—è —Å–±–æ—Ä–∞
            console.log('üí∞ [PetControlSystem] –ö–ª–∏–∫ –Ω–∞ –º–æ–Ω–µ—Ç—É');
            this.moveToAndCollect(object);
        } else if (isLockpick) {
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –∫ –æ—Ç–º—ã—á–∫–µ –¥–ª—è —Å–±–æ—Ä–∞
            console.log('üîß [PetControlSystem] –ö–ª–∏–∫ –Ω–∞ –æ—Ç–º—ã—á–∫—É');
            this.moveToAndCollect(object);
        } else if (isHouse) {
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –∫ –¥–æ–º—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            console.log('üè† [PetControlSystem] –ö–ª–∏–∫ –Ω–∞ –¥–æ–º');
            this.moveToAndInteract(object);
        } else if (isPlayerHouse) {
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –∫ —Å–≤–æ–µ–º—É –¥–æ–º—É
            console.log('üè° [PetControlSystem] –ö–ª–∏–∫ –Ω–∞ —Å–≤–æ–π –¥–æ–º');
            this.moveToPosition(object.x, object.y);
        }
    }
    
    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫ –ø–æ–∑–∏—Ü–∏–∏
     * @param {number} x 
     * @param {number} y 
     */
    moveToPosition(x, y) {
        if (!this.pet || !this.pet.isAlive) return;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        this.pet.moveTo(x, y);
        
        console.log(`üêæ [PetControlSystem] –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫ –ø–æ–∑–∏—Ü–∏–∏:`, { x, y });
    }
    
    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫ –æ–±—ä–µ–∫—Ç—É –¥–ª—è —Å–±–æ—Ä–∞
     * @param {Phaser.GameObjects.GameObject} object 
     */
    moveToAndCollect(object) {
        this.moveToPosition(object.x, object.y);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–±–æ—Ä–∞
        this.targetObject = object;
        this.targetAction = 'collect';
    }
    
    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫ –æ–±—ä–µ–∫—Ç—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
     * @param {Phaser.GameObjects.GameObject} object 
     */
    moveToAndInteract(object) {
        this.moveToPosition(object.x, object.y);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        this.targetObject = object;
        this.targetAction = 'interact';
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä)
     * @param {number} time 
     * @param {number} delta 
     */
    update(time, delta) {
        if (!this.pet || !this.pet.isAlive || !this.isEnabled) {
            return;
        }
        
        // –ï—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü –¥–≤–∏–∂–µ—Ç—Å—è
        if (this.pet.isMoving && this.pet.targetPosition) {
            this.updateMovement(time, delta);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
     * @param {number} time 
     * @param {number} delta 
     */
    updateMovement(time, delta) {
        const target = this.pet.targetPosition;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
        const dx = target.x - this.pet.x;
        const dy = target.y - this.pet.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Ü–µ–ª–∏
        if (distance < this.stopDistance) {
            this.pet.stopMovement();
            this.onTargetReached();
            return;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        const dirX = dx / distance;
        const dirY = dy / distance;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
        const velocityX = dirX * this.moveSpeed;
        const velocityY = dirY * this.moveSpeed;
        
        if (this.pet.physicsBody) {
            this.pet.physicsBody.setVelocity(velocityX, velocityY);
        }
        
        // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—É –¥–≤–∏–∂–µ–Ω–∏—è
        const angle = Math.atan2(dirY, dirX);
        this.pet.setRotation(angle);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
     */
    onTargetReached() {
        console.log('üéØ [PetControlSystem] –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞');
        
        this.scene.events.emit('pet:targetReached', {
            position: this.pet.targetPosition
        });
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç –∏ –¥–µ–π—Å—Ç–≤–∏–µ
        if (this.targetObject && this.targetAction) {
            this.executeAction();
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç
        this.targetObject = null;
        this.targetAction = null;
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ü–µ–ª–µ–≤—ã–º –æ–±—ä–µ–∫—Ç–æ–º
     */
    executeAction() {
        if (!this.targetObject) return;
        
        if (this.targetAction === 'collect') {
            this.collectObject(this.targetObject);
        } else if (this.targetAction === 'interact') {
            this.interactWithObject(this.targetObject);
        }
    }
    
    /**
     * –°–æ–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç (–º–æ–Ω–µ—Ç–∞, –ø—Ä–µ–¥–º–µ—Ç)
     * @param {Phaser.GameObjects.GameObject} object 
     */
    collectObject(object) {
        const isCoin = object.getData('isCoin');
        const isLockpick = object.getData('isLockpick');
        const isCollected = object.getData('collected');
        
        if (isCoin && !isCollected) {
            // –°–æ–±–∏—Ä–∞–µ–º –º–æ–Ω–µ—Ç—É
            const coinData = object.getData('coinData');
            this.pet.addCoins(coinData.value || 1);
            
            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–æ–±—Ä–∞–Ω–Ω—É—é
            object.setData('collected', true);
            
            // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å–±–æ—Ä–∞
            this.scene.tweens.add({
                targets: object,
                alpha: 0,
                scale: 0.5,
                duration: 200,
                onComplete: () => {
                    object.destroy();
                }
            });
            
            console.log('üí∞ [PetControlSystem] –ú–æ–Ω–µ—Ç–∞ —Å–æ–±—Ä–∞–Ω–∞');
        } else if (isLockpick && !isCollected) {
            // –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–º—ã—á–∫—É
            const lockpickData = object.getData('lockpickData');
            this.pet.addLockpicks(1);
            
            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–æ–±—Ä–∞–Ω–Ω—É—é
            object.setData('collected', true);
            lockpickData.collected = true;
            
            // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å–±–æ—Ä–∞
            this.scene.tweens.add({
                targets: object,
                alpha: 0,
                scale: 2,
                angle: 720,
                duration: 300,
                onComplete: () => {
                    object.destroy();
                }
            });
            
            console.log('üîß [PetControlSystem] –û—Ç–º—ã—á–∫–∞ —Å–æ–±—Ä–∞–Ω–∞');
        }
    }
    
    /**
     * –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –æ–±—ä–µ–∫—Ç–æ–º (–¥–æ–º, NPC)
     * @param {Phaser.GameObjects.GameObject} object 
     */
    interactWithObject(object) {
        const isHouse = object.getData('isHouse');
        
        if (isHouse) {
            const houseData = object.getData('houseData');
            console.log('üè† [PetControlSystem] –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–æ–º–æ–º:', houseData.ownerName);
            
            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∞ –≤ –¥–æ–º
            this.scene.events.emit('pet:enterHouse', {
                house: houseData
            });
            
            // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –¥–æ–º–∞
        }
    }
    
    /**
     * –í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    enable() {
        this.isEnabled = true;
        console.log('üéÆ [PetControlSystem] –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞');
    }
    
    /**
     * –í—ã–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    disable() {
        this.isEnabled = false;
        console.log('üéÆ [PetControlSystem] –°–∏—Å—Ç–µ–º–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞');
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    destroy() {
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞
        if (this.scene && this.scene.input) {
            this.scene.input.off('pointerdown', this.onPointerDown, this);
        }
        
        this.pet = null;
        this.camera = null;
        this.targetObject = null;
        
        console.log('üéÆ [PetControlSystem] –°–∏—Å—Ç–µ–º–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞');
    }
}

