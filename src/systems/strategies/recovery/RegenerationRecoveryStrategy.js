import { RecoveryStrategy } from './RecoveryStrategy.js';

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è
 * –í—Ä–∞–≥ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞—Ç—É—Ö–∞–Ω–∏—è
 */
export class RegenerationRecoveryStrategy extends RecoveryStrategy {
    constructor(gameObject, config) {
        super(gameObject, config);
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        this.regenerationRate = config.get('regenerationRate', 0.5); // HP –∑–∞ –∫–∞–¥—Ä
        this.regenerationDelay = config.get('regenerationDelay', 2000); // –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π (–º—Å)
        this.regenerationCap = config.get('regenerationCap', 1.0); // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        this.regenerationDecay = config.get('regenerationDecay', 0.1); // –∑–∞—Ç—É—Ö–∞–Ω–∏–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ –∫–∞–¥—Ä
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        this.currentRegenerationLevel = this.regenerationCap; // —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        this.regenerationStartTime = 0;
        this.lastRegenerationTime = 0;
        this.isRegenerating = false;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.initializeRegeneration();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    initializeRegeneration() {
        const currentTime = this.gameObject.scene ? this.gameObject.scene.time.now : Date.now();
        this.regenerationStartTime = currentTime + this.regenerationDelay;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    update(time, delta) {
        if (!this.isActive || !this.gameObject || !this.gameObject.isAlive) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∞
        if (time < this.regenerationStartTime) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
        if (!this.canRegenerate()) {
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–¥—Ä–æ–≤ (–∞ –Ω–µ –≤—Ä–µ–º–µ–Ω–∏)
        // regenerationRate —Ç–µ–ø–µ—Ä—å –æ–∑–Ω–∞—á–∞–µ—Ç HP –∑–∞ –∫–∞–¥—Ä, –∞ –Ω–µ HP –∑–∞ —Å–µ–∫—É–Ω–¥—É
        const regenerationAmount = this.regenerationRate * this.currentRegenerationLevel;
        
        if (regenerationAmount > 0) {
            this.performRegeneration(regenerationAmount, time);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∑–∞—Ç—É—Ö–∞–Ω–∏–µ)
        this.updateRegenerationLevel(delta);
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @param {number} amount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    performRegeneration(amount, time) {
        const success = this.recoverHealth(amount, time);
        
        if (success) {
            this.lastRegenerationTime = time;
            this.isRegenerating = true;
            
            // –ü–ª–∞–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            this.playRegenerationEffect();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –æ–±—ä–µ–∫—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
     * @returns {boolean}
     */
    canRegenerate() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
        if (!super.canRecover()) {
            this.isRegenerating = false;
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if (this.currentRegenerationLevel <= 0) {
            this.isRegenerating = false;
            return false;
        }

        return true;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∑–∞—Ç—É—Ö–∞–Ω–∏–µ)
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    updateRegenerationLevel(delta) {
        // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞–¥—Ä–∞–º (–∞ –Ω–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        // regenerationDecay —Ç–µ–ø–µ—Ä—å –æ–∑–Ω–∞—á–∞–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞ –∫–∞–¥—Ä
        this.currentRegenerationLevel = Math.max(0, this.currentRegenerationLevel - this.regenerationDecay);
        
        // –ï—Å–ª–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        if (this.currentRegenerationLevel <= 0) {
            this.isRegenerating = false;
        }
    }

    /**
     * –≠—Ñ—Ñ–µ–∫—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    playRegenerationEffect() {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –º—è–≥–∫–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
        if (this.gameObject && this.gameObject.scene) {
            const originalAlpha = this.gameObject.alpha;
            
            // –ü–ª–∞–≤–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –∑–µ–ª–µ–Ω—ã–º
            this.gameObject.setTint(0x88ff88);
            this.gameObject.setAlpha(Math.min(1.0, originalAlpha + 0.1));
            
            this.gameObject.scene.time.delayedCall(150, () => {
                if (this.gameObject) {
                    this.gameObject.clearTint();
                    this.gameObject.setAlpha(originalAlpha);
                }
            });
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @param {number} amount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
     */
    restoreRegenerationLevel(amount = 1.0) {
        this.currentRegenerationLevel = Math.min(this.regenerationCap, this.currentRegenerationLevel + amount);
        console.log(`üíö [RegenerationRecoveryStrategy] –£—Ä–æ–≤–µ–Ω—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ ${this.currentRegenerationLevel.toFixed(2)}`);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @param {number} level - –£—Ä–æ–≤–µ–Ω—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0 - 1.0)
     */
    setRegenerationLevel(level) {
        this.currentRegenerationLevel = Math.max(0, Math.min(this.regenerationCap, level));
        console.log(`üíö [RegenerationRecoveryStrategy] –£—Ä–æ–≤–µ–Ω—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${this.currentRegenerationLevel.toFixed(2)}`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @returns {Object}
     */
    getRegenerationInfo() {
        const baseState = this.getRecoveryState();
        return {
            ...baseState,
            regenerationRate: this.regenerationRate,
            regenerationDelay: this.regenerationDelay,
            regenerationCap: this.regenerationCap,
            regenerationDecay: this.regenerationDecay,
            currentRegenerationLevel: this.currentRegenerationLevel,
            isRegenerating: this.isRegenerating,
            effectiveRegenerationRate: this.regenerationRate * this.currentRegenerationLevel
        };
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @param {number} rate - –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (HP –∑–∞ –∫–∞–¥—Ä)
     */
    setRegenerationRate(rate) {
        this.regenerationRate = Math.max(0, rate);
        console.log(`üíö [RegenerationRecoveryStrategy] –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${this.regenerationRate} HP –∑–∞ –∫–∞–¥—Ä`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞ (–º–æ–∂–µ—Ç —Å–Ω–∏–∂–∞—Ç—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é)
     * @param {number} damage - –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω
     */
    onDamageReceived(damage) {
        // –£—Ä–æ–Ω –º–æ–∂–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞—Ç—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        const damageReduction = Math.min(0.5, damage / this.gameObject.maxHealth * 2);
        this.currentRegenerationLevel = Math.max(0, this.currentRegenerationLevel - damageReduction);
        
        console.log(`üíö [RegenerationRecoveryStrategy] –£—Ä–æ–Ω ${damage} —Å–Ω–∏–∑–∏–ª —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞ ${damageReduction.toFixed(2)}`);
    }
}
