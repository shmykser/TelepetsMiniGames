/**
 * –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
 * –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
 */
export class RecoveryStrategy {
    constructor(gameObject, config) {
        this.gameObject = gameObject;
        this.config = config;
        this.isActive = false;
        this.lastRecoveryTime = 0;
        this.recoveryCooldown = config.get('recoveryCooldown', 1000);
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        this.maxRecovery = config.get('maxRecovery', 0); // 0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        this.totalRecovered = 0; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
        
        this.initialize();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    initialize() {
        this.isActive = true;
        console.log(`üíö [RecoveryStrategy] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è ${this.gameObject.enemyType || '–æ–±—ä–µ–∫—Ç'}`);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    update(time, delta) {
        if (!this.isActive || !this.gameObject || !this.gameObject.isAlive) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if (time - this.lastRecoveryTime < this.recoveryCooldown) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ
        if (this.canRecover()) {
            this.performRecovery(time, delta);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –æ–±—ä–µ–∫—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ
     * @returns {boolean}
     */
    canRecover() {
        if (!this.gameObject || !this.gameObject.isAlive) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥ –ª–∏ –æ–±—ä–µ–∫—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if (this.maxRecovery > 0 && this.totalRecovered >= this.maxRecovery) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª–Ω–æ–µ –ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –∑–¥–æ—Ä–æ–≤—å–µ
        if (this.gameObject.health >= this.gameObject.maxHealth) {
            return false;
        }

        return true;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    performRecovery(time, delta) {
        // –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
        console.warn(`‚ö†Ô∏è [RecoveryStrategy] performRecovery –Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è ${this.constructor.name}`);
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
     * @param {number} amount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    recoverHealth(amount, time) {
        if (!this.gameObject || !this.gameObject.isAlive) {
            return false;
        }

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å–µ–º
        const maxRecoverable = this.gameObject.maxHealth - this.gameObject.health;
        const actualRecovery = Math.min(amount, maxRecoverable);
        
        if (actualRecovery <= 0) {
            return false;
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        this.gameObject.health = Math.min(this.gameObject.health + actualRecovery, this.gameObject.maxHealth);
        this.totalRecovered += actualRecovery;
        this.lastRecoveryTime = time;

        console.log(`üíö [RecoveryStrategy] ${this.gameObject.enemyType || '–æ–±—ä–µ–∫—Ç'} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª ${actualRecovery.toFixed(1)} HP (${this.gameObject.health.toFixed(1)}/${this.gameObject.maxHealth})`);

        // –≠—Ñ—Ñ–µ–∫—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        this.playRecoveryEffect();

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
        this.onRecoveryPerformed(actualRecovery, time);

        return true;
    }

    /**
     * –≠—Ñ—Ñ–µ–∫—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
     */
    playRecoveryEffect() {
        // –ë–∞–∑–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–ª—å—Ñ—ã –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        if (this.gameObject && this.gameObject.scene) {
            const originalAlpha = this.gameObject.alpha;
            this.gameObject.setAlpha(0.7);
            
            this.gameObject.scene.time.delayedCall(200, () => {
                if (this.gameObject) {
                    this.gameObject.setAlpha(originalAlpha);
                }
            });
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param {number} amount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    onRecoveryPerformed(amount, time) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π
        if (this.gameObject && this.gameObject.scene && this.gameObject.scene.events) {
            this.gameObject.scene.events.emit('recovery:healthRestored', {
                gameObject: this.gameObject,
                amount: amount,
                totalRecovered: this.totalRecovered,
                time: time
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {Object}
     */
    getRecoveryState() {
        return {
            isActive: this.isActive,
            totalRecovered: this.totalRecovered,
            maxRecovery: this.maxRecovery,
            lastRecoveryTime: this.lastRecoveryTime,
            canRecover: this.canRecover(),
            healthPercentage: this.gameObject ? (this.gameObject.health / this.gameObject.maxHealth * 100) : 0
        };
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    activate() {
        this.isActive = true;
        console.log(`üíö [RecoveryStrategy] –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è ${this.gameObject.enemyType || '–æ–±—ä–µ–∫—Ç'}`);
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    deactivate() {
        this.isActive = false;
        console.log(`üíö [RecoveryStrategy] –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è ${this.gameObject.enemyType || '–æ–±—ä–µ–∫—Ç'}`);
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    destroy() {
        this.deactivate();
        this.gameObject = null;
        this.config = null;
    }
}
