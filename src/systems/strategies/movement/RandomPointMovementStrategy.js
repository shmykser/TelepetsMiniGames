import { GeometryUtils } from '../../../utils/GeometryUtils.js';

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Å–ª—É—á–∞–π–Ω—ã–º —Ç–æ—á–∫–∞–º (–∫—Ä–æ—Ç)
 * –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ—á–∫–∏ –Ω–∞ –ø–æ–ª–µ –∏ –¥–≤–∏–∂–µ—Ç—Å—è –∫ –Ω–∏–º
 */
export class RandomPointMovementStrategy {
    constructor(gameObject, config) {
        this.gameObject = gameObject;
        this.config = config;
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
        const movementConfig = config.get('movement', {});
        
        this.speed = movementConfig.speed || config.get('speed', 80);
        this.rotationSpeed = movementConfig.rotationSpeed || config.get('rotationSpeed', 0.12);
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±–æ—Ä–∞ —Ç–æ—á–µ–∫
        this.searchRadius = config.get('searchRadius', 200); // –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Ç–æ—á–µ–∫
        this.minDistance = config.get('minDistance', 50); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏
        
        // –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å
        this.currentTarget = null;
        this.targetPoint = null; // –ù–µ–≤–∏–¥–∏–º—ã–π –æ–±—ä–µ–∫—Ç-—Ü–µ–ª—å
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.isMoving = false;
        this.lastTargetTime = 0;
        this.targetCheckInterval = 10000; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª—å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        
        // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫—Ä–æ—Ç–∞
        this.isInitialized = false;
        this.initializationDelay = 100; // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Ü–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∫—Ä–æ—Ç–∞
        this.scheduleInitialization();
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
     */
    scheduleInitialization() {
        // –î–ª—è –∫—Ä–æ—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–µ–ª—Å–∞ —É—Å–ø–µ–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        if (this.gameObject.enemyType === 'mole') {
            setTimeout(() => {
                this.initializeFirstTarget();
                this.isInitialized = true;
            }, this.initializationDelay);
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –≤—Ä–∞–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
            this.initializeFirstTarget();
            this.isInitialized = true;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π —Ü–µ–ª–∏
     */
    initializeFirstTarget() {
        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        const currentTime = this.gameObject.scene ? this.gameObject.scene.time.now : Date.now();
        this.selectNewTarget(currentTime);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    update(time, delta) {
        // –õ–æ–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–æ—Ç–∞
        if (!this.isInitialized) {
            return;
        }
        
        if (this.isUnderground()) {
            if (!this.currentTarget || this.isTargetReached() || 
                time - this.lastTargetTime > this.targetCheckInterval) {
                this.selectNewTarget(time);
            }
            
            if (this.currentTarget) {
                this.moveToTarget();
                
                if (this.isTargetReached()) {
                    this.onTargetReached(time);
                }
            }
        } else {
            this.stopMovement();
        }
    }

    /**
     * –í—ã–±–æ—Ä –Ω–æ–≤–æ–π —Å–ª—É—á–∞–π–Ω–æ–π —Ü–µ–ª–∏
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    selectNewTarget(time) {
        if (!this.gameObject.scene) return;

        const newTarget = this.findValidRandomPoint();
        if (newTarget) {
            // –ü—Ä—è–º–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å, –Ω–µ –≤—ã–∑—ã–≤–∞—è setTarget —Å–Ω–æ–≤–∞
            this.currentTarget = newTarget;
            this.lastTargetTime = time;
            this.isMoving = true;
            console.log(`üêÄ [RandomPointMovementStrategy] –í—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ª—É—á–∞–π–Ω–∞—è —Ü–µ–ª—å: (${newTarget.x.toFixed(1)}, ${newTarget.y.toFixed(1)})`);
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –≤–∞–ª–∏–¥–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ–π —Ç–æ—á–∫–∏
     * @returns {Object|null} –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –∏–ª–∏ null
     */
    findValidRandomPoint() {
        if (!this.gameObject.scene) return null;

        const scene = this.gameObject.scene;
        const camera = scene.cameras.main;
        const sceneWidth = camera.width;
        const sceneHeight = camera.height;
        const margin = 50; // –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤ —ç–∫—Ä–∞–Ω–∞
        
        const currentX = this.gameObject.x;
        const currentY = this.gameObject.y;
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—É—é —Ç–æ—á–∫—É (–º–∞–∫—Å–∏–º—É–º 10 –ø–æ–ø—ã—Ç–æ–∫)
        for (let attempt = 0; attempt < 10; attempt++) {
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            const angle = Math.random() * Math.PI * 2;
            const distance = this.minDistance + Math.random() * (this.searchRadius - this.minDistance);
            
            const targetX = currentX + Math.cos(angle) * distance;
            const targetY = currentY + Math.sin(angle) * distance;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
            if (targetX < margin || targetX > sceneWidth - margin || 
                targetY < margin || targetY > sceneHeight - margin) {
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—á–∫–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ –∫–æ–ª–ª–∏–∑–∏–π)
            if (this.isPointValid(targetX, targetY)) {
                return { x: targetX, y: targetY };
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∞–ª–∏–¥–Ω—É—é —Ç–æ—á–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—á–∫—É –≤ —Ü–µ–Ω—Ç—Ä–µ —Å—Ü–µ–Ω—ã
        return { x: sceneWidth / 2, y: sceneHeight / 2 };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ—á–∫–∏
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @returns {boolean}
     */
    isPointValid(x, y) {
        if (!this.gameObject.scene) return true;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏
        const obstacles = this.gameObject.scene.children.list.filter(obj => 
            obj.isObstacle || obj.isProtection || obj.body || obj.physicsBody
        );
        
        for (const obstacle of obstacles) {
            const distance = GeometryUtils.distance(x, y, obstacle.x, obstacle.y);
            const obstacleRadius = obstacle.width ? obstacle.width / 2 : 30;
            
            if (distance < obstacleRadius + 20) { // +20 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                return false;
            }
        }
        
        return true;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
     * @param {Object} target - –¶–µ–ª—å {x, y}
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    setTarget(target, time) {
        // RandomPointMovementStrategy –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≤–Ω–µ—à–Ω–∏–µ —Ü–µ–ª–∏
        // –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ —Å–≤–æ–∏–º–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
        console.log(`üêÄ [RandomPointMovementStrategy] –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω—é—é —Ü–µ–ª—å, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É`);
        
        // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—â–µ –Ω–µ—Ç —Ü–µ–ª–∏, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é
        if (!this.currentTarget) {
            this.selectNewTarget(time || Date.now());
        }
    }

    /**
     * –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
     */
    moveToTarget() {
        if (!this.currentTarget) return;

        const dx = this.currentTarget.x - this.gameObject.x;
        const dy = this.currentTarget.y - this.gameObject.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏
        if (distance < 10) {
            this.isMoving = false;
            return;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
        const direction = GeometryUtils.normalize(dx, dy);
        const velocityX = direction.x * this.speed;
        const velocityY = direction.y * this.speed;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
        if (this.gameObject.body) {
            this.gameObject.body.setVelocity(velocityX, velocityY);
        } else if (this.gameObject.physicsBody) {
            this.gameObject.physicsBody.setVelocity(velocityX, velocityY);
        }
        
        // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç
        this.rotateToDirection(direction);
    }

    /**
     * –ü–æ–≤–æ—Ä–æ—Ç –æ–±—ä–µ–∫—Ç–∞ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
     * @param {Object} direction - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {x, y}
     */
    rotateToDirection(direction) {
        const targetAngle = Math.atan2(direction.y, direction.x);
        const currentAngle = this.gameObject.rotation;
        
        // –ü–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç
        const angleDiff = targetAngle - currentAngle;
        const normalizedDiff = ((angleDiff + Math.PI) % (Math.PI * 2)) - Math.PI;
        
        this.gameObject.rotation = currentAngle + normalizedDiff * this.rotationSpeed;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —Ü–µ–ª—å
     * @returns {boolean}
     */
    isTargetReached() {
        if (!this.currentTarget) return false;
        
        const distance = GeometryUtils.distance(
            this.gameObject.x, 
            this.gameObject.y, 
            this.currentTarget.x, 
            this.currentTarget.y
        );
        
        return distance < 15; // –†–∞–¥–∏—É—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è
     * @returns {number}
     */
    getSpeed() {
        return this.speed;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
     * @param {number} speed - –°–∫–æ—Ä–æ—Å—Ç—å
     */
    setSpeed(speed) {
        this.speed = speed;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥ –∑–µ–º–ª–µ–π –ª–∏ –∫—Ä–æ—Ç
     * @returns {boolean}
     */
    isUnderground() {
        if (this.gameObject && this.gameObject._aiCoordinator && this.gameObject._aiCoordinator.stealthStrategy) {
            return this.gameObject._aiCoordinator.stealthStrategy.isUndergroundNow();
        }
        return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–¥ –∑–µ–º–ª–µ–π
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    stopMovement() {
        if (this.gameObject.body) {
            this.gameObject.body.setVelocity(0, 0);
        } else if (this.gameObject.physicsBody) {
            this.gameObject.physicsBody.setVelocity(0, 0);
        }
        this.isMoving = false;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    onTargetReached(time) {
        console.log(`üêÄ [RandomPointMovementStrategy] –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å, —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —Å—Ç–µ–ª—Å–∞`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º AICoordinator –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏
        if (this.gameObject && this.gameObject._aiCoordinator) {
            // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –∫—Ä–æ—Ç –¥–æ—Å—Ç–∏–≥ —Ç–æ—á–∫–∏ –∏ –¥–æ–ª–∂–µ–Ω –≤—ã–π—Ç–∏ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
            this.gameObject._aiCoordinator.onTargetReached(time);
        }
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    destroy() {
        this.currentTarget = null;
        this.targetPoint = null;
        this.gameObject = null;
        this.config = null;
    }
}
