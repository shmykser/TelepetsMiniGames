/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä—ã–≥–∞—é—â–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è (–±–ª–æ—Ö–∞)
 * –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä—ã–∂–∫–∏ —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏ –º–µ–∂–¥—É –Ω–∏–º–∏
 */
export class JumpingMovementStrategy {
    constructor(gameObject, config) {
        this.gameObject = gameObject;
        this.config = config;
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
        const movementConfig = config.get('movement', {});
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–≤–∏–∂–µ–Ω–∏—è
        this.speed = movementConfig.speed || config.get('speed', 150);
        this.rotationSpeed = movementConfig.rotationSpeed || config.get('rotationSpeed', 0.2);
        this.attackRange = movementConfig.attackRange || config.get('attackRange', 30);
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä—ã–∂–∫–æ–≤
        this.jumpDuration = movementConfig.jumpDuration || config.get('jumpDuration', 200);
        this.restDuration = movementConfig.restDuration || config.get('restDuration', 500);
        this.jumpHeight = movementConfig.jumpHeight || config.get('jumpHeight', 30);
        this.jumpArc = movementConfig.jumpArc || config.get('jumpArc', 0.6);
        this.mass = movementConfig.mass || config.get('mass', 0.5);
        this.bounce = movementConfig.bounce || config.get('bounce', 0.3);
        this.drag = movementConfig.drag || config.get('drag', 0.98);
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        this.currentTarget = null;
        this.isJumping = false;
        this.isResting = false;
        this.wasJumping = false;
        this.wasResting = false;
        this.jumpStartTime = 0;
        this.restStartTime = 0;
        this.jumpStartPosition = { x: 0, y: 0 };
        this.jumpTargetPosition = { x: 0, y: 0 };
        this.jumpDirection = { x: 0, y: 0 };
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–∑–∏–∫—É
        this.setupPhysics();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–∑–∏–∫–∏ Phaser
     */
    setupPhysics() {
        if (this.gameObject.body) {
            this.gameObject.body.setCollideWorldBounds(true);
            this.gameObject.body.setBounce(this.bounce);
            this.gameObject.body.setDrag(this.drag);
            this.gameObject.body.setMass(this.mass);
            this.gameObject.body.setMaxVelocity(this.speed);
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ –¥–ª—è –±–ª–æ—Ö–∏
            if (this.gameObject.enemyType === 'flea') {
                console.log(`ü¶ó JUMPING: –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ñ–∏–∑–∏–∫–∞, —Å–∫–æ—Ä–æ—Å—Ç—å: ${this.speed}, –º–∞—Å—Å–∞: ${this.mass}, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: ${this.drag}`);
            }
        } else {
            console.error(`ü¶ó JUMPING: –£ –æ–±—ä–µ–∫—Ç–∞ ${this.gameObject.enemyType} –Ω–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–ª–∞!`);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    update(time, delta) {
        if (!this.currentTarget) {
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ –¥–ª—è –±–ª–æ—Ö–∏
            if (this.gameObject.enemyType === 'flea' && Date.now() % 2000 < 100) {
                console.log(`ü¶ó JUMPING: –ù–µ—Ç —Ü–µ–ª–∏, –≤—Ä–∞–≥: ${this.gameObject.enemyType}`);
            }
            return;
        }

        const deltaSeconds = delta / 1000;
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ –¥–ª—è –±–ª–æ—Ö–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
        if (this.gameObject.enemyType === 'flea' && this.isJumping && !this.wasJumping) {
            console.log(`ü¶ó JUMPING: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä—ã–∂–æ–∫`);
        }
        if (this.gameObject.enemyType === 'flea' && this.isResting && !this.wasResting) {
            console.log(`ü¶ó JUMPING: –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–¥—ã—Ö`);
        }
        this.wasJumping = this.isJumping;
        this.wasResting = this.isResting;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä—ã–∂–∫–∞
        this.updateJumpState(time);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—ã–∂–æ–∫ –∏–ª–∏ –æ—Ç–¥—ã—Ö
        if (this.isJumping) {
            this.performJump(time, deltaSeconds);
        } else if (this.isResting) {
            this.performRest(time, deltaSeconds);
        } else {
            this.prepareNextJump();
        }
        
        // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø—Ä–∞–π—Ç –∫ —Ü–µ–ª–∏
        this.rotateToTarget();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä—ã–∂–∫–∞
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    updateJumpState(time) {
        if (this.isJumping) {
            const jumpElapsed = time - this.jumpStartTime;
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ –¥–ª—è –±–ª–æ—Ö–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏)
            if (this.gameObject.enemyType === 'flea' && jumpElapsed >= this.jumpDuration - 50) {
                console.log(`ü¶ó JUMPING: –ü—Ä—ã–∂–æ–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ ${this.jumpDuration - jumpElapsed}–º—Å`);
            }
            
            if (jumpElapsed >= this.jumpDuration) {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä—ã–∂–æ–∫
                this.isJumping = false;
                this.isResting = true;
                this.restStartTime = time;
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
                if (this.gameObject.body) {
                    this.gameObject.body.setVelocity(0, 0);
                }
                
                // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ –¥–ª—è –±–ª–æ—Ö–∏
                if (this.gameObject.enemyType === 'flea') {
                    console.log(`ü¶ó JUMPING: –ü—Ä—ã–∂–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç–¥—ã—Ö`);
                }
            }
        } else if (this.isResting) {
            const restElapsed = time - this.restStartTime;
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ –¥–ª—è –±–ª–æ—Ö–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏)
            if (this.gameObject.enemyType === 'flea' && restElapsed >= this.restDuration - 50) {
                console.log(`ü¶ó JUMPING: –û—Ç–¥—ã—Ö –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ ${this.restDuration - restElapsed}–º—Å`);
            }
            
            if (restElapsed >= this.restDuration) {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–¥—ã—Ö
                this.isResting = false;
                
                // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ –¥–ª—è –±–ª–æ—Ö–∏
                if (this.gameObject.enemyType === 'flea') {
                    console.log(`ü¶ó JUMPING: –û—Ç–¥—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –≥–æ—Ç–æ–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä—ã–∂–æ–∫`);
                }
            }
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä—ã–∂–∫–∞
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} deltaSeconds - –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     */
    performJump(time, deltaSeconds) {
        if (!this.gameObject.body) return;
        
        const jumpProgress = (time - this.jumpStartTime) / this.jumpDuration;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
        const dx = this.jumpTargetPosition.x - this.jumpStartPosition.x;
        const dy = this.jumpTargetPosition.y - this.jumpStartPosition.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance > 0) {
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            const dirX = dx / distance;
            const dirY = dy / distance;
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä—ã–∂–∫–∞
            const speedMultiplier = this.easeInOutQuad(jumpProgress);
            const currentSpeed = this.speed * speedMultiplier;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ñ–∏–∑–∏–∫—É
            this.gameObject.body.setVelocity(
                dirX * currentSpeed,
                dirY * currentSpeed
            );
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ –¥–ª—è –±–ª–æ—Ö–∏ (—Ç–æ–ª—å–∫–æ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø—Ä—ã–∂–∫–∞)
            if (this.gameObject.enemyType === 'flea' && Math.floor(jumpProgress * 10) === 5) {
                console.log(`ü¶ó JUMPING: –ü—Ä—ã–∂–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å: ${(jumpProgress * 100).toFixed(1)}%, —Å–∫–æ—Ä–æ—Å—Ç—å: ${currentSpeed.toFixed(1)}`);
            }
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–¥—ã—Ö–∞
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} deltaSeconds - –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     */
    performRest(time, deltaSeconds) {
        // –í–æ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –±–ª–æ—Ö–∞ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏—è
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä—ã–∂–∫–∞
     */
    prepareNextJump() {
        if (!this.currentTarget) return;

        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
        const dx = this.currentTarget.x - this.gameObject.x;
        const dy = this.currentTarget.y - this.gameObject.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance === 0) return;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        this.jumpDirection = {
            x: dx / distance,
            y: dy / distance
        };
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä—ã–∂–∫–∞
        // speed –≤ –ø–∏–∫—Å–µ–ª—è—Ö/—Å–µ–∫—É–Ω–¥—É, jumpDuration –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        const jumpDistance = this.speed * (this.jumpDuration / 1000);
        this.jumpTargetPosition = {
            x: this.gameObject.x + this.jumpDirection.x * jumpDistance,
            y: this.gameObject.y + this.jumpDirection.y * jumpDistance
        };
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        this.jumpStartPosition = {
            x: this.gameObject.x,
            y: this.gameObject.y
        };
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä—ã–∂–æ–∫
        this.isJumping = true;
        this.jumpStartTime = this.gameObject.scene.time.now;
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ –¥–ª—è –±–ª–æ—Ö–∏
        if (this.gameObject.enemyType === 'flea') {
            console.log(`ü¶ó JUMPING: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä—ã–∂–æ–∫ –∫ (${this.jumpTargetPosition.x.toFixed(1)}, ${this.jumpTargetPosition.y.toFixed(1)}), isJumping: ${this.isJumping}, –≤—Ä–µ–º—è: ${this.jumpStartTime}`);
        }
    }

    /**
     * –ü–æ–≤–æ—Ä–æ—Ç —Å–ø—Ä–∞–π—Ç–∞ –∫ —Ü–µ–ª–∏
     */
    rotateToTarget() {
        if (!this.currentTarget) return;

        const dx = this.currentTarget.x - this.gameObject.x;
        const dy = this.currentTarget.y - this.gameObject.y;
        
        if (dx === 0 && dy === 0) return;

        const targetAngle = Math.atan2(dy, dx);
        const currentAngle = this.gameObject.rotation;
        const angleDiff = this.normalizeAngle(targetAngle - currentAngle);
        
        if (Math.abs(angleDiff) > 0.01) {
            const newAngle = currentAngle + angleDiff * this.rotationSpeed;
            this.gameObject.setRotation(newAngle);
        } else {
            this.gameObject.setRotation(targetAngle);
        }
    }

    /**
     * –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
     * @param {number} start - –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     * @param {number} end - –ö–æ–Ω–µ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     * @param {number} t - –ü–∞—Ä–∞–º–µ—Ç—Ä –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ (0-1)
     * @returns {number} –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    lerp(start, end, t) {
        return start + (end - start) * t;
    }

    /**
     * –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä—ã–∂–∫–∞ (ease-in-out quadratic)
     * @param {number} t - –ü–∞—Ä–∞–º–µ—Ç—Ä (0-1)
     * @returns {number} –ü–ª–∞–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    easeInOutQuad(t) {
        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É–≥–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-œÄ, œÄ]
     * @param {number} angle - –£–≥–æ–ª –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
     * @returns {number} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —É–≥–æ–ª
     */
    normalizeAngle(angle) {
        while (angle > Math.PI) angle -= 2 * Math.PI;
        while (angle < -Math.PI) angle += 2 * Math.PI;
        return angle;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏
     * @param {Object} target - –¶–µ–ª—å –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
     */
    setTarget(target) {
        if (!target) {
            this.currentTarget = null;
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ü–µ–ª—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ
        const targetChanged = !this.currentTarget || 
            Math.abs(this.currentTarget.x - target.x) > 5 || 
            Math.abs(this.currentTarget.y - target.y) > 5;
        
        this.currentTarget = target;
        
        if (targetChanged) {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω–µ —Ü–µ–ª–∏
            this.isJumping = false;
            this.isResting = false;
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ –¥–ª—è –±–ª–æ—Ö–∏
            if (this.gameObject.enemyType === 'flea') {
                console.log(`ü¶ó JUMPING: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ü–µ–ª—å (${target.x.toFixed(1)}, ${target.y.toFixed(1)})`);
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
     * @returns {Object}
     */
    getMovementState() {
        return {
            speed: this.speed,
            isJumping: this.isJumping,
            isResting: this.isResting,
            hasTarget: !!this.currentTarget,
            jumpProgress: this.isJumping ? (this.gameObject.scene.time.now - this.jumpStartTime) / this.jumpDuration : 0
        };
    }

    /**
     * –°–±—Ä–æ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    reset() {
        this.currentTarget = null;
        this.isJumping = false;
        this.isResting = false;
        this.jumpStartTime = 0;
        this.restStartTime = 0;
        this.jumpStartPosition = { x: 0, y: 0 };
        this.jumpTargetPosition = { x: 0, y: 0 };
        this.jumpDirection = { x: 0, y: 0 };
    }
}
