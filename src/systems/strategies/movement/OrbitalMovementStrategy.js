import { GeometryUtils } from '../../../utils/GeometryUtils.js';

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
 * –û–±—ä–µ–∫—Ç –∫—Ä—É–∂–∏—Ç –≤–æ–∫—Ä—É–≥ —Ü–µ–ª–∏, –≤—Å–µ–≥–¥–∞ –ø–æ–≤–µ—Ä–Ω—É–≤—à–∏—Å—å –∫ –Ω–µ–π –ª–∏—Ü–æ–º
 */
export class OrbitalMovementStrategy {
    constructor(gameObject, config) {
        this.gameObject = gameObject;
        this.config = config;
        this.currentTarget = null;
        this.orbitAngle = 0; // –¢–µ–∫—É—â–∏–π —É–≥–æ–ª –Ω–∞ –æ—Ä–±–∏—Ç–µ
        this.orbitSpeed = config.get('orbitSpeed', 0.02);
        this.approachDistance = config.get('approachDistance', 250);
        this.minOrbitRadius = config.get('minOrbitRadius', 150);
        this.maxOrbitRadius = config.get('maxOrbitRadius', 300);
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
        const movementConfig = config.get('movement', {});
        
        this.speed = movementConfig.speed || config.get('speed', 100);
        this.rotationSpeed = movementConfig.rotationSpeed || config.get('rotationSpeed', 0.15);
        
        // –¢–µ–∫—É—â–∏–π —Ä–∞–¥–∏—É—Å –æ—Ä–±–∏—Ç—ã (–≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è)
        this.currentOrbitRadius = null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        this.isOrbiting = false;
        this.isApproaching = false;
        this.lastUpdateTime = 0;
        this.lastDebugTime = 0;
        
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è (1 = –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ, -1 = –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π)
        this.orbitDirection = 1;
        this.lastDirectionChangeTime = 0; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.directionChangeCooldown = 1000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (1 —Å–µ–∫—É–Ω–¥–∞)
        this.initialDirectionSet = false; // –§–ª–∞–≥, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        
        console.log(`üîÑ [OrbitalMovementStrategy] –°–æ–∑–¥–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: —Ä–∞–¥–∏—É—Å=${this.minOrbitRadius}-${this.maxOrbitRadius}, —Å–∫–æ—Ä–æ—Å—Ç—å=${this.speed}, –ø–æ–¥—Ö–æ–¥=${this.approachDistance}`);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    update(time, delta) {
        if (!this.currentTarget) {
            return;
        }

        const distance = GeometryUtils.distance(
            this.gameObject.x, this.gameObject.y,
            this.currentTarget.x, this.currentTarget.y
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —ç–∫—Ä–∞–Ω–∞ –∏ –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        this.checkBoundaryCollisions(time, delta);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
        if (time - this.lastDebugTime > 2000) {
            console.log(`üîÑ [OrbitalMovement] –ü–æ–∑–∏—Ü–∏—è: –æ—Å–∞(${this.gameObject.x.toFixed(1)}, ${this.gameObject.y.toFixed(1)}), —Ü–µ–ª—å(${this.currentTarget.x.toFixed(1)}, ${this.currentTarget.y.toFixed(1)}), —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ=${distance.toFixed(1)}`);
            this.lastDebugTime = time;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø –¥–≤–∏–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        if (distance > this.approachDistance) {
            // –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ - –ø—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è
            this.isOrbiting = false;
            this.isApproaching = true;
            this.currentOrbitRadius = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–¥–∏—É—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ—Ä–±–∏—Ç—ã
            this.approachTarget(time, delta);
        } else if (distance < this.minOrbitRadius) {
            // –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ - –æ—Ç–¥–∞–ª—è–µ–º—Å—è
            this.isOrbiting = false;
            this.isApproaching = true;
            this.currentOrbitRadius = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–¥–∏—É—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ—Ä–±–∏—Ç—ã
            this.retreatFromTarget(time, delta);
        } else {
            // –í –Ω—É–∂–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ - –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            if (!this.isOrbiting) {
                // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞–¥–∏—É—Å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                this.startOrbiting();
            }
            this.isOrbiting = true;
            this.isApproaching = false;
            this.orbitTarget(time, delta);
        }

        this.lastUpdateTime = time;
    }

    /**
     * –ù–∞—á–∞–ª–æ –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞–¥–∏—É—Å –æ—Ä–±–∏—Ç—ã –∏ —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
     */
    startOrbiting() {
        // –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–¥–∏—É—Å –æ—Ä–±–∏—Ç—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        this.currentOrbitRadius = Phaser.Math.Between(this.minOrbitRadius, this.maxOrbitRadius);
        
        // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
        if (!this.initialDirectionSet) {
            this.orbitDirection = Phaser.Math.Between(0, 1) === 0 ? -1 : 1;
            this.initialDirectionSet = true;
            console.log(`üîÑ [OrbitalMovementStrategy] –ù–∞—á–∞–ª–æ –æ—Ä–±–∏—Ç—ã: —Ä–∞–¥–∏—É—Å=${this.currentOrbitRadius}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ=${this.orbitDirection === 1 ? '–ø–æ —á–∞—Å–æ–≤–æ–π' : '–ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π'}`);
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É–≥–æ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        const dx = this.gameObject.x - this.currentTarget.x;
        const dy = this.gameObject.y - this.currentTarget.y;
        this.orbitAngle = Math.atan2(dy, dx);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —ç–∫—Ä–∞–Ω–∞ –∏ —Å–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    checkBoundaryCollisions(time, delta) {
        if (!this.gameObject.scene) return;

        const sceneWidth = this.gameObject.scene.cameras.main.width;
        const sceneHeight = this.gameObject.scene.cameras.main.height;
        const margin = 30; // –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞—è

        const x = this.gameObject.x;
        const y = this.gameObject.y;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
        if (x <= margin || x >= sceneWidth - margin || y <= margin || y >= sceneHeight - margin) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if (time - this.lastDirectionChangeTime >= this.directionChangeCooldown) {
                // –ü—Ä–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–∏ –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
                this.orbitDirection *= -1;
                this.lastDirectionChangeTime = time;
                console.log(`üîÑ [OrbitalMovement] –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –≥—Ä–∞–Ω–∏—Ü–µ–π, —Å–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä–±–∏—Ç—ã: ${this.orbitDirection > 0 ? '–ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ' : '–ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏'}`);
            }
        }
    }


    /**
     * –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    approachTarget(time, delta) {
        const direction = GeometryUtils.normalize(
            this.currentTarget.x - this.gameObject.x,
            this.currentTarget.y - this.gameObject.y
        );

        const velocityX = direction.x * this.speed;
        const velocityY = direction.y * this.speed;

        this.setVelocity(velocityX, velocityY);
        this.rotateToTarget();
    }

    /**
     * –û—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç —Ü–µ–ª–∏
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    retreatFromTarget(time, delta) {
        const direction = GeometryUtils.normalize(
            this.gameObject.x - this.currentTarget.x,
            this.gameObject.y - this.currentTarget.y
        );

        const velocityX = direction.x * this.speed;
        const velocityY = direction.y * this.speed;

        this.setVelocity(velocityX, velocityY);
        this.rotateToTarget();
    }

    /**
     * –û—Ä–±–∏—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ —Ü–µ–ª–∏
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    orbitTarget(time, delta) {
        // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏
        const currentDistance = GeometryUtils.distance(
            this.gameObject.x, this.gameObject.y,
            this.currentTarget.x, this.currentTarget.y
        );

        // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–ª–∏
        const dx = this.gameObject.x - this.currentTarget.x;
        const dy = this.gameObject.y - this.currentTarget.y;
        const currentAngle = Math.atan2(dy, dx);

        // –ï—Å–ª–∏ –º—ã —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
        const distanceDifference = Math.abs(currentDistance - this.currentOrbitRadius);
        if (distanceDifference > 15) {
            this.adjustOrbitRadius(delta, currentDistance);
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è (–ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ —Ä–∞–¥–∏—É—Å—É)
        // –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–±–∏—Ç—ã (–ø–æ —á–∞—Å–æ–≤–æ–π –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏)
        const tangentAngle = currentAngle + Math.PI / 2 * this.orbitDirection;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª –æ—Ä–±–∏—Ç—ã
        this.orbitAngle += this.orbitSpeed * delta * this.orbitDirection;

        // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –æ—Ä–±–∏—Ç–µ
        const orbitalSpeed = this.speed * 0.5; // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ —á–µ–º –æ–±—ã—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        const velocityX = Math.cos(tangentAngle) * orbitalSpeed;
        const velocityY = Math.sin(tangentAngle) * orbitalSpeed;

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)
        if (time - this.lastDebugTime > 2000) {
            const directionText = this.orbitDirection > 0 ? '–ø–æ —á–∞—Å–æ–≤–æ–π' : '–ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π';
            console.log(`üîÑ [OrbitalMovement] –û—Ä–±–∏—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ=${currentDistance.toFixed(1)}, —É–≥–æ–ª=${(currentAngle * 180 / Math.PI).toFixed(1)}¬∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ=${directionText}`);
            this.lastDebugTime = time;
        }

        this.setVelocity(velocityX, velocityY);
        this.rotateToTarget();
    }


    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –æ—Ä–±–∏—Ç—ã
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param {number} currentDistance - –¢–µ–∫—É—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    adjustOrbitRadius(delta, currentDistance = null) {
        if (!currentDistance) {
            currentDistance = GeometryUtils.distance(
                this.gameObject.x, this.gameObject.y,
                this.currentTarget.x, this.currentTarget.y
            );
        }

        const distanceDiff = currentDistance - this.currentOrbitRadius;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
        const direction = GeometryUtils.normalize(
            this.currentTarget.x - this.gameObject.x,
            this.currentTarget.y - this.gameObject.y
        );

        // –î–≤–∏–∂–µ–Ω–∏–µ –∫ –∏–¥–µ–∞–ª—å–Ω–æ–º—É —Ä–∞–¥–∏—É—Å—É
        const adjustSpeed = this.speed * 0.3;
        const velocityX = direction.x * adjustSpeed * (distanceDiff > 0 ? 1 : -1);
        const velocityY = direction.y * adjustSpeed * (distanceDiff > 0 ? 1 : -1);

        this.setVelocity(velocityX, velocityY);
        this.rotateToTarget();
    }


    /**
     * –ü–æ–≤–æ—Ä–æ—Ç –∫ —Ü–µ–ª–∏
     */
    rotateToTarget() {
        if (!this.currentTarget) return;

        const direction = GeometryUtils.normalize(
            this.currentTarget.x - this.gameObject.x,
            this.currentTarget.y - this.gameObject.y
        );

        if (direction.x === 0 && direction.y === 0) return;

        const targetAngle = Math.atan2(direction.y, direction.x);
        const currentAngle = this.gameObject.rotation;
        
        // –ü–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç
        const angleDiff = this.normalizeAngle(targetAngle - currentAngle);
        
        if (Math.abs(angleDiff) > 0.01) {
            const newAngle = currentAngle + angleDiff * this.rotationSpeed;
            this.gameObject.setRotation(newAngle);
        } else {
            this.gameObject.setRotation(targetAngle);
        }
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É–≥–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-œÄ, œÄ]
     * @param {number} angle - –£–≥–æ–ª –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
     * @returns {number} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —É–≥–æ–ª
     */
    normalizeAngle(angle) {
        while (angle > Math.PI) angle -= 2 * Math.PI;
        while (angle < -Math.PI) angle += 2 * Math.PI;
        return angle;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è
     * @param {number} x - –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ X
     * @param {number} y - –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ Y
     */
    setVelocity(x, y) {
        if (this.gameObject.body) {
            this.gameObject.body.setVelocity(x, y);
        } else if (this.gameObject.physicsBody) {
            this.gameObject.physicsBody.setVelocity(x, y);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏
     * @param {Object} target - –¶–µ–ª—å
     */
    setTarget(target) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Ü–µ–ª—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        if (this.currentTarget === target) {
            return; // –¶–µ–ª—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        }
        
        this.currentTarget = target;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≥–æ–ª –æ—Ä–±–∏—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Ü–µ–ª–∏
        if (target) {
            const direction = GeometryUtils.normalize(
                target.x - this.gameObject.x,
                target.y - this.gameObject.y
            );
            this.orbitAngle = Math.atan2(direction.y, direction.x);
            console.log(`üîÑ [OrbitalMovementStrategy] –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: (${target.x.toFixed(1)}, ${target.y.toFixed(1)})`);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–ª–∏
     * @returns {Object|null}
     */
    getTarget() {
        return this.currentTarget;
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    stop() {
        this.setVelocity(0, 0);
        this.currentTarget = null;
        this.isOrbiting = false;
        this.isApproaching = false;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –æ—Ä–±–∏—Ç—ã
     * @param {number} radius - –†–∞–¥–∏—É—Å –æ—Ä–±–∏—Ç—ã
     */
    setOrbitRadius(radius) {
        this.currentOrbitRadius = Math.max(this.minOrbitRadius, Math.min(radius, this.maxOrbitRadius));
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ä–±–∏—Ç—ã
     * @param {number} speed - –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ä–±–∏—Ç—ã
     */
    setOrbitSpeed(speed) {
        this.orbitSpeed = Math.max(0, speed);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
     * @returns {Object}
     */
    getMovementState() {
        return {
            isOrbiting: this.isOrbiting,
            isApproaching: this.isApproaching,
            orbitAngle: this.orbitAngle,
            orbitRadius: this.currentOrbitRadius,
            orbitSpeed: this.orbitSpeed,
            orbitDirection: this.orbitDirection,
            currentTarget: this.currentTarget
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     * @returns {string}
     */
    getName() {
        return 'OrbitalMovementStrategy';
    }

    destroy() {
        this.stop();
        this.gameObject = null;
        this.config = null;
    }
}
