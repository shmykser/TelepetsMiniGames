import { GeometryUtils } from '../../../utils/GeometryUtils.js';

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–ø–∞–≤–Ω–∞ –≤—Ä–∞–≥–æ–≤ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ª—å–µ–º –¥–ª—è –≤—ã–ª–µ—Ç–∞ –æ—Å –ø—Ä–∏ –∞—Ç–∞–∫–µ
 */
export class DamageSpawnStrategy {
    constructor(gameObject, config) {
        this.gameObject = gameObject;
        this.config = config;
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ø–∞–≤–Ω–∞ –ø—Ä–∏ —É—Ä–æ–Ω–µ
        this.spawnType = config.get('spawnType', 'wasp');
        this.minSpawnCount = config.get('minSpawnCount', 0);
        this.maxSpawnCount = config.get('maxSpawnCount', 4);
        this.spawnRange = config.get('spawnRange', 50);
        this.launchForce = config.get('launchForce', 200); // –°–∏–ª–∞ –≤—ã—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è
        this.launchAngleSpread = config.get('launchAngleSpread', Math.PI / 3); // –†–∞–∑–±—Ä–æ—Å —É–≥–ª–æ–≤ (60 –≥—Ä–∞–¥—É—Å–æ–≤)
        
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ª–µ—Ç–∞ (–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —É—Ä–æ–Ω–∞)
        this.damageSource = null;
        
        console.log(`üè† [DamageSpawnStrategy] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${gameObject.enemyType}`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
     * @param {number} damage - –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω
     * @param {Object} damageSource - –ò—Å—Ç–æ—á–Ω–∏–∫ —É—Ä–æ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    onDamageReceived(damage, damageSource = null) {
        console.log(`üè† [DamageSpawnStrategy] ${this.gameObject.enemyType} –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω ${damage}, —Å–ø–∞–≤–Ω–∏–º –æ—Å`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —É—Ä–æ–Ω–∞ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ª–µ—Ç–∞
        this.damageSource = damageSource;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å –¥–ª—è —Å–ø–∞–≤–Ω–∞
        const spawnCount = this.calculateSpawnCount(damage);
        
        // –°–ø–∞–≤–Ω–∏–º –æ—Å
        this.spawnWasps(spawnCount);
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å –¥–ª—è —Å–ø–∞–≤–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–Ω–∞
     * @param {number} damage - –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω
     * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å (0 –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ —Å–ø–∞–≤–Ω–∏—Ç—å)
     */
    calculateSpawnCount(damage) {
        // –ü—Ä–æ—Å—Ç–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –ª–æ–≥–∏–∫–∞: –æ—Ç 0 –¥–æ maxSpawnCount
        // 0 = –Ω–µ —Å–ø–∞–≤–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ø—á–µ–ª—ã
        const spawnCount = Math.floor(Math.random() * (this.maxSpawnCount + 1));
        
        console.log(`üè† [DamageSpawnStrategy] –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å: ${spawnCount} (–¥–∏–∞–ø–∞–∑–æ–Ω: 0-${this.maxSpawnCount})`);
        
        return spawnCount;
    }

    /**
     * –°–ø–∞–≤–Ω –æ—Å —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –≤—ã—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è
     * @param {number} spawnCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å –¥–ª—è —Å–ø–∞–≤–Ω–∞ (0 = –Ω–µ —Å–ø–∞–≤–Ω–∏—Ç—å)
     */
    spawnWasps(spawnCount) {
        if (spawnCount === 0) {
            console.log(`üè† [DamageSpawnStrategy] –£–ª–µ–π –Ω–µ —Å–ø–∞–≤–Ω–∏—Ç –æ—Å –≤ —ç—Ç–æ—Ç —Ä–∞–∑`);
            return;
        }
        
        console.log(`üè† [DamageSpawnStrategy] –°–ø–∞–≤–Ω–∏–º ${spawnCount} –æ—Å –∏–∑ —É–ª—å—è`);
        
        for (let i = 0; i < spawnCount; i++) {
            const spawnPosition = this.calculateSpawnPosition(i, spawnCount);
            const launchDirection = this.calculateLaunchDirection(spawnPosition);
            
            // –°–ø–∞–≤–Ω–∏–º –æ—Å—É —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—ã–ª–µ—Ç–∞
            this.spawnWasp(spawnPosition, launchDirection);
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Å–ø–∞–≤–Ω–∞ –æ—Å—ã
     * @param {number} index - –ò–Ω–¥–µ–∫—Å –æ—Å—ã
     * @param {number} totalCount - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å
     * @returns {Object} –ü–æ–∑–∏—Ü–∏—è {x, y}
     */
    calculateSpawnPosition(index, totalCount) {
        // –°–ø–∞–≤–Ω–∏–º –æ—Å –≤–æ–∫—Ä—É–≥ —É–ª—å—è
        const angle = (Math.PI * 2 * index) / totalCount;
        const distance = GeometryUtils.randomFloat(this.spawnRange * 0.5, this.spawnRange);
        
        return {
            x: this.gameObject.x + Math.cos(angle) * distance,
            y: this.gameObject.y + Math.sin(angle) * distance
        };
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ª–µ—Ç–∞ –æ—Å—ã
     * @param {Object} spawnPosition - –ü–æ–∑–∏—Ü–∏—è —Å–ø–∞–≤–Ω–∞
     * @returns {Object} –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {angle, force}
     */
    calculateLaunchDirection(spawnPosition) {
        let targetAngle;
        
        if (this.damageSource) {
            // –í—ã–ª–µ—Ç–∞–µ–º –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —É—Ä–æ–Ω–∞
            const angleToSource = Math.atan2(
                this.damageSource.y - this.gameObject.y,
                this.damageSource.x - this.gameObject.x
            );
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            const randomSpread = GeometryUtils.randomFloat(
                -this.launchAngleSpread / 2,
                this.launchAngleSpread / 2
            );
            
            targetAngle = angleToSource + Math.PI + randomSpread; // + Math.PI –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –û–¢ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        } else {
            // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            targetAngle = GeometryUtils.randomFloat(0, Math.PI * 2);
        }
        
        // –°–∏–ª–∞ –≤—ã—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é
        const force = GeometryUtils.randomFloat(
            this.launchForce * 0.8,
            this.launchForce * 1.2
        );
        
        return { angle: targetAngle, force };
    }

    /**
     * –°–ø–∞–≤–Ω –æ—Å—ã —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –≤—ã—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è
     * @param {Object} position - –ü–æ–∑–∏—Ü–∏—è —Å–ø–∞–≤–Ω–∞
     * @param {Object} launchDirection - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∏–ª–∞ –≤—ã–ª–µ—Ç–∞
     */
    spawnWasp(position, launchDirection) {
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —Å–ø–∞–≤–Ω–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤—ã–ª–µ—Ç–∞
        if (this.gameObject.scene && this.gameObject.scene.events) {
            this.gameObject.scene.events.emit('enemy:spawn', {
                enemyType: this.spawnType,
                x: position.x,
                y: position.y,
                parent: this.gameObject,
                launchEffect: {
                    enabled: true,
                    angle: launchDirection.angle,
                    force: launchDirection.force,
                    duration: 1000 // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤—ã—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è –≤ –º—Å
                }
            });
        }
        
        console.log(`üêù [DamageSpawnStrategy] –û—Å–∞ –≤—ã–ª–µ—Ç–∞–µ—Ç –∏–∑ —É–ª—å—è –ø–æ–¥ —É–≥–ª–æ–º ${(launchDirection.angle * 180 / Math.PI).toFixed(1)}¬∞ —Å —Å–∏–ª–æ–π ${launchDirection.force.toFixed(1)}`);
    }
}
