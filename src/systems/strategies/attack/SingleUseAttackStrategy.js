import { GeometryUtils } from '../../../utils/GeometryUtils.js';

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π –∞—Ç–∞–∫–∏ (—Å–Ω–∞—Ä—è–¥)
 * –ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∫–æ–Ω—Ç–∞–∫—Ç–µ –∏ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è
 */
export class SingleUseAttackStrategy {
    constructor(gameObject, config) {
        this.gameObject = gameObject;
        this.config = config;
        this.damage = config.get('damage', 25);
        this.range = config.get('range', 50); // –†–∞–¥–∏—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –∞—Ç–∞–∫–∏
        this.speed = config.get('speed', 150); // –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ü–µ–ª–∏
        this.detectionRange = config.get('detectionRange', 300); // –†–∞–¥–∏—É—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ü–µ–ª–∏
        this.explosionRadius = config.get('explosionRadius', 80); // –†–∞–¥–∏—É—Å –≤–∑—Ä—ã–≤–∞
        this.explosionDamage = config.get('explosionDamage', this.damage); // –£—Ä–æ–Ω –æ—Ç –≤–∑—Ä—ã–≤–∞
        this.hasAttacked = false; // –§–ª–∞–≥ –∞—Ç–∞–∫–∏ (–º–æ–∂–Ω–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        this.isMoving = false;
        this.currentTarget = null;
        this.lastUpdateTime = 0;
        this.lastDebugTime = 0;
        
        console.log(`üí• [SingleUseAttackStrategy] –°–æ–∑–¥–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: —É—Ä–æ–Ω=${this.damage}, —Å–∫–æ—Ä–æ—Å—Ç—å=${this.speed}, —Ä–∞–¥–∏—É—Å –≤–∑—Ä—ã–≤–∞=${this.explosionRadius}`);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    update(time, delta) {
        if (this.hasAttacked || !this.currentTarget) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Ü–µ–ª—å
        if (this.canAttackTarget(this.currentTarget)) {
            this.performAttack(this.currentTarget, time);
            return;
        }

        // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∞—Ç–∞–∫–æ–≤–∞—Ç—å, –¥–≤–∏–∂–µ–º—Å—è –∫ —Ü–µ–ª–∏
        if (!this.isMoving) {
            this.moveToTarget(this.currentTarget);
        }

        this.lastUpdateTime = time;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏ —Ü–µ–ª–∏
     * @param {Object} target - –¶–µ–ª—å
     * @returns {boolean}
     */
    canAttackTarget(target) {
        if (!target || !this.gameObject.isAlive) {
            return false;
        }

        const distance = GeometryUtils.distance(
            this.gameObject.x, this.gameObject.y,
            target.x, target.y
        );

        return distance <= this.range;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ç–∞–∫–∏
     * @param {Object} target - –¶–µ–ª—å
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    performAttack(target, time) {
        if (this.hasAttacked) {
            return;
        }

        this.hasAttacked = true;
        this.isMoving = false;

        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
        this.dealDamageToTarget(target);

        // –°–æ–∑–¥–∞–µ–º –≤–∑—Ä—ã–≤
        this.createExplosion(target, time);

        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –∞—Ç–∞–∫–∏
        this.onAttackPerformed(target, time);

        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –æ–±—ä–µ–∫—Ç
        this.destroySelf();
    }

    /**
     * –ù–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ —Ü–µ–ª–∏
     * @param {Object} target - –¶–µ–ª—å
     */
    dealDamageToTarget(target) {
        if (target && typeof target.takeDamage === 'function') {
            target.takeDamage(this.damage);
            console.log(`üí• [SingleUseAttack] –ù–∞–Ω–µ—Å–µ–Ω —É—Ä–æ–Ω ${this.damage} —Ü–µ–ª–∏`);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∑—Ä—ã–≤–∞
     * @param {Object} target - –¶–µ–ª—å –≤–∑—Ä—ã–≤–∞
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    createExplosion(target, time) {
        if (!this.gameObject.scene) {
            return;
        }

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Ä–∞–¥–∏—É—Å–µ –≤–∑—Ä—ã–≤–∞
        const explosionTargets = this.getTargetsInRadius(
            this.gameObject.x, this.gameObject.y, 
            this.explosionRadius
        );

        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –≤—Å–µ–º —Ü–µ–ª—è–º –≤ —Ä–∞–¥–∏—É—Å–µ
        explosionTargets.forEach(explosionTarget => {
            if (explosionTarget !== target && explosionTarget !== this.gameObject) {
                if (typeof explosionTarget.takeDamage === 'function') {
                    explosionTarget.takeDamage(this.explosionDamage);
                    console.log(`üí• [SingleUseAttack] –í–∑—Ä—ã–≤ –Ω–∞–Ω–µ—Å —É—Ä–æ–Ω ${this.explosionDamage} —Ü–µ–ª–∏`);
                }
            }
        });

        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –≤–∑—Ä—ã–≤–∞
        if (this.gameObject.scene.events) {
            this.gameObject.scene.events.emit('explosion', {
                x: this.gameObject.x,
                y: this.gameObject.y,
                radius: this.explosionRadius,
                damage: this.explosionDamage,
                targets: explosionTargets.length
            });
        }

        console.log(`üí• [SingleUseAttack] –í–∑—Ä—ã–≤ –≤ –ø–æ–∑–∏—Ü–∏–∏ (${this.gameObject.x.toFixed(1)}, ${this.gameObject.y.toFixed(1)}) —Å —Ä–∞–¥–∏—É—Å–æ–º ${this.explosionRadius}`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞
     * @param {number} radius - –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Ü–µ–ª–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ
     */
    getTargetsInRadius(x, y, radius) {
        if (!this.gameObject.scene) {
            return [];
        }

        const targets = [];
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ü–µ–Ω–µ (–∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)
        if (this.gameObject.scene.children) {
            this.gameObject.scene.children.list.forEach(child => {
                if (child !== this.gameObject && child.isAlive !== false) {
                    const distance = GeometryUtils.distance(x, y, child.x, child.y);
                    if (distance <= radius) {
                        targets.push(child);
                    }
                }
            });
        }

        return targets;
    }

    /**
     * –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
     * @param {Object} target - –¶–µ–ª—å
     */
    moveToTarget(target) {
        if (!target || this.hasAttacked) {
            return;
        }

        this.isMoving = true;

        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
        const dx = target.x - this.gameObject.x;
        const dy = target.y - this.gameObject.y;
        const direction = GeometryUtils.normalize(dx, dy);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
        const velocityX = direction.x * this.speed;
        const velocityY = direction.y * this.speed;

        this.setVelocity(velocityX, velocityY);

        // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫ —Ü–µ–ª–∏
        this.rotateToTarget(target);

        console.log(`üí• [SingleUseAttack] –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é ${this.speed}`);
    }

    /**
     * –ü–æ–≤–æ—Ä–æ—Ç –∫ —Ü–µ–ª–∏
     * @param {Object} target - –¶–µ–ª—å
     */
    rotateToTarget(target) {
        if (!target) return;

        const direction = GeometryUtils.normalize(
            target.x - this.gameObject.x,
            target.y - this.gameObject.y
        );

        if (direction.x === 0 && direction.y === 0) return;

        const targetAngle = Math.atan2(direction.y, direction.x);
        this.gameObject.setRotation(targetAngle);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è
     * @param {number} x - –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ X
     * @param {number} y - –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ Y
     */
    setVelocity(x, y) {
        if (this.gameObject.body) {
            this.gameObject.body.setVelocity(x, y);
        } else if (this.gameObject.physicsBody) {
            this.gameObject.physicsBody.setVelocity(x, y);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏
     * @param {Object} target - –¶–µ–ª—å
     */
    setTarget(target) {
        if (this.currentTarget === target) {
            return;
        }

        this.currentTarget = target;
        
        if (target) {
            console.log(`üí• [SingleUseAttackStrategy] –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: (${target.x.toFixed(1)}, ${target.y.toFixed(1)})`);
        }
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
     */
    destroySelf() {
        console.log(`üí• [SingleUseAttack] –û–±—ä–µ–∫—Ç —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è`);
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è
        if (this.gameObject.scene && this.gameObject.scene.events) {
            this.gameObject.scene.events.emit('singleUseAttackDestroyed', {
                attacker: this.gameObject,
                damage: this.damage,
                explosionRadius: this.explosionRadius
            });
        }

        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –æ–±—ä–µ–∫—Ç
        if (this.gameObject.destroy) {
            this.gameObject.destroy();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∞—Ç–∞–∫–∏
     * @param {Object} target - –¶–µ–ª—å
     * @param {number} time - –í—Ä–µ–º—è –∞—Ç–∞–∫–∏
     */
    onAttackPerformed(target, time) {
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –∞—Ç–∞–∫–∏
        if (this.gameObject.scene && this.gameObject.scene.events) {
            this.gameObject.scene.events.emit('singleUseAttack', {
                attacker: this.gameObject,
                target: target,
                damage: this.damage,
                explosionRadius: this.explosionRadius,
                explosionDamage: this.explosionDamage,
                time: time
            });
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –∞—Ç–∞–∫–æ–≤–∞—Ç—å
     * @returns {boolean}
     */
    canAttack() {
        return !this.hasAttacked && this.gameObject.isAlive && this.currentTarget;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Ç–∞–∫–∏
     * @returns {Object}
     */
    getAttackState() {
        return {
            hasAttacked: this.hasAttacked,
            isMoving: this.isMoving,
            damage: this.damage,
            explosionRadius: this.explosionRadius,
            explosionDamage: this.explosionDamage,
            currentTarget: this.currentTarget,
            speed: this.speed
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
     * @returns {number}
     */
    getDamage() {
        return this.damage;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–Ω–∞
     * @param {number} damage - –£—Ä–æ–Ω
     */
    setDamage(damage) {
        this.damage = Math.max(0, damage);
        this.explosionDamage = damage;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     * @returns {string}
     */
    getName() {
        return 'SingleUseAttackStrategy';
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Ç–∞–∫–∏
     */
    stop() {
        this.hasAttacked = true;
        this.isMoving = false;
        this.setVelocity(0, 0);
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    destroy() {
        this.stop();
        this.currentTarget = null;
        this.gameObject = null;
        this.config = null;
    }
}
