import { GeometryUtils } from '../../../utils/GeometryUtils.js';

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∞—Ç–∞–∫–∏ —á–µ—Ä–µ–∑ —Å–ø–∞–≤–Ω –≤—Ä–∞–≥–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∞–º–∫–æ–π –ø–∞—É–∫–∞ –∏ –¥—Ä—É–≥–∏–º–∏ —Å–ø–∞–≤–Ω–µ—Ä–∞–º–∏
 */
export class SpawnAttackStrategy {
    constructor(gameObject, config) {
        this.gameObject = gameObject;
        this.config = config;
        this.lastSpawnTime = 0;
        this.spawnedCount = 0;
        this.maxSpawned = this.config?.get('maxSpawned', 10);
        
        // –¢–æ–ª—å–∫–æ –¥–ª—è —É–ª—å—è –≤—ã–≤–æ–¥–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if (this.gameObject?.enemyType === 'hive') {
            const interval = this.getResolvedInterval();
            const spawnType = this.config.get('spawnType', 'unknown');
            console.log(`üè† [HIVE] SpawnAttackStrategy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: interval=${interval}ms, spawnType=${spawnType}, maxSpawned=${this.maxSpawned}`);
        }
    }

    /**
     * –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–ø–∞–≤–Ω–∞: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç attack.cooldown, –∑–∞—Ç–µ–º spawnInterval, –∑–∞—Ç–µ–º –¥–µ—Ñ–æ–ª—Ç 5000
     */
    getResolvedInterval() {
        const cooldown = this.config.get('cooldown', undefined);
        if (cooldown != null) return cooldown;
        const spawnInterval = this.config.get('spawnInterval', undefined);
        if (spawnInterval != null) return spawnInterval;
        return 5000;
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ü–µ–Ω—ã
     */
    getNow() {
        return (this.gameObject && this.gameObject.scene && this.gameObject.scene.time &&
            typeof this.gameObject.scene.time.now === 'number')
            ? this.gameObject.scene.time.now
            : Date.now();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    update(time, delta) {
        const now = (typeof time === 'number') ? time : this.getNow();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ —Å–ø–∞–≤–Ω–∏—Ç—å
        if (this.canSpawn(now)) {
            this.performSpawn(now);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ–º –ª–∏ —Å–ø–∞–≤–Ω–∏—Ç—å
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     * @returns {boolean}
     */
    canSpawn(time) {
        const now = (typeof time === 'number') ? time : this.getNow();
        const spawnInterval = this.getResolvedInterval();
        const timeSinceLastSpawn = now - this.lastSpawnTime;
        const basicCondition = timeSinceLastSpawn > spawnInterval && this.spawnedCount < this.maxSpawned;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (–¥–ª—è –∫—Ä–æ—Ç–∞)
        let conditionalCheck = true;
        if (this.conditionCallback) {
            conditionalCheck = this.conditionCallback();
        }
        
        const canSpawnNow = basicCondition && conditionalCheck;
        
        // –¢–æ–ª—å–∫–æ –¥–ª—è —É–ª—å—è –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Å–ø–∞–≤–Ω–∞
        if (this.gameObject?.enemyType === 'hive' && timeSinceLastSpawn > 7000) {
            console.log(`üè† [HIVE] canSpawn: timeSince=${Math.round(timeSinceLastSpawn)}ms >= interval=${spawnInterval}ms, spawned=${this.spawnedCount}/${this.maxSpawned} -> ${canSpawnNow}`);
        }
        
        return canSpawnNow;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∞–≤–Ω–∞
     * @param {number} time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    performSpawn(time) {
        const minSpawnCount = this.config.get('minSpawnCount', 1);
        const maxSpawnCount = this.config.get('maxSpawnCount', 5);
        const spawnCount = Math.floor(Math.random() * (maxSpawnCount - minSpawnCount + 1)) + minSpawnCount;
        const spawnRange = this.config.get('spawnRange', 100);
        const spawnType = this.config.get('spawnType', 'spider');
        const spawnDirection = this.config.get('spawnDirection', 'circle');
        
        // –¢–æ–ª—å–∫–æ –¥–ª—è —É–ª—å—è –ª–æ–≥–∏—Ä—É–µ–º —Å–ø–∞–≤–Ω
        if (this.gameObject?.enemyType === 'hive') {
            console.log(`üè† [HIVE] performSpawn: spawning ${spawnCount}x ${spawnType} at range=${spawnRange}`);
        }

        for (let i = 0; i < spawnCount; i++) {
            let spawnX, spawnY;
            
            if (spawnDirection === 'target' && this.gameObject.aiCoordinator && this.gameObject.aiCoordinator.currentTarget) {
                // –°–ø–∞–≤–Ω –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏
                const target = this.gameObject.aiCoordinator.currentTarget;
                const angleToTarget = Math.atan2(target.y - this.gameObject.y, target.x - this.gameObject.x);
                
                spawnX = this.gameObject.x + Math.cos(angleToTarget) * spawnRange;
                spawnY = this.gameObject.y + Math.sin(angleToTarget) * spawnRange;
                
                
            } else {
                // –ö—Ä—É–≥–æ–≤–æ–π —Å–ø–∞–≤–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                const angle = (Math.PI * 2 * i) / spawnCount;
                const distance = Math.random() * spawnRange;
                
                spawnX = this.gameObject.x + Math.cos(angle) * distance;
                spawnY = this.gameObject.y + Math.sin(angle) * distance;
            }
            
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if (!Number.isFinite(spawnX) || !Number.isFinite(spawnY)) {
                if (this.gameObject.enemyType === 'spiderQueen') {
                    console.warn(`üï∑Ô∏èüëë [SpawnAttackStrategy] QUEEN: –ø—Ä–æ–ø—É—Å–∫ —Å–ø–∞–≤–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç`, { spawnX, spawnY });
                }
                continue;
            }

            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —Å–ø–∞–≤–Ω–∞
            if (this.gameObject.scene && this.gameObject.scene.events) {
                this.gameObject.scene.events.emit('enemy:spawn', {
                    enemyType: spawnType,
                    x: spawnX,
                    y: spawnY,
                    parent: this.gameObject,
                    target: this.gameObject.aiCoordinator?.currentTarget // –ü–µ—Ä–µ–¥–∞–µ–º —Ü–µ–ª—å –¥–ª—è —Å–Ω–∞—Ä—è–¥–æ–≤
                });
            }
        }

        this.lastSpawnTime = time;
        this.spawnedCount += spawnCount;
        
        // –¢–æ–ª—å–∫–æ –¥–ª—è —É–ª—å—è –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (this.gameObject?.enemyType === 'hive') {
            console.log(`üè† [HIVE] Spawned: ${spawnCount} enemies, total=${this.spawnedCount}/${this.maxSpawned}`);
        }
        
        // –î–ª—è –∫—Ä–æ—Ç–∞: –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–ø–∞–≤–Ω –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω
        if (this.gameObject.enemyType === 'mole') {
            this.hasSpawnedOnSurface = true;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤ —Ä–∞–¥–∏—É—Å–µ –ª–∏ —Ü–µ–ª—å
     * @param {Object} target - –¶–µ–ª—å
     * @returns {boolean}
     */
    isInRange(target) {
        if (!target) return false;
        
        // –†–∞–¥–∏—É—Å –∞—Ç–∞–∫–∏ –±–µ—Ä–µ–º –¢–û–õ–¨–ö–û –∏–∑ attack.range
        const attackCfg = this.config.get('attack', {});
        const attackRange = attackCfg.range || 0;
        const distance = GeometryUtils.distance(
            this.gameObject.x, this.gameObject.y,
            target.x, target.y
        );
        
        return distance <= attackRange;
    }

    /**
     * –ê—Ç–∞–∫–∞ (—Å–ø–∞–≤–Ω –≤—Ä–∞–≥–æ–≤)
     * @param {Object} target - –¶–µ–ª—å
     */
    attack(target) {
        // –°–ø–∞–≤–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ü–µ–ª–∏, –Ω–æ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –ø–æ–∑–∏—Ü–∏—é
        const now = this.getNow();
        // –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∞—Ç–∞–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ö–∞–Ω–∏–∑–º, —á—Ç–æ –∏ –≤ update
        if (this.canSpawn(now)) {
            this.performSpawn(now);
            return true;
        }
        return false;
    }

    /**
     * –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∞—Ç–∞–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AttackSystem.performAttack)
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å–ø–∞–≤–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω
     */
    performAttack(/* target */) {
        const now = this.getNow();
        if (this.canSpawn(now)) {
            this.performSpawn(now);
            return true;
        }
        return false;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–ø–∞–≤–Ω–∞
     * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è true –µ—Å–ª–∏ –º–æ–∂–Ω–æ —Å–ø–∞–≤–Ω–∏—Ç—å
     */
    setConditionCallback(callback) {
        this.conditionCallback = callback;
        
    }


    /**
     * –°–±—Ä–æ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    reset() {
        this.lastSpawnTime = 0;
        this.spawnedCount = 0;
        this.hasSpawnedOnSurface = false;
        this.surfaceStartTime = 0;
    }
}
