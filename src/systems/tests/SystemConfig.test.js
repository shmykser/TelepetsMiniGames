/**
 * –¢–µ—Å—Ç—ã –¥–ª—è SystemConfig
 */
export class SystemConfigTest {
    constructor() {
        this.tests = [];
        this.passed = 0;
        this.failed = 0;
    }

    run() {
        console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ SystemConfig...');
        
        this.testBasicFunctionality();
        this.testPriorityOrder();
        this.testOverrides();
        this.testValidation();
        this.testCache();
        
        this.printResults();
    }

    testBasicFunctionality() {
        const testName = '–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å';
        try {
            const config = new SystemConfig([
                { speed: 100, health: 50 },
                { damage: 20 }
            ]);

            assert(config.get('speed') === 100, '–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100');
            assert(config.get('health') === 50, '–ó–¥–æ—Ä–æ–≤—å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 50');
            assert(config.get('damage') === 20, '–£—Ä–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 20');
            assert(config.get('unknown') === null, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null');

            this.passed++;
            console.log(`‚úÖ ${testName}`);
        } catch (error) {
            this.failed++;
            console.log(`‚ùå ${testName}: ${error.message}`);
        }
    }

    testPriorityOrder() {
        const testName = '–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤';
        try {
            const config = new SystemConfig([
                { speed: 100 }, // –ù–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                { speed: 200 }, // –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                { health: 50 }
            ]);

            assert(config.get('speed') === 200, '–ü–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç');
            assert(config.get('health') === 50, '–ó–¥–æ—Ä–æ–≤—å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 50');

            this.passed++;
            console.log(`‚úÖ ${testName}`);
        } catch (error) {
            this.failed++;
            console.log(`‚ùå ${testName}: ${error.message}`);
        }
    }

    testOverrides() {
        const testName = '–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è';
        try {
            const config = new SystemConfig([
                { speed: 100, health: 50 }
            ], { speed: 300 });

            assert(config.get('speed') === 300, '–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç');
            assert(config.get('health') === 50, '–ó–¥–æ—Ä–æ–≤—å–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 50');

            this.passed++;
            console.log(`‚úÖ ${testName}`);
        } catch (error) {
            this.failed++;
            console.log(`‚ùå ${testName}: ${error.message}`);
        }
    }

    testValidation() {
        const testName = '–í–∞–ª–∏–¥–∞—Ü–∏—è';
        try {
            const config = new SystemConfig([
                { speed: 100, health: 50, damage: 20 }
            ]);

            const schema = {
                speed: { type: 'number', min: 0, max: 1000 },
                health: { type: 'number', min: 1, required: true },
                damage: { type: 'number', min: 0 }
            };

            const result = config.validate(schema);
            assert(result.valid === true, '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π');
            assert(result.errors.length === 0, '–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–æ–∫');

            this.passed++;
            console.log(`‚úÖ ${testName}`);
        } catch (error) {
            this.failed++;
            console.log(`‚ùå ${testName}: ${error.message}`);
        }
    }

    testCache() {
        const testName = '–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ';
        try {
            const config = new SystemConfig([
                { speed: 100 }
            ]);

            // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
            const value1 = config.get('speed');
            // –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)
            const value2 = config.get('speed');

            assert(value1 === value2, '–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å');
            assert(value1 === 100, '–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 100');

            this.passed++;
            console.log(`‚úÖ ${testName}`);
        } catch (error) {
            this.failed++;
            console.log(`‚ùå ${testName}: ${error.message}`);
        }
    }

    printResults() {
        const total = this.passed + this.failed;
        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ SystemConfig:`);
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.failed}`);
        console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((this.passed / total) * 100).toFixed(1)}%`);
    }
}

function assert(condition, message) {
    if (!condition) {
        throw new Error(message);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (typeof window === 'undefined') {
    const test = new SystemConfigTest();
    test.run();
}
