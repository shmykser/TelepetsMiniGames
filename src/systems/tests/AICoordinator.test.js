/**
 * –¢–µ—Å—Ç—ã –¥–ª—è AICoordinator
 */
export class AICoordinatorTest {
    constructor() {
        this.tests = [];
        this.passed = 0;
        this.failed = 0;
    }

    run() {
        console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ AICoordinator...');
        
        this.testInitialization();
        this.testTargetSetting();
        this.testSystemCoordination();
        this.testStateManagement();
        
        this.printResults();
    }

    testInitialization() {
        const testName = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è';
        try {
            const mockGameObject = this.createMockGameObject();
            const config = this.createMockConfig();
            
            const coordinator = new AICoordinator(mockGameObject, config);
            
            assert(coordinator.gameObject === mockGameObject, '–ò–≥—Ä–æ–≤–æ–π –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            assert(coordinator.config === config, '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            assert(coordinator.isActive === true, '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω');
            assert(coordinator.systems.size > 0, '–°–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã');

            this.passed++;
            console.log(`‚úÖ ${testName}`);
        } catch (error) {
            this.failed++;
            console.log(`‚ùå ${testName}: ${error.message}`);
        }
    }

    testTargetSetting() {
        const testName = '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏';
        try {
            const mockGameObject = this.createMockGameObject();
            const config = this.createMockConfig();
            
            const coordinator = new AICoordinator(mockGameObject, config);
            
            const target = { x: 100, y: 200 };
            coordinator.setTarget(target);
            
            assert(coordinator.getTarget() === target, '–¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            assert(coordinator.currentTarget === target, '–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');

            this.passed++;
            console.log(`‚úÖ ${testName}`);
        } catch (error) {
            this.failed++;
            console.log(`‚ùå ${testName}: ${error.message}`);
        }
    }

    testSystemCoordination() {
        const testName = '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º';
        try {
            const mockGameObject = this.createMockGameObject();
            const config = this.createMockConfig();
            
            const coordinator = new AICoordinator(mockGameObject, config);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
            assert(coordinator.getSystem('movement') !== null, '–°–∏—Å—Ç–µ–º–∞ –¥–≤–∏–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞');
            assert(coordinator.getSystem('attack') !== null, '–°–∏—Å—Ç–µ–º–∞ –∞—Ç–∞–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞');
            assert(coordinator.getSystem('collision') !== null, '–°–∏—Å—Ç–µ–º–∞ –∫–æ–ª–ª–∏–∑–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞');
            assert(coordinator.getSystem('pathfinding') !== null, '–°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞');

            this.passed++;
            console.log(`‚úÖ ${testName}`);
        } catch (error) {
            this.failed++;
            console.log(`‚ùå ${testName}: ${error.message}`);
        }
    }

    testStateManagement() {
        const testName = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º';
        try {
            const mockGameObject = this.createMockGameObject();
            const config = this.createMockConfig();
            
            const coordinator = new AICoordinator(mockGameObject, config);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é
            coordinator.deactivate();
            assert(coordinator.isActive === false, '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            
            coordinator.activate();
            assert(coordinator.isActive === true, '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const state = coordinator.getAIState();
            assert(state.isActive === true, '–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
            assert(state.state === 'idle', '–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å idle');

            this.passed++;
            console.log(`‚úÖ ${testName}`);
        } catch (error) {
            this.failed++;
            console.log(`‚ùå ${testName}: ${error.message}`);
        }
    }

    createMockGameObject() {
        return {
            x: 0,
            y: 0,
            width: 32,
            height: 32,
            isAlive: true,
            canFly: false,
            body: {
                setVelocity: (x, y) => {},
                setBounce: (value) => {},
                setDrag: (x, y) => {},
                setCollideWorldBounds: (value) => {}
            },
            setVelocity: (x, y) => {},
            stopMovement: () => {},
            setRotation: (angle) => {},
            distanceTo: (target) => {
                const dx = this.x - target.x;
                const dy = this.y - target.y;
                return Math.sqrt(dx * dx + dy * dy);
            },
            directionTo: (target) => {
                const dx = target.x - this.x;
                const dy = target.y - this.y;
                const length = Math.sqrt(dx * dx + dy * dy);
                return { x: dx / length, y: dy / length };
            },
            isInRange: (target, range) => {
                return this.distanceTo(target) <= range;
            },
            scene: {
                events: {
                    emit: (event, data) => {},
                    on: (event, callback) => {},
                    off: (event, callback) => {}
                }
            }
        };
    }

    createMockConfig() {
        return {
            get: (key, defaultValue) => {
                const values = {
                    behavior: 'linear',
                    attackType: 'singleUse',
                    movement: { speed: 100, strategy: 'linear' },
                    attack: { damage: 10, range: 30, cooldown: 1000 },
                    collision: { enabled: true, layers: ['ENEMIES'] },
                    pathfinding: { algorithm: 'astar', allowDiagonal: true }
                };
                return values[key] || defaultValue;
            }
        };
    }

    printResults() {
        const total = this.passed + this.failed;
        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ AICoordinator:`);
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.failed}`);
        console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((this.passed / total) * 100).toFixed(1)}%`);
    }
}

function assert(condition, message) {
    if (!condition) {
        throw new Error(message);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (typeof window === 'undefined') {
    const test = new AICoordinatorTest();
    test.run();
}
