/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ò–ò
 */
import { SystemConfigTest } from './SystemConfig.test.js';
import { MovementSystemTest } from './MovementSystem.test.js';
import { AICoordinatorTest } from './AICoordinator.test.js';

export class TestRunner {
    constructor() {
        this.totalPassed = 0;
        this.totalFailed = 0;
        this.testSuites = [];
    }

    async runAllTests() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ò–ò...\n');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
        await this.runTestSuite('SystemConfig', () => new SystemConfigTest());
        await this.runTestSuite('MovementSystem', () => new MovementSystemTest());
        await this.runTestSuite('AICoordinator', () => new AICoordinatorTest());
        
        this.printFinalResults();
    }

    async runTestSuite(name, testFactory) {
        console.log(`\nüìã –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ${name}...`);
        console.log('='.repeat(50));
        
        try {
            const test = testFactory();
            test.run();
            
            this.totalPassed += test.passed;
            this.totalFailed += test.failed;
            
            this.testSuites.push({
                name,
                passed: test.passed,
                failed: test.failed,
                total: test.passed + test.failed
            });
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ ${name}:`, error);
            this.totalFailed++;
        }
    }

    printFinalResults() {
        const total = this.totalPassed + this.totalFailed;
        const successRate = ((this.totalPassed / total) * 100).toFixed(1);
        
        console.log('\n' + '='.repeat(60));
        console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
        console.log('='.repeat(60));
        
        this.testSuites.forEach(suite => {
            const suiteRate = ((suite.passed / suite.total) * 100).toFixed(1);
            console.log(`üìã ${suite.name}: ${suite.passed}/${suite.total} (${suiteRate}%)`);
        });
        
        console.log('-'.repeat(60));
        console.log(`‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ: ${this.totalPassed}`);
        console.log(`‚ùå –í—Å–µ–≥–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.totalFailed}`);
        console.log(`üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
        
        if (this.totalFailed === 0) {
            console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log(`\n‚ö†Ô∏è  ${this.totalFailed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ`);
        }
        
        console.log('='.repeat(60));
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (typeof window === 'undefined') {
    const runner = new TestRunner();
    runner.runAllTests().catch(console.error);
}
