/**
 * –¢–µ—Å—Ç—ã –¥–ª—è MovementSystem
 */
export class MovementSystemTest {
    constructor() {
        this.tests = [];
        this.passed = 0;
        this.failed = 0;
    }

    run() {
        console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ MovementSystem...');
        
        this.testBasicMovement();
        this.testTargetMovement();
        this.testPathMovement();
        this.testStopMovement();
        
        this.printResults();
    }

    testBasicMovement() {
        const testName = '–ë–∞–∑–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ';
        try {
            // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç
            const mockGameObject = this.createMockGameObject();
            const config = this.createMockConfig();
            
            const movementSystem = new MovementSystem(mockGameObject, config);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –ø–æ–∑–∏—Ü–∏–∏
            movementSystem.moveToPosition(100, 200);
            
            assert(movementSystem.isMovingToTarget() === true, '–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è');
            assert(movementSystem.currentTarget.x === 100, 'X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–ª–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100');
            assert(movementSystem.currentTarget.y === 200, 'Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–ª–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 200');

            this.passed++;
            console.log(`‚úÖ ${testName}`);
        } catch (error) {
            this.failed++;
            console.log(`‚ùå ${testName}: ${error.message}`);
        }
    }

    testTargetMovement() {
        const testName = '–î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏';
        try {
            const mockGameObject = this.createMockGameObject();
            const config = this.createMockConfig();
            
            const movementSystem = new MovementSystem(mockGameObject, config);
            
            const target = { x: 300, y: 400 };
            movementSystem.moveTo(target);
            
            assert(movementSystem.isMovingToTarget() === true, '–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è');
            assert(movementSystem.currentTarget === target, '–¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');

            this.passed++;
            console.log(`‚úÖ ${testName}`);
        } catch (error) {
            this.failed++;
            console.log(`‚ùå ${testName}: ${error.message}`);
        }
    }

    testPathMovement() {
        const testName = '–î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏';
        try {
            const mockGameObject = this.createMockGameObject();
            const config = this.createMockConfig();
            
            const movementSystem = new MovementSystem(mockGameObject, config);
            
            const path = [
                { x: 100, y: 100 },
                { x: 200, y: 200 },
                { x: 300, y: 300 }
            ];
            
            movementSystem.moveAlongPath(path);
            
            assert(movementSystem.currentPath === path, '–ü—É—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            assert(movementSystem.pathIndex === 0, '–ò–Ω–¥–µ–∫—Å –ø—É—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0');
            assert(movementSystem.isMovingToTarget() === true, '–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è');

            this.passed++;
            console.log(`‚úÖ ${testName}`);
        } catch (error) {
            this.failed++;
            console.log(`‚ùå ${testName}: ${error.message}`);
        }
    }

    testStopMovement() {
        const testName = '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è';
        try {
            const mockGameObject = this.createMockGameObject();
            const config = this.createMockConfig();
            
            const movementSystem = new MovementSystem(mockGameObject, config);
            
            // –ù–∞—á–∏–Ω–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
            movementSystem.moveToPosition(100, 200);
            assert(movementSystem.isMovingToTarget() === true, '–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
            movementSystem.stopMovement();
            assert(movementSystem.isMovingToTarget() === false, '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è');
            assert(movementSystem.currentTarget === null, '–¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞');
            assert(movementSystem.currentPath === null, '–ü—É—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω');

            this.passed++;
            console.log(`‚úÖ ${testName}`);
        } catch (error) {
            this.failed++;
            console.log(`‚ùå ${testName}: ${error.message}`);
        }
    }

    createMockGameObject() {
        return {
            x: 0,
            y: 0,
            width: 32,
            height: 32,
            isAlive: true,
            canFly: false,
            body: {
                setVelocity: (x, y) => {},
                setBounce: (value) => {},
                setDrag: (x, y) => {},
                setCollideWorldBounds: (value) => {}
            },
            setVelocity: (x, y) => {},
            stopMovement: () => {},
            setRotation: (angle) => {},
            distanceTo: (target) => {
                const dx = this.x - target.x;
                const dy = this.y - target.y;
                return Math.sqrt(dx * dx + dy * dy);
            },
            directionTo: (target) => {
                const dx = target.x - this.x;
                const dy = target.y - this.y;
                const length = Math.sqrt(dx * dx + dy * dy);
                return { x: dx / length, y: dy / length };
            },
            isInRange: (target, range) => {
                return this.distanceTo(target) <= range;
            },
            scene: {
                events: {
                    emit: (event, data) => {}
                }
            }
        };
    }

    createMockConfig() {
        return {
            get: (key, defaultValue) => {
                const values = {
                    speed: 100,
                    attackRange: 30,
                    updateInterval: 16,
                    strategy: 'linear'
                };
                return values[key] || defaultValue;
            }
        };
    }

    printResults() {
        const total = this.passed + this.failed;
        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ MovementSystem:`);
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.failed}`);
        console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((this.passed / total) * 100).toFixed(1)}%`);
    }
}

function assert(condition, message) {
    if (!condition) {
        throw new Error(message);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (typeof window === 'undefined') {
    const test = new MovementSystemTest();
    test.run();
}
