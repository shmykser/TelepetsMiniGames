import { Item } from '../core/objects/Item';
import { ITEM_TYPES, DROP_SETTINGS } from '../core/types/itemTypes';

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥—Ä–æ–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
 */
export class ItemDropManager {
    constructor(scene, egg) {
        this.scene = scene;
        this.egg = egg;
        this.luck = DROP_SETTINGS.baseLuck; // –ù–∞—á–∞–ª—å–Ω–æ–µ –≤–µ–∑–µ–Ω–∏–µ
        this.maxLuck = DROP_SETTINGS.maxLuck; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–µ–∑–µ–Ω–∏–µ
        this.items = []; // –ú–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä–æ–ø–∞ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –≤—Ä–∞–≥–∞
     */
    onEnemyKilled(enemy) {
        console.log(`üéÅ ItemDropManager.onEnemyKilled: –ø–æ–ª—É—á–µ–Ω –≤—Ä–∞–≥:`, enemy);
        if (this.shouldDropItem()) {
            console.log(`üéÅ ItemDropManager.onEnemyKilled: –¥—Ä–æ–ø –≤—ã–ø–∞–ª!`);
            console.log(`üéÅ ItemDropManager.onEnemyKilled: —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –ø–æ–∑–∏—Ü–∏–∏ (${enemy.x}, ${enemy.y})`);
            this.dropRandomItem(enemy.x, enemy.y);
        } else {
            console.log(`üéÅ ItemDropManager.onEnemyKilled: –¥—Ä–æ–ø –Ω–µ –≤—ã–ø–∞–ª`);
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥—Ä–æ–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    shouldDropItem() {
        const roll = Math.random() * 100;
        return roll < this.luck;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    dropRandomItem(x, y) {
        const availableItems = this.getAvailableItems();
        if (availableItems.length === 0) {
            return;
        }
        
        const randomItem = Phaser.Utils.Array.GetRandom(availableItems);
        this.createItem(x, y, randomItem);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥—Ä–æ–ø–∞
     */
    getAvailableItems() {
        const items = [ITEM_TYPES.HEART]; // –°–µ—Ä–¥—Ü–µ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ
        
        // –ö–ª–µ–≤–µ—Ä –≤—ã–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–µ–∑–µ–Ω–∏–µ <= 10
        if (this.luck <= DROP_SETTINGS.cloverMaxLuck) {
            items.push(ITEM_TYPES.CLOVER);
        }
        
        return items;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    createItem(x, y, itemType) {
        console.log(`üéÅ ItemDropManager.createItem: —Å–æ–∑–¥–∞–µ–º ${itemType} –≤ –ø–æ–∑–∏—Ü–∏–∏ (${x}, ${y})`);
        
        const item = new Item(this.scene, x, y, itemType);
        this.items.push(item);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ —Å—Ü–µ–Ω—É
        this.scene.add.existing(item);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫—É—é –≥–ª—É–±–∏–Ω—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–º–µ—Ç –±—ã–ª –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
        item.setDepth(1000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ü–µ–Ω—É
        console.log(`üéÅ ItemDropManager.createItem: –ø—Ä–µ–¥–º–µ—Ç ${itemType} —Å–æ–∑–¥–∞–Ω, –≤—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${this.items.length}`);
        console.log(`üéÅ ItemDropManager.createItem: –ø—Ä–µ–¥–º–µ—Ç –≤ —Å—Ü–µ–Ω–µ? ${this.scene.children.list.includes(item)}`);
        console.log(`üéÅ ItemDropManager.createItem: –ø–æ–∑–∏—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: (${item.x}, ${item.y})`);
        console.log(`üéÅ ItemDropManager.createItem: –≤–∏–¥–∏–º—ã–π? ${item.visible}, –∞–∫—Ç–∏–≤–Ω—ã–π? ${item.active}`);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        item.on('pointerdown', () => {
            this.collectItem(item);
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        this.scene.time.delayedCall(10000, () => {
            if (item && !item.isCollected) {
                this.removeItem(item);
            }
        });
        
        return item;
    }
    
    /**
     * –°–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    collectItem(item) {
        if (item.isCollected) {
            return false;
        }
        
        const itemType = item.itemType;
        let collected = false;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        switch (itemType) {
            case ITEM_TYPES.HEART:
                collected = this.egg.heal(20);
                break;
                
            case ITEM_TYPES.CLOVER:
                this.increaseLuck(DROP_SETTINGS.luckIncrease);
                collected = true;
                break;
        }
        
        if (collected) {
            item.collect();
            this.removeItem(item);
            this.showItemEffect(itemType);
        }
        
        return collected;
    }
    
    /**
     * –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–µ–∑–µ–Ω–∏—è
     */
    increaseLuck(amount) {
        const oldLuck = this.luck;
        this.luck = Math.min(this.maxLuck, this.luck + amount);
        const actualIncrease = this.luck - oldLuck;
        
        if (actualIncrease > 0) {
            this.showLuckIncreaseEffect(actualIncrease);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–µ–∑–µ–Ω–∏—è
     */
    showLuckIncreaseEffect(amount) {
        const luckText = this.scene.add.text(
            this.scene.cameras.main.width - 200, 
            50, 
            `üçÄ +${amount} –£–¥–∞—á–∞!`, 
            {
                fontSize: '20px',
                fill: '#00ff00',
                stroke: '#000000',
                strokeThickness: 2
            }
        );
        
        this.scene.tweens.add({
            targets: luckText,
            y: luckText.y - 20,
            alpha: 0,
            duration: 2000,
            ease: 'Power2',
            onComplete: () => {
                luckText.destroy();
            }
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    showItemEffect(itemType) {
        let effectText = '';
        let color = '#ffffff';
        
        switch (itemType) {
            case ITEM_TYPES.HEART:
                effectText = '‚ù§Ô∏è +20 HP';
                color = '#ff69b4';
                break;
            case ITEM_TYPES.CLOVER:
                effectText = 'üçÄ +10 –£–¥–∞—á–∞';
                color = '#00ff00';
                break;
        }
        
        const effect = this.scene.add.text(
            this.scene.cameras.main.width / 2, 
            100, 
            effectText, 
            {
                fontSize: '24px',
                fill: color,
                stroke: '#000000',
                strokeThickness: 2
            }
        );
        
        effect.setOrigin(0.5);
        
        this.scene.tweens.add({
            targets: effect,
            y: effect.y - 30,
            alpha: 0,
            duration: 1500,
            ease: 'Power2',
            onComplete: () => {
                effect.destroy();
            }
        });
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
     */
    removeItem(item) {
        const index = this.items.indexOf(item);
        if (index !== -1) {
            this.items.splice(index, 1);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–∑–µ–Ω–∏–∏
     */
    getLuckInfo() {
        return {
            current: this.luck,
            max: this.maxLuck,
            percentage: Math.round(this.luck)
        };
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    update(time, delta) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        this.items.forEach(item => {
            if (item && item.update) {
                item.update(time, delta);
            }
        });
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
     */
    clearAllItems() {
        this.items.forEach(item => {
            if (item && !item.isCollected) {
                item.destroy();
            }
        });
        this.items = [];
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    destroy() {
        this.clearAllItems();
    }
}
