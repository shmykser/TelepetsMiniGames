import { Enemy } from '../objects/Enemy.js';
import { enemyTypes } from '../types/enemyTypes';
import { enemyTypesByMinute, enemyWeights, SPAWN_CONSTANTS, SPAWN_SETTINGS, WAVE_SETTINGS } from '../types/waveTypes.js';
import { GeometryUtils } from '../utils/GeometryUtils.js';

/**
 * –°–∏—Å—Ç–µ–º–∞ –≤–æ–ª–Ω –≤ —Å—Ç–∏–ª–µ Vampire Survivors
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤–æ–ª–Ω–∞–º–∏, —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –∏ —Å–ø–∞–≤–Ω–æ–º –≤—Ä–∞–≥–æ–≤
 */
export class WaveSystem {
    constructor(scene, probabilitySystem = null) {
        this.scene = scene;
        this.waveSettings = WAVE_SETTINGS;
        this.spawnSettings = SPAWN_SETTINGS;
        this.probabilitySystem = probabilitySystem;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        this.gameStartTime = 0;
        this.currentMinute = 1;
        this.isGameActive = false;
        this.isGameEnded = false;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.totalEnemiesSpawned = 0;
        this.totalEnemiesKilled = 0;
        this.currentEnemiesOnScreen = 0;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∞–≤–Ω–∞
        this.spawnTimer = null;
        
        // –°–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        this.enemies = [];
        
        // –¶–µ–ª—å –¥–ª—è –≤—Ä–∞–≥–æ–≤ (—è–π—Ü–æ)
        this.target = null;
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã
        this.update = this.update.bind(this);
        this.spawnEnemy = this.spawnEnemy.bind(this);
        this.spawnEnemyBatch = this.spawnEnemyBatch.bind(this);
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É
     */
    startGame() {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        if (this.scene?.time?.now !== undefined) {
            this.gameStartTime = this.scene.time.now;
            console.log('üéÆ [WaveSystem] gameStartTime —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ scene.time.now:', this.gameStartTime);
        } else {
            console.warn('üéÆ [WaveSystem] scene.time.now –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Date.now()');
            this.gameStartTime = Date.now();
        }
        
        this.isGameActive = true;
        this.isGameEnded = false;
        this.currentMinute = 1;
        this.totalEnemiesSpawned = 0;
        this.totalEnemiesKilled = 0;
        this.currentEnemiesOnScreen = 0;
        this.enemies = [];
        
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∞–≤–Ω –≤—Ä–∞–≥–æ–≤
        this.startSpawning();
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        this.scene.events.emit('gameStarted', {
            duration: this.waveSettings.duration,
            maxWaves: this.waveSettings.maxWaves
        });
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–≥—Ä—É
     */
    stopGame() {
        this.isGameActive = false;
        this.isGameEnded = true;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∞–≤–Ω
        if (this.spawnTimer) {
            clearTimeout(this.spawnTimer);
            this.spawnTimer = null;
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã (–±–µ–∑ –∑–∞—Å—á–µ—Ç–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)
        this.enemies.forEach(enemy => {
            if (enemy && enemy.destroy) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –≤—Ä–∞–≥ —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                enemy._forceDestroyed = true;
                enemy.destroy();
            }
        });
        this.enemies = [];
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        this.scene.events.emit('gameEnded', {
            totalEnemiesSpawned: this.totalEnemiesSpawned,
            totalEnemiesKilled: this.totalEnemiesKilled,
            gameTime: this.scene.time.now - this.gameStartTime
        });
    }
    
    /**
     * –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–≥—Ä—É –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
     */
    resumeGame() {
        if (!this.isGameActive || this.isGameEnded) return;
        
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∞–≤–Ω –≤—Ä–∞–≥–æ–≤
        this.startSpawning();
        
        console.log('üåä [WaveSystem] –ò–≥—Ä–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–ø–∞–≤–Ω –≤—Ä–∞–≥–æ–≤
     */
    startSpawning() {
        this.scheduleNextSpawn();
    }
    
    /**
     * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Å–ø–∞–≤–Ω
     */
    scheduleNextSpawn() {
        if (!this.isGameActive) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤—Ä–∞–≥–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        if (this.currentEnemiesOnScreen >= this.spawnSettings.maxEnemiesOnScreen) {
            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            this.spawnTimer = setTimeout(() => {
                this.scheduleNextSpawn();
            }, SPAWN_CONSTANTS.RETRY_DELAY);
            return;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∞–≤–Ω–∞
        const delay = this.calculateSpawnDelay();
        
        this.spawnTimer = setTimeout(() => {
            this.spawnEnemyBatch();
            this.scheduleNextSpawn();
        }, delay);
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∞–≤–Ω–∞
     */
    calculateSpawnDelay() {
        const gameProgress = this.getGameProgress(); // 0-1
        const minRate = this.spawnSettings.minRate;
        const baseRate = this.spawnSettings.baseRate;
        
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–ø–∞–≤–Ω–∞
        const currentRate = baseRate * Math.pow(this.spawnSettings.rateMultiplier, gameProgress * SPAWN_CONSTANTS.SPAWN_RATE_MULTIPLIER);
        const finalRate = Math.max(minRate, currentRate);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        const randomFactor = GeometryUtils.randomFloat(
            this.spawnSettings.randomFactor.min,
            this.spawnSettings.randomFactor.max
        );
        
        return finalRate * randomFactor;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –≤—Ä–∞–≥–∞
     */
    spawnEnemy() {
        if (!this.isGameActive) {
            return;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –≤—Ä–∞–≥–∞
        const enemyType = this.selectEnemyType();
        if (!enemyType) {
            return;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–ø–∞–≤–Ω–∞
        const position = this.getSpawnPosition();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–∏–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ProbabilitySystem
        const enhancementMultiplier = this.probabilitySystem 
            ? this.probabilitySystem.rollEnemyEnhancement() 
            : 1.0;
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–∞ —Å —É—Å–∏–ª–µ–Ω–∏–µ–º
        const enemy = Enemy.CreateEnemy(this.scene, enemyType, position.x, position.y, enhancementMultiplier);
        if (!enemy) {
            return;
        }
        
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        this.enemies.push(enemy);
        this.currentEnemiesOnScreen++;
        this.totalEnemiesSpawned++;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ—Ä—Ç–∏
        enemy.on('enemyKilled', this.onEnemyKilled.bind(this));
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –¥–ª—è –≤—Ä–∞–≥–∞ (—è–π—Ü–æ)
        if (this.target) {
            enemy.setTarget(this.target);
        }
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —Å–ø–∞–≤–Ω–∞
        this.scene.events.emit('enemySpawned', {
            enemyType: enemyType,
            position: position,
            totalSpawned: this.totalEnemiesSpawned
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø—É –≤—Ä–∞–≥–æ–≤ (batch spawn)
     */
    spawnEnemyBatch(count = null) {
        if (!this.isGameActive) {
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞–≥–æ–≤ –¥–ª—è —Å–ø–∞–≤–Ω–∞
        const enemiesToSpawn = count !== null ? count : this.spawnSettings.enemiesPerSpawn;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤—Ä–∞–≥–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã
        const availableSlots = this.spawnSettings.maxEnemiesOnScreen - this.currentEnemiesOnScreen;
        const actualSpawnCount = Math.min(enemiesToSpawn, availableSlots);
        
        if (actualSpawnCount <= 0) {
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞–≥–æ–≤
        for (let i = 0; i < actualSpawnCount; i++) {
            this.spawnEnemy();
        }
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–ø–∞–≤–Ω–∞
        this.scene.events.emit('enemyBatchSpawned', {
            spawnedCount: actualSpawnCount,
            requestedCount: enemiesToSpawn,
            totalSpawned: this.totalEnemiesSpawned
        });
    }
    
    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø –≤—Ä–∞–≥–∞ –¥–ª—è —Å–ø–∞–≤–Ω–∞
     */
    selectEnemyType() {
        const availableTypes = this.getAvailableEnemyTypes();
        if (availableTypes.length === 0) {
            return null;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤
        const weights = availableTypes.map(type => enemyWeights[type] || 1);
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥)
        const selectedType = this.selectRandomWithWeights(availableTypes, weights);
        
        return selectedType;
    }
    
    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
     */
    selectRandomWithWeights(items, weights) {
        if (items.length === 0) return null;
        if (items.length === 1) return items[0];
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –≤–µ—Å
        const totalWeight = weights.reduce((sum, weight) => sum + weight, 0);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
        const random = Phaser.Math.Between(0, totalWeight - 1);
        
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ –≤–µ—Å—É
        let currentWeight = 0;
        for (let i = 0; i < items.length; i++) {
            currentWeight += weights[i];
            if (random < currentWeight) {
                return items[i];
            }
        }
        
        // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        return items[items.length - 1];
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –≤—Ä–∞–≥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç—ã
     */
    getAvailableEnemyTypes() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–∏–ø—ã –≤—Ä–∞–≥–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç—ã
        const availableTypes = [];
        for (let minute = 1; minute <= this.currentMinute; minute++) {
            if (enemyTypesByMinute[minute]) {
                availableTypes.push(...enemyTypesByMinute[minute]);
            }
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        const uniqueTypes = [...new Set(availableTypes)];
        
        return uniqueTypes;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ø–∞–≤–Ω–∞ –≤—Ä–∞–≥–∞
     */
    getSpawnPosition() {
        const { width, height } = this.scene.scale;
        const margin = SPAWN_CONSTANTS.SPAWN_MARGIN;
        
        // –°–ø–∞–≤–Ω–∏–º –ø–æ –∫—Ä–∞—è–º —ç–∫—Ä–∞–Ω–∞
        const side = GeometryUtils.randomBetween(0, SPAWN_CONSTANTS.SPAWN_SIDES); // 0-–≤–µ—Ä—Ö, 1-–ø—Ä–∞–≤–æ, 2-–Ω–∏–∑, 3-–ª–µ–≤–æ
        
        let x, y;
        switch (side) {
            case 0: // –í–µ—Ä—Ö
                x = GeometryUtils.randomBetween(margin, width - margin);
                y = -margin;
                break;
            case 1: // –ü—Ä–∞–≤–æ
                x = width + margin;
                y = GeometryUtils.randomBetween(margin, height - margin);
                break;
            case 2: // –ù–∏–∑
                x = GeometryUtils.randomBetween(margin, width - margin);
                y = height + margin;
                break;
            case 3: // –õ–µ–≤–æ
                x = -margin;
                y = GeometryUtils.randomBetween(margin, height - margin);
                break;
        }
        
        return { x, y };
    }
    
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ—Ä—Ç–∏ –≤—Ä–∞–≥–∞
     */
    onEnemyKilled(enemy) {
        // –ù–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤
        if (enemy._forceDestroyed) {
            return;
        }
        
        this.totalEnemiesKilled++;
        this.currentEnemiesOnScreen--;
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
        const index = this.enemies.indexOf(enemy);
        if (index > -1) {
            this.enemies.splice(index, 1);
        }
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —Å–º–µ—Ä—Ç–∏
        this.scene.events.emit('enemyKilled', {
            enemy: enemy,
            enemyType: enemy.enemyType,
            totalKilled: this.totalEnemiesKilled
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    update() {
        if (!this.isGameActive) return;
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        const currentTime = this.scene?.time?.now !== undefined ? this.scene.time.now : Date.now();
        const gameTime = currentTime - this.gameStartTime;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
        if (gameTime >= this.waveSettings.duration) {
            this.stopGame();
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –º–∏–Ω—É—Ç—É
        const newMinute = GeometryUtils.floor(gameTime / this.waveSettings.waveDuration) + 1;
        if (newMinute !== this.currentMinute) {
            this.currentMinute = newMinute;
            this.onMinuteChanged();
        }
        
        // –û—á–∏—â–∞–µ–º –º–µ—Ä—Ç–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
        this.enemies = this.enemies.filter(enemy => enemy && enemy.isAlive);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –º–∏–Ω—É—Ç—ã
     */
    onMinuteChanged() {
        const availableTypes = this.getAvailableEnemyTypes();
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã –º–∏–Ω—É—Ç—ã
        this.scene.events.emit('minuteChanged', {
            minute: this.currentMinute,
            availableEnemyTypes: availableTypes,
            gameProgress: this.getGameProgress()
        });
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä—ã (0-1)
     */
    getGameProgress() {
        if (!this.isGameActive) return 0;
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        const currentTime = this.scene?.time?.now !== undefined ? this.scene.time.now : Date.now();
        const gameTime = currentTime - this.gameStartTime;
        return Math.min(1, gameTime / this.waveSettings.duration);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    getRemainingTime() {
        if (!this.isGameActive) return 0;
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        const currentTime = this.scene?.time?.now !== undefined ? this.scene.time.now : Date.now();
        const gameTime = currentTime - this.gameStartTime;
        return Math.max(0, this.waveSettings.duration - gameTime);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–∏–Ω—É—Ç—É –∏–≥—Ä—ã
     */
    getCurrentMinute() {
        return this.currentMinute;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–ª—å –¥–ª—è –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
     */
    setTarget(target) {
        this.target = target;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤—Ä–∞–≥–æ–≤
        this.enemies.forEach(enemy => {
            if (enemy && enemy.setTarget) {
                enemy.setTarget(target);
            }
        });
        
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ (–≤—ã–Ω–µ—Å–µ–Ω–æ –∏–∑ EggDefense)
     */
    updateEnemies(time, delta) {
        this.enemies.forEach(enemy => {
            if (enemy && enemy.isAlive && enemy.update) {
                enemy.update(time, delta);
            }
        });
    }
    
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
     */
    destroy() {
        this.stopGame();
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
        this.enemies.forEach(enemy => {
            if (enemy && enemy.destroy) {
                enemy.destroy();
            }
        });
        
        this.enemies = [];
    }
}
