import { BaseHTMLComponent } from './BaseHTMLComponent.js';
import { TELEGRAM_UI_STYLES, UI_CONSTANTS } from '../settings/GameSettings.js';

/**
 * HTML –≤–µ—Ä—Å–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Å—Ç–∏–ª–µ Telegram WebApp
 * –°–æ–∑–¥–∞–µ—Ç HTML —ç–ª–µ–º–µ–Ω—Ç –ø–æ–≤–µ—Ä—Ö Phaser canvas
 */
export class HTMLResultsTable extends BaseHTMLComponent {
    constructor(scene, x, y, config = {}) {
        const defaultConfig = {
            title: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã',
            data: {},
            width: 400, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É
            height: 300, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
            backgroundColor: UI_CONSTANTS.RESULTS_TABLE.DEFAULT_BACKGROUND_COLOR,
            textColor: UI_CONSTANTS.RESULTS_TABLE.DEFAULT_TEXT_COLOR,
            fontSize: '18px', // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            fontFamily: UI_CONSTANTS.RESULTS_TABLE.DEFAULT_FONT_FAMILY,
            borderRadius: UI_CONSTANTS.RESULTS_TABLE.DEFAULT_BORDER_RADIUS,
            padding: '25px', // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
            zIndex: TELEGRAM_UI_STYLES.zIndex.modal
        };
        
        super(scene, x, y, { ...defaultConfig, ...config });
        
        this.title = this.config.title;
        this.data = this.config.data;
        this.titleElement = null;
        this.dataContainer = null;
        this.buttonsContainer = null;
        
        this.createTableElements();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        this.updatePosition();
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–±–ª–∏—Ü—ã
     */
    createTableElements() {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        this.titleElement = document.createElement('div');
        this.titleElement.textContent = this.title;
        this.titleElement.style.fontSize = '28px'; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞
        this.titleElement.style.fontWeight = TELEGRAM_UI_STYLES.fonts.weightBold;
        this.titleElement.style.color = TELEGRAM_UI_STYLES.colors.text;
        this.titleElement.style.textAlign = 'center';
        this.titleElement.style.marginBottom = '20px'; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø
        this.titleElement.style.textShadow = TELEGRAM_UI_STYLES.effects.textShadow;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        this.dataContainer = document.createElement('div');
        this.dataContainer.style.display = 'flex';
        this.dataContainer.style.flexDirection = 'column';
        this.dataContainer.style.gap = '8px';
        this.dataContainer.style.marginBottom = '16px';
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        this.buttonsContainer = document.createElement('div');
        this.buttonsContainer.style.display = 'flex';
        this.buttonsContainer.style.gap = '12px';
        this.buttonsContainer.style.justifyContent = 'center';
        this.buttonsContainer.style.pointerEvents = 'auto'; // –í–∫–ª—é—á–∞–µ–º –∫–ª–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.container.appendChild(this.titleElement);
        this.container.appendChild(this.dataContainer);
        this.container.appendChild(this.buttonsContainer);
        
        // –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        this.container.style.flexDirection = 'column';
        this.container.style.alignItems = 'center';
        this.container.style.justifyContent = 'flex-start';
        this.container.style.padding = '20px';
        this.container.style.textAlign = 'center';
        
        this.createDataRows();
        this.createButtons();
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    createDataRows() {
        if (!this.data || !this.dataContainer) return;
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.dataContainer.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        Object.entries(this.data).forEach(([key, value]) => {
            const rowElement = document.createElement('div');
            rowElement.style.display = 'flex';
            rowElement.style.justifyContent = 'space-between';
            rowElement.style.width = '100%';
            rowElement.style.fontSize = '20px'; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            rowElement.style.color = TELEGRAM_UI_STYLES.colors.text;
            rowElement.style.fontFamily = TELEGRAM_UI_STYLES.fonts.family;
            rowElement.style.padding = '8px 0'; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —Å—Ç—Ä–æ–∫
            
            const label = this.getDataLabel(key);
            const displayValue = this.formatDataValue(value);
            
            rowElement.innerHTML = `
                <span style="color: ${TELEGRAM_UI_STYLES.colors.textSecondary}">${label}:</span>
                <span style="color: ${TELEGRAM_UI_STYLES.colors.text}">${displayValue}</span>
            `;
            
            this.dataContainer.appendChild(rowElement);
        });
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏
     */
    createButtons() {
        // –ö–Ω–æ–ø–∫–∞ "–†–ï–°–¢–ê–†–¢"
        const restartButton = this.createButton('–†–ï–°–¢–ê–†–¢', () => {
            console.log('üéÆ [HTMLResultsTable] –ö–Ω–æ–ø–∫–∞ –†–ï–°–¢–ê–†–¢ –Ω–∞–∂–∞—Ç–∞');
            this.emit('restart');
        });
        
        // –ö–Ω–æ–ø–∫–∞ "–í –ú–ï–ù–Æ"
        const menuButton = this.createButton('–í –ú–ï–ù–Æ', () => {
            console.log('üéÆ [HTMLResultsTable] –ö–Ω–æ–ø–∫–∞ –í –ú–ï–ù–Æ –Ω–∞–∂–∞—Ç–∞');
            this.emit('menu');
        });
        
        this.buttonsContainer.appendChild(restartButton);
        this.buttonsContainer.appendChild(menuButton);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É
     * @param {string} text - –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
     * @param {Function} onClick - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
     * @returns {HTMLElement} –≠–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏
     */
    createButton(text, onClick) {
        const button = document.createElement('button');
        button.textContent = text;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª–∏ –∏–∑ BaseHTMLComponent –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ Telegram WebApp
        button.style.backgroundColor = TELEGRAM_UI_STYLES.colors.background;
        button.style.color = TELEGRAM_UI_STYLES.colors.text;
        button.style.border = 'none';
        button.style.borderRadius = TELEGRAM_UI_STYLES.sizes.borderRadius;
        button.style.padding = TELEGRAM_UI_STYLES.sizes.padding;
        button.style.fontSize = '18px'; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∫–Ω–æ–ø–æ–∫
        button.style.fontFamily = TELEGRAM_UI_STYLES.fonts.family;
        button.style.fontWeight = TELEGRAM_UI_STYLES.fonts.weight;
        button.style.lineHeight = TELEGRAM_UI_STYLES.fonts.lineHeight;
        button.style.cursor = 'pointer';
        button.style.transition = TELEGRAM_UI_STYLES.effects.transition;
        button.style.boxShadow = TELEGRAM_UI_STYLES.effects.boxShadow;
        button.style.backdropFilter = TELEGRAM_UI_STYLES.effects.backdropFilter;
        button.style.display = 'flex';
        button.style.alignItems = 'center';
        button.style.justifyContent = 'center';
        button.style.minWidth = '120px'; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–Ω–æ–ø–æ–∫
        button.style.minHeight = '50px'; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –∫–Ω–æ–ø–æ–∫
        button.style.pointerEvents = 'auto'; // –í–∫–ª—é—á–∞–µ–º –∫–ª–∏–∫–∏
        
        // Hover —ç—Ñ—Ñ–µ–∫—Ç
        button.addEventListener('mouseenter', () => {
            button.style.backgroundColor = TELEGRAM_UI_STYLES.colors.backgroundHover;
            button.style.boxShadow = TELEGRAM_UI_STYLES.effects.boxShadowHover;
        });
        
        button.addEventListener('mouseleave', () => {
            button.style.backgroundColor = TELEGRAM_UI_STYLES.colors.background;
            button.style.boxShadow = TELEGRAM_UI_STYLES.effects.boxShadow;
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        button.addEventListener('click', (e) => {
            console.log('üéÆ [HTMLResultsTable] Button clicked:', text);
            e.preventDefault();
            e.stopPropagation();
            onClick();
        });
        
        return button;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     * @param {string} key - –ö–ª—é—á –¥–∞–Ω–Ω—ã—Ö
     * @returns {string} –ù–∞–∑–≤–∞–Ω–∏–µ
     */
    getDataLabel(key) {
        const labels = {
            time: '–í—Ä–µ–º—è',
            score: '–°—á–µ—Ç',
            enemiesKilled: '–£–±–∏—Ç–æ –≤—Ä–∞–≥–æ–≤',
            wavesCompleted: '–í–æ–ª–Ω –ø—Ä–æ–π–¥–µ–Ω–æ',
            damageDealt: '–£—Ä–æ–Ω –Ω–∞–Ω–µ—Å–µ–Ω',
            damageTaken: '–£—Ä–æ–Ω –ø–æ–ª—É—á–µ–Ω',
            abilitiesUsed: '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ',
            itemsCollected: '–ü—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–æ–±—Ä–∞–Ω–æ'
        };
        
        return labels[key] || key;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     * @param {*} value - –ó–Ω–∞—á–µ–Ω–∏–µ
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    formatDataValue(value) {
        if (typeof value === 'number') {
            if (value % 1 === 0) {
                return value.toString();
            } else {
                return value.toFixed(1);
            }
        }
        return value.toString();
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ
     */
    setData(data) {
        this.data = data;
        this.createDataRows();
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
     * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫
     */
    setTitle(title) {
        this.title = title;
        if (this.titleElement) {
            this.titleElement.textContent = title;
        }
    }
    
    /**
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º applyStyles –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è pointer events
     */
    applyStyles() {
        // –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥
        super.applyStyles();
        
        // –í–∫–ª—é—á–∞–µ–º pointer events –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
        this.container.style.pointerEvents = 'auto';
    }
    
    /**
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º setPosition –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     */
    setPosition(x, y) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –≤—Å–µ–≥–¥–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        this.updatePosition();
    }
    
    /**
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
     */
    updatePosition() {
        if (this.scene && this.scene.game && this.scene.game.canvas) {
            const canvas = this.scene.game.canvas;
            const canvasRect = canvas.getBoundingClientRect();
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ canvas, –∞ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            const centerX = canvasRect.left + (canvasRect.width / 2);
            const centerY = canvasRect.top + (canvasRect.height / 2);
            
            this.container.style.left = `${centerX - this.config.width / 2}px`;
            this.container.style.top = `${centerY - this.config.height / 2}px`;
        }
    }
    
    /**
     * –≠–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {*} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    emit(event, data = null) {
        console.log('üéÆ [HTMLResultsTable] Emitting event:', `resultsTable:${event}`);
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        const customEvent = new CustomEvent(`resultsTable:${event}`, {
            detail: data
        });
        document.dispatchEvent(customEvent);
    }
}
