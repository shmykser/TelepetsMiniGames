import Phaser from 'phaser';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Ç–∞–±–ª–∏—á–∫—É —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
 */
export class AbilitiesDisplay extends Phaser.GameObjects.Container {
    constructor(scene, x, y, abilitySystem, config = {}) {
        super(scene, x, y);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        this.abilitySystem = abilitySystem;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.displayConfig = {
            width: 180,
            height: 200,  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è
            backgroundColor: 0x000000,
            backgroundAlpha: 0.8,
            borderColor: 0x00ff00,
            borderWidth: 2,
            textColor: '#ffffff',
            fontSize: '10px',
            padding: 6,
            lineHeight: 10,
            ...config
        };
        
        // –°–æ–∑–¥–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.createDisplayElements();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        this.updateValues();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
        scene.add.existing(this);
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    createDisplayElements() {
        const cfg = this.displayConfig;
        
        // –§–æ–Ω
        this.background = this.scene.add.rectangle(0, 0, cfg.width, cfg.height, cfg.backgroundColor, cfg.backgroundAlpha);
        this.background.setStrokeStyle(cfg.borderWidth, cfg.borderColor);
        this.add(this.background);
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        this.titleText = this.scene.add.text(0, -cfg.height/2 + 15, '–°–ü–û–°–û–ë–ù–û–°–¢–ò', {
            fontSize: '14px',
            fontStyle: 'bold',
            color: '#ffff00',
            fontFamily: 'Arial'
        });
        this.titleText.setOrigin(0.5, 0.5);
        this.add(this.titleText);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        this.abilityTexts = {};
        const abilities = this.getDisplayAbilities();
        
        abilities.forEach((ability, index) => {
            const y = -cfg.height/2 + 35 + (index * cfg.lineHeight);
            
            // –ò–∫–æ–Ω–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ (—É–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø)
            const labelText = this.scene.add.text(-cfg.width/2 + cfg.padding + 5, y, `${ability.icon} ${ability.name}:`, {
                fontSize: cfg.fontSize,
                color: cfg.textColor,
                fontFamily: 'Arial'
            });
            labelText.setOrigin(0, 0.5);
            this.add(labelText);
            
            // –ó–Ω–∞—á–µ–Ω–∏–µ (–ø—Ä–∏–±–ª–∏–∑–∏–ª–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é)
            const valueText = this.scene.add.text(cfg.width/2 - cfg.padding - 5, y, '0', {
                fontSize: cfg.fontSize,
                color: '#00ff00',
                fontStyle: 'bold',
                fontFamily: 'Arial'
            });
            valueText.setOrigin(1, 0.5);
            this.add(valueText);
            
            this.abilityTexts[ability.key] = {
                label: labelText,
                value: valueText
            };
        });
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    getDisplayAbilities() {
        return [
            {
                key: 'tapDamage',
                name: '–£—Ä–æ–Ω —Ç–∞–ø–∞',
                icon: '‚öîÔ∏è'
            },
            {
                key: 'tapExplosion',
                name: '–í–∑—Ä—ã–≤ —Ç–∞–ø–∞',
                icon: 'üí•'
            },
            {
                key: 'tapExplosionDamage',
                name: '–£—Ä–æ–Ω –≤–∑—Ä—ã–≤–∞',
                icon: 'üí•'
            },
            {
                key: 'eggMaxHealth',
                name: '–ó–¥–æ—Ä–æ–≤—å–µ —è–π—Ü–∞',
                icon: '‚ù§Ô∏è'
            },
            {
                key: 'eggDamage',
                name: '–£—Ä–æ–Ω —è–π—Ü–∞',
                icon: 'ü•ö'
            },
            {
                key: 'eggCooldown',
                name: '–ö—É–ª–¥–∞—É–Ω',
                icon: '‚è±Ô∏è'
            },
            {
                key: 'eggRadius',
                name: '–†–∞–¥–∏—É—Å',
                icon: 'üéØ'
            },
            {
                key: 'luck',
                name: '–£–¥–∞—á–∞',
                icon: 'üçÄ'
            },
            {
                key: 'pitCount',
                name: '–Ø–º—ã',
                icon: 'üï≥Ô∏è'
            },
            {
                key: 'shovelCount',
                name: '–õ–æ–ø–∞—Ç—ã',
                icon: 'ü™ì'
            },
            {
                key: 'aura',
                name: '–ê—É—Ä–∞',
                icon: '‚ú®'
            },
            {
                key: 'auraDamage',
                name: '–£—Ä–æ–Ω –∞—É—Ä—ã',
                icon: '‚ú®'
            },
            {
                key: 'eggExplosion',
                name: '–í–∑—Ä—ã–≤ —è–π—Ü–∞',
                icon: 'üí•'
            },
            {
                key: 'eggExplosionDamage',
                name: '–£—Ä–æ–Ω –≤–∑—Ä—ã–≤–∞',
                icon: 'üí•'
            },
            {
                key: 'eggExplosionRadius',
                name: '–†–∞–¥–∏—É—Å –≤–∑—Ä—ã–≤–∞',
                icon: 'üéØ'
            },
            {
                key: 'eggExplosionCooldown',
                name: '–ö—É–ª–¥–∞—É–Ω –≤–∑—Ä—ã–≤–∞',
                icon: '‚è±Ô∏è'
            }
        ];
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
     */
    updateValues() {
        if (!this.abilitySystem) return;
        
        const values = this.abilitySystem.getAllAbilities();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        Object.keys(this.abilityTexts).forEach(abilityKey => {
            const textElements = this.abilityTexts[abilityKey];
            let displayValue = values[abilityKey] || 0;
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            switch (abilityKey) {
                case 'eggCooldown':
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                    displayValue = `${(displayValue / 1000).toFixed(1)}—Å`;
                    break;
                case 'eggRadius':
                case 'eggExplosionRadius':
                    displayValue = `${displayValue}px`;
                    break;
                case 'eggExplosionCooldown':
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                    displayValue = `${(displayValue / 1000).toFixed(1)}—Å`;
                    break;
                case 'tapExplosionDamage':
                case 'auraDamage':
                case 'eggExplosionDamage':
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 0
                    displayValue = displayValue > 0 ? displayValue : '0';
                    break;
                default:
                    displayValue = displayValue.toString();
            }
            
            textElements.value.setText(displayValue);
        });
    }
    
    /**
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    update(time, delta) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 500–º—Å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (!this.lastUpdate || time - this.lastUpdate > 500) {
            this.updateValues();
            this.lastUpdate = time;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/—Å–∫—Ä—ã–≤–∞–µ—Ç –¥–∏—Å–ø–ª–µ–π
     */
    toggle() {
        this.visible = !this.visible;
    }
    
    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç –¥–∏—Å–ø–ª–µ–π
     */
    hide() {
        this.visible = false;
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏—Å–ø–ª–µ–π
     */
    show() {
        this.visible = true;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –¥–∏—Å–ø–ª–µ—è
     */
    setDisplayPosition(x, y) {
        this.setPosition(x, y);
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    destroy() {
        this.abilityTexts = null;
        this.abilitySystem = null;
        super.destroy();
    }
}