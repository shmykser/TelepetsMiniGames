import { BaseHTMLComponent } from './BaseHTMLComponent.js';
import { TELEGRAM_UI_STYLES, UI_CONSTANTS } from '../settings/GameSettings.js';

/**
 * HTML –≤–µ—Ä—Å–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤ —Å—Ç–∏–ª–µ Telegram WebApp
 * –°–æ–∑–¥–∞–µ—Ç HTML —ç–ª–µ–º–µ–Ω—Ç –ø–æ–≤–µ—Ä—Ö Phaser canvas
 */
export class HTMLAbilitiesDisplay extends BaseHTMLComponent {
    constructor(scene, x, y, abilitySystem, config = {}) {
        const defaultConfig = {
            width: UI_CONSTANTS.ABILITIES_DISPLAY.DEFAULT_WIDTH,
            height: UI_CONSTANTS.ABILITIES_DISPLAY.DEFAULT_HEIGHT,
            backgroundColor: UI_CONSTANTS.ABILITIES_DISPLAY.DEFAULT_BACKGROUND_COLOR,
            textColor: UI_CONSTANTS.ABILITIES_DISPLAY.DEFAULT_TEXT_COLOR,
            fontSize: UI_CONSTANTS.ABILITIES_DISPLAY.DEFAULT_FONT_SIZE,
            fontFamily: UI_CONSTANTS.ABILITIES_DISPLAY.DEFAULT_FONT_FAMILY,
            borderRadius: UI_CONSTANTS.ABILITIES_DISPLAY.DEFAULT_BORDER_RADIUS,
            padding: UI_CONSTANTS.ABILITIES_DISPLAY.DEFAULT_PADDING,
            zIndex: TELEGRAM_UI_STYLES.zIndex.base,
            visible: false // –°–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        };
        
        super(scene, x, y, { ...defaultConfig, ...config });
        
        this.abilitySystem = abilitySystem;
        this.titleElement = null;
        this.statsContainer = null;
        this.isVisible = false;
        
        this.createDisplayElements();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ abilitySystem –≥–æ—Ç–æ–≤
        if (this.abilitySystem && typeof this.abilitySystem.getAllAbilities === 'function') {
            this.updateValues();
        } else {
            // –ï—Å–ª–∏ abilitySystem –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            this.createPlaceholder();
        }
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.setVisible(false);
        console.log('üé® [HTMLAbilitiesDisplay] –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–∫—Ä—ã—Ç–∞, isVisible:', this.isVisible);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    createDisplayElements() {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        this.titleElement = document.createElement('div');
        this.titleElement.textContent = '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏';
        this.titleElement.style.fontSize = TELEGRAM_UI_STYLES.fonts.size;
        this.titleElement.style.fontWeight = TELEGRAM_UI_STYLES.fonts.weightBold;
        this.titleElement.style.color = TELEGRAM_UI_STYLES.colors.text;
        this.titleElement.style.textAlign = 'center';
        this.titleElement.style.marginBottom = '8px';
        this.titleElement.style.textShadow = TELEGRAM_UI_STYLES.effects.textShadow;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.statsContainer = document.createElement('div');
        this.statsContainer.style.display = 'flex';
        this.statsContainer.style.flexDirection = 'column';
        this.statsContainer.style.gap = '4px';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.container.appendChild(this.titleElement);
        this.container.appendChild(this.statsContainer);
        
        // –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
        this.container.style.flexDirection = 'column';
        this.container.style.alignItems = 'flex-start';
        this.container.style.justifyContent = 'flex-start';
        this.container.style.padding = '12px';
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
     */
    updateValues() {
        if (!this.abilitySystem || !this.statsContainer) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ getAllAbilities —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (typeof this.abilitySystem.getAllAbilities !== 'function') {
            console.warn('üé® [HTMLAbilitiesDisplay] abilitySystem.getAllAbilities –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É');
            this.createPlaceholder();
            return;
        }
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.statsContainer.innerHTML = '';
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        const abilities = this.abilitySystem.getAllAbilities();
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        Object.entries(abilities).forEach(([key, value]) => {
            const statElement = document.createElement('div');
            statElement.style.display = 'flex';
            statElement.style.justifyContent = 'space-between';
            statElement.style.width = '100%';
            statElement.style.fontSize = TELEGRAM_UI_STYLES.fonts.sizeSmall;
            statElement.style.color = TELEGRAM_UI_STYLES.colors.text;
            statElement.style.fontFamily = TELEGRAM_UI_STYLES.fonts.family;
            
            const label = this.getAbilityLabel(key);
            const displayValue = this.formatValue(value);
            
            statElement.innerHTML = `
                <span style="color: ${TELEGRAM_UI_STYLES.colors.textSecondary}">${label}:</span>
                <span style="color: ${TELEGRAM_UI_STYLES.colors.text}">${displayValue}</span>
            `;
            
            this.statsContainer.appendChild(statElement);
        });
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
     * @param {string} key - –ö–ª—é—á —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
     * @returns {string} –ù–∞–∑–≤–∞–Ω–∏–µ
     */
    getAbilityLabel(key) {
        const labels = {
            tapDamage: '–£—Ä–æ–Ω —Ç–∞–ø–∞',
            tapExplosion: '–í–∑—Ä—ã–≤ —Ç–∞–ø–∞',
            tapExplosionDamage: '–£—Ä–æ–Ω –≤–∑—Ä—ã–≤–∞',
            eggMaxHealth: '–ó–¥–æ—Ä–æ–≤—å–µ —è–π—Ü–∞',
            eggDamage: '–£—Ä–æ–Ω —è–π—Ü–∞',
            eggCooldown: '–ö—É–ª–¥–∞—É–Ω',
            eggRadius: '–†–∞–¥–∏—É—Å',
            luck: '–£–¥–∞—á–∞',
            pitCount: '–Ø–º—ã',
            shovelCount: '–õ–æ–ø–∞—Ç—ã',
            aura: '–ê—É—Ä–∞',
            auraDamage: '–£—Ä–æ–Ω –∞—É—Ä—ã',
            eggExplosion: '–í–∑—Ä—ã–≤ —è–π—Ü–∞',
            eggExplosionDamage: '–£—Ä–æ–Ω –≤–∑—Ä—ã–≤–∞ —è–π—Ü–∞',
            eggExplosionRadius: '–†–∞–¥–∏—É—Å –≤–∑—Ä—ã–≤–∞ —è–π—Ü–∞',
            eggExplosionCooldown: '–ö—É–ª–¥–∞—É–Ω –≤–∑—Ä—ã–≤–∞ —è–π—Ü–∞'
        };
        
        return labels[key] || key;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
     * @param {*} value - –ó–Ω–∞—á–µ–Ω–∏–µ
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    formatValue(value) {
        if (typeof value === 'number') {
            if (value % 1 === 0) {
                return value.toString();
            } else {
                return value.toFixed(1);
            }
        }
        return value.toString();
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     * @param {boolean} visible - –í–∏–¥–∏–º–æ—Å—Ç—å
     */
    show(visible = true) {
        this.setVisible(visible);
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     */
    hide() {
        this.setVisible(false);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É –ø–æ–∫–∞ abilitySystem –Ω–µ –≥–æ—Ç–æ–≤
     */
    createPlaceholder() {
        if (!this.statsContainer) return;
        
        this.statsContainer.innerHTML = '';
        
        const placeholderElement = document.createElement('div');
        placeholderElement.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        placeholderElement.style.fontSize = TELEGRAM_UI_STYLES.fonts.sizeSmall;
        placeholderElement.style.color = TELEGRAM_UI_STYLES.colors.textSecondary;
        placeholderElement.style.fontFamily = TELEGRAM_UI_STYLES.fonts.family;
        placeholderElement.style.textAlign = 'center';
        placeholderElement.style.width = '100%';
        
        this.statsContainer.appendChild(placeholderElement);
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     */
    update() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤ –ª–∏ abilitySystem
        if (this.abilitySystem && typeof this.abilitySystem.getAllAbilities === 'function') {
            this.updateValues();
        }
        this.updatePosition();
    }
}
