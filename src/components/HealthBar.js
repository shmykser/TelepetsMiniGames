import Phaser from 'phaser';
import { BaseUIComponent } from './BaseUIComponent.js';
import { PropertyUtils } from '../utils/PropertyUtils.js';
import { COLORS, DEPTH_CONSTANTS } from '../settings/GameSettings.js';
/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–ª–æ—Å—ã –∑–¥–æ—Ä–æ–≤—å—è
 * –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Ä–∞–≥–æ–≤, —è–π—Ü–∞, –∑–∞—â–∏—Ç—ã –∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */
export class HealthBar extends BaseUIComponent {
    constructor(scene, targetObject, options = {}) {
        super(scene, 0, 0, options);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤
        PropertyUtils.defineProperty(this, "backgroundBar", undefined);
        PropertyUtils.defineProperty(this, "healthBar", undefined);
        PropertyUtils.defineProperty(this, "borderBar", undefined);
        PropertyUtils.defineProperty(this, "healthText", undefined);
        PropertyUtils.defineProperty(this, "targetObject", undefined);
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–æ—Å—ã –∑–¥–æ—Ä–æ–≤—å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        PropertyUtils.defineProperty(this, "barWidth", undefined);
        PropertyUtils.defineProperty(this, "barHeight", undefined);
        PropertyUtils.defineProperty(this, "offsetY", undefined);
        PropertyUtils.defineProperty(this, "offsetX", undefined);
        PropertyUtils.defineProperty(this, "showWhenFull", undefined);
        PropertyUtils.defineProperty(this, "showWhenEmpty", undefined);
        PropertyUtils.defineProperty(this, "showBar", undefined);
        PropertyUtils.defineProperty(this, "showDigits", undefined);
        PropertyUtils.defineProperty(this, "fixed", undefined);
        PropertyUtils.defineProperty(this, "fixedX", undefined);
        PropertyUtils.defineProperty(this, "fixedY", undefined);
        this.targetObject = targetObject;
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.barWidth = options.barWidth || this.calculateBarWidth();
        this.barHeight = options.barHeight || 6;
        this.offsetY = options.offsetY || -40;
        this.offsetX = options.offsetX || 0;
        this.showWhenFull = options.showWhenFull || false;
        this.showWhenEmpty = options.showWhenEmpty || true;
        this.showBar = options.showBar !== false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
        this.showDigits = options.showDigits || false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        this.fixed = options.fixed || false; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        this.fixedX = options.fixedX; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
        this.fixedY = options.fixedY; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
        // –¶–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const colors = {
            background: COLORS.BLACK,
            health: COLORS.GREEN,
            border: COLORS.WHITE,
            ...options.colors
        };
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.backgroundBar = scene.add.graphics();
        this.healthBar = scene.add.graphics();
        this.borderBar = scene.add.graphics();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã—Å–æ—Ç—ã –ø–æ–ª–æ—Å—ã
        const fontSize = Math.max(10, this.barHeight * 0.8);
        this.healthText = scene.add.text(0, 0, '', {
            fontSize: `${fontSize}px`,
            fontFamily: 'Arial',
            color: '#ffffff',
            stroke: '#000000',
            strokeThickness: Math.max(1, Math.floor(fontSize / 10))
        }).setOrigin(0.5, 0.5);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.add([this.backgroundBar, this.healthBar, this.borderBar, this.healthText]);
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞
        this.setColors(colors);
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–±—ä–µ–∫—Ç–∞
        this.updatePosition();
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫–∏–π depth, —á—Ç–æ–±—ã HealthBar –±—ã–ª –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        // –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à–∫–∞–ª –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—â–µ –±–æ–ª—å—à–∏–π depth
        const depth = this.fixed ? DEPTH_CONSTANTS.HEALTH_BAR + 100 : DEPTH_CONSTANTS.HEALTH_BAR;
        this.setDepth(depth);
        
        // –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à–∫–∞–ª –æ—Ç–∫–ª—é—á–∞–µ–º —Å–∫—Ä–æ–ª–ª –∫–∞–º–µ—Ä—ã
        if (this.fixed) {
            this.setScrollFactor(0, 0);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateHealth();
    }
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —à–∏—Ä–∏–Ω—É –ø–æ–ª–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
     */
    calculateBarWidth() {
        const objectWidth = this.targetObject.objectWidth || 64;
        const objectScale = this.targetObject.objectScaleX || 1;
        return Math.max(40, objectWidth * objectScale * 0.8);
    }
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç–∞ –ø–æ–ª–æ—Å—ã –∑–¥–æ—Ä–æ–≤—å—è
     */
    setColors(colors) {
        this.backgroundBar.clear();
        this.healthBar.clear();
        this.borderBar.clear();
        // –§–æ–Ω (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏)
        this.backgroundBar.fillStyle(colors.background, 0.8);
        this.backgroundBar.fillRect(-this.barWidth / 2, 0, this.barWidth, this.barHeight);
        // –ì—Ä–∞–Ω–∏—Ü–∞ (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏)
        this.borderBar.lineStyle(1, colors.border, 1);
        this.borderBar.strokeRect(-this.barWidth / 2, 0, this.barWidth, this.barHeight);
    }
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª–æ—Å—ã –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
     */
    updatePosition() {
        if (this.fixed) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–¥–∞–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–æ—Ç 0 –¥–æ 1), –≤—ã—á–∏—Å–ª—è–µ–º –∏—Ö –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–º–µ—Ä—ã
            if (this.fixedX !== undefined && this.fixedX <= 1) {
                this.x = this.scene.cameras.main.width * this.fixedX;
            } else if (this.fixedX !== undefined) {
                this.x = this.fixedX;
            } else {
                this.x = this.scene.cameras.main.centerX;
            }
            
            if (this.fixedY !== undefined && this.fixedY <= 1) {
                this.y = this.scene.cameras.main.height * this.fixedY;
            } else if (this.fixedY !== undefined) {
                this.y = this.fixedY;
            } else {
                this.y = this.scene.cameras.main.height - 30;
            }
            
            // –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            if (this.targetObject.constructor.name === 'Egg') {
                console.log(`üíö [HealthBar] –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —è–π—Ü–∞: (${this.x}, ${this.y}), –∫–∞–º–µ—Ä–∞: ${this.scene.cameras.main.width}x${this.scene.cameras.main.height}, depth: ${this.depth}`);
            }
        } else {
            // –°–ª–µ–¥—É–µ–º –∑–∞ –æ–±—ä–µ–∫—Ç–æ–º
            this.x = this.targetObject.x + this.offsetX;
            this.y = this.targetObject.y + this.offsetY;
        }
    }
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–æ—Å—ã –∑–¥–æ—Ä–æ–≤—å—è
     */
    updateHealth() {
        const healthPercent = this.targetObject.health / this.targetObject.maxHealth;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        const shouldShow = this.shouldShowBar(healthPercent);
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è —è–π—Ü–∞
        if (this.fixed && this.targetObject.constructor.name === 'Egg') {
            console.log(`üíö [HealthBar] updateHealth —è–π—Ü–∞: health=${this.targetObject.health}/${this.targetObject.maxHealth}, shouldShow=${shouldShow}, visible=${this.visible}`);
        }
        
        this.setVisible(shouldShow);
        if (!shouldShow)
            return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        this.updatePosition();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ—Å—É –∑–¥–æ—Ä–æ–≤—å—è
        if (this.showBar) {
            this.updateHealthBar(healthPercent);
        } else {
            this.hideHealthBar();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–∏—Ñ—Ä–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (this.showDigits) {
            this.updateHealthText();
        } else {
            this.hideHealthText();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–ª–æ—Å—ã –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
     */
    updateBarSize() {
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
        this.barWidth = this.calculateBarWidth();
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã—Å–æ—Ç—ã –ø–æ–ª–æ—Å—ã
        const fontSize = Math.max(10, this.barHeight * 0.8);
        this.healthText.setFontSize(fontSize);
        this.healthText.setStroke('#000000', Math.max(1, Math.floor(fontSize / 10)));
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–æ—Å—É —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        this.setColors({
            background: COLORS.BLACK,
            health: COLORS.GREEN,
            border: COLORS.WHITE
        });
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
        this.updateHealth();
    }
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–æ—Å—É –∑–¥–æ—Ä–æ–≤—å—è
     */
    shouldShowBar(healthPercent) {
        if (healthPercent <= 0)
            return this.showWhenEmpty;
        if (healthPercent >= 1)
            return this.showWhenFull;
        return true; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–µ –ø–æ–ª–Ω–æ–µ –∏ –Ω–µ –ø—É—Å—Ç–æ–µ
    }
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–æ—Å—É –∑–¥–æ—Ä–æ–≤—å—è
     */
    updateHealthBar(healthPercent) {
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–æ—Å—É –∑–¥–æ—Ä–æ–≤—å—è
        this.healthBar.clear();
        
        // –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –ø–æ–ª–æ—Å—ã –∑–¥–æ—Ä–æ–≤—å—è
        const healthWidth = this.barWidth * healthPercent;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è
        const healthColor = this.getHealthColor(healthPercent);
        
        // –†–∏—Å—É–µ–º –ø–æ–ª–æ—Å—É –∑–¥–æ—Ä–æ–≤—å—è (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏)
        this.healthBar.fillStyle(healthColor, 0.9);
        this.healthBar.fillRect(-this.barWidth / 2, 0, healthWidth, this.barHeight);
    }
    
    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª–æ—Å—É –∑–¥–æ—Ä–æ–≤—å—è
     */
    hideHealthBar() {
        this.backgroundBar.clear();
        this.healthBar.clear();
        this.borderBar.clear();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
     */
    updateHealthText() {
        const currentHealth = Math.ceil(this.targetObject.health);
        const maxHealth = Math.ceil(this.targetObject.maxHealth);
        
        this.healthText.setText(`${currentHealth}/${maxHealth}`);
        this.healthText.setVisible(true);
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        if (this.showBar) {
            // –î–ª—è –±–æ–ª—å—à–∏—Ö –ø–æ–ª–æ—Å (–≤—ã—Å–æ—Ç–∞ >= 16) —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏, –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö - —Å–≤–µ—Ä—Ö—É
            if (this.barHeight >= 16) {
                this.healthText.y = this.barHeight / 2;
            } else {
                this.healthText.y = -this.barHeight - 8;
            }
        } else {
            // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã - —Ç–µ–∫—Å—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É
            this.healthText.y = 0;
        }
    }
    
    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     */
    hideHealthText() {
        this.healthText.setVisible(false);
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç –ø–æ–ª–æ—Å—ã –∑–¥–æ—Ä–æ–≤—å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞
     */
    getHealthColor(healthPercent) {
        if (healthPercent > 0.6)
            return COLORS.GREEN; // –ó–µ–ª–µ–Ω—ã–π
        if (healthPercent > 0.3)
            return COLORS.YELLOW; // –ñ–µ–ª—Ç—ã–π
        return COLORS.RED; // –ö—Ä–∞—Å–Ω—ã–π
    }
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ü–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç
     */
    setTargetObject(targetObject) {
        this.targetObject = targetObject;
        this.barWidth = this.calculateBarWidth();
        this.updateHealth();
    }
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    updateSettings(options) {
        if (options.showWhenFull !== undefined) {
            this.showWhenFull = options.showWhenFull;
        }
        if (options.showWhenEmpty !== undefined) {
            this.showWhenEmpty = options.showWhenEmpty;
        }
        if (options.offsetY !== undefined) {
            this.offsetY = options.offsetY;
        }
        if (options.offsetX !== undefined) {
            this.offsetX = options.offsetX;
        }
        if (options.showBar !== undefined) {
            this.showBar = options.showBar;
        }
        if (options.showDigits !== undefined) {
            this.showDigits = options.showDigits;
        }
        if (options.fixed !== undefined) {
            this.fixed = options.fixed;
        }
        if (options.fixedX !== undefined) {
            this.fixedX = options.fixedX;
        }
        if (options.fixedY !== undefined) {
            this.fixedY = options.fixedY;
        }
        this.updateHealth();
    }
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    destroy() {
        this.backgroundBar.destroy();
        this.healthBar.destroy();
        this.borderBar.destroy();
        this.healthText.destroy();
        super.destroy();
    }
}
