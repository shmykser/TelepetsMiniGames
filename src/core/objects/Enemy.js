import { GameObject } from '../GameObject';
import { enemyTypes } from '../types/enemyTypes';
import { settings } from '../../../config/settings.js';
import { MovementSystem } from '../../systems/movement/MovementSystem.js';
export class Enemy extends GameObject {
    constructor(scene, config) {
        const enemyType = config.enemyType || 'ant';
        const enemyData = enemyTypes[enemyType];
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
        const enemyConfig = {
            health: config.health !== undefined ? config.health : enemyData.health,
            damage: config.damage !== undefined ? config.damage : enemyData.damage,
            speed: config.speed !== undefined ? config.speed : enemyData.speed, // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∫–∞–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            cooldown: config.cooldown !== undefined ? config.cooldown : enemyData.cooldown * 1000, // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –º—Å
            attackRange: config.attackRange || 40,
            x: config.x,
            y: config.y,
            texture: config.texture
        };
        super(scene, enemyConfig);
        Object.defineProperty(this, "_enemyType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_detectionRange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_enemyData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_lastPlayerPosition", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "_isChasing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_chaseTimer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._id = `${enemyType}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        this._enemyType = enemyType;
        this._detectionRange = config.detectionRange || 150;
        this._enemyData = enemyData;
        
        // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞
        if (enemyType === 'ant') {
            console.log(`üêú Enemy Constructor Debug:`, {
                enemyType: enemyType,
                _enemyType: this._enemyType,
                id: this._id
            });
        }
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞
        this._size = enemyData.size;
        this._canFly = enemyData.canFly;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –¥–≤–∏–∂–µ–Ω–∏—è
        this._movementSystem = null;
        this._useUniqueMovement = config.useUniqueMovement !== false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
        
        // –õ–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º—É—Ä–∞–≤—å—è)
        if (enemyType === 'ant') {
            console.log(`üêú Ant Speed Debug:`, {
                originalSpeed: enemyData.speed,
                finalSpeed: this.speed,
                note: 'Speed is now used as coefficient (no *20 multiplication)'
            });
        }
        
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        this.setupEnemyBehavior();
    }
    setupEnemyBehavior() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–∑–∏–∫—É
        this.physicsBody.setBounce(0.1);
        this.physicsBody.setDrag(50, 50);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –¥–≤–∏–∂–µ–Ω–∏—è –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if (this._useUniqueMovement && this.scene) {
            this.initializeMovementSystem();
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –≤—Ä–∞–≥–∞
     */
    initializeMovementSystem() {
        if (!this.scene || this._movementSystem) return;
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥–≤–∏–∂–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–µ
        if (!this.scene.movementSystem) {
            this.scene.movementSystem = new MovementSystem(this.scene);
            console.log(`üîÑ Created MovementSystem for scene`);
        }
        this._movementSystem = this.scene.movementSystem;
        
        // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
        if (this.enemyType === 'ant') {
            console.log(`üêú MovementSystem initialized for ${this.enemyType}`, {
                hasMovementSystem: !!this._movementSystem,
                sceneHasMovementSystem: !!this.scene.movementSystem
            });
        }
    }
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º update –¥–ª—è –ò–ò –ø–æ–≤–µ–¥–µ–Ω–∏—è
    update(_time, _delta) {
        if (!this._isAlive || !this.scene)
            return;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–ª—å (—è–π—Ü–æ), –¥–≤–∏–∂–µ–º—Å—è –∫ –Ω–µ–π
        if (this._target && this._target._isAlive) {
            this.moveToTarget();
            // –û–±–Ω–æ–≤–ª—è–µ–º HealthBar –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –≤—Ä–∞–≥–∞
            this.updateHealthBar();
            return;
        }
        
        // –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å—Ü–µ–Ω–µ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        const player = this.findPlayer();
        if (!player)
            return;
        const distanceToPlayer = Phaser.Math.Distance.Between(this.x, this.y, player.x, player.y);
        // –õ–æ–≥–∏–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        if (distanceToPlayer <= this._detectionRange) {
            this.handlePlayerDetected(player, distanceToPlayer);
        }
        else {
            this.handlePlayerLost();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º HealthBar –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –≤—Ä–∞–≥–∞
        this.updateHealthBar();
        
        // –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π update –¥–ª—è –±–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
        super.update(_time, _delta);
    }
    findPlayer() {
        // –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ - –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö
        return this._target;
    }
    handlePlayerDetected(player, distance) {
        this._isChasing = true;
        this._lastPlayerPosition = new Phaser.Math.Vector2(player.x, player.y);
        if (distance <= this.attackRange) {
            // –í —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏ - –∞—Ç–∞–∫—É–µ–º
            this.stopMovement();
            this.attack(player);
        }
        else {
            // –í–Ω–µ —Ä–∞–¥–∏—É—Å–∞ –∞—Ç–∞–∫–∏ - –ø—Ä–µ—Å–ª–µ–¥—É–µ–º
            this.chasePlayer(player);
        }
    }
    handlePlayerLost() {
        if (this._isChasing) {
            // –ò–≥—Ä–æ–∫ –ø–æ—Ç–µ—Ä—è–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            if (this._lastPlayerPosition) {
                this.startMovementToPoint(this._lastPlayerPosition.x, this._lastPlayerPosition.y);
                // –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
                if (this._chaseTimer) {
                    this._chaseTimer.destroy();
                }
                this._chaseTimer = this.scene.time.delayedCall(3000, () => {
                    this._isChasing = false;
                    this._lastPlayerPosition = null;
                    this.stopMovement();
                });
            }
        }
    }
    chasePlayer(player) {
        // –ë–∞–∑–æ–≤–æ–µ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ - –¥–≤–∏–∂–µ–º—Å—è –∫ –∏–≥—Ä–æ–∫—É
        this.startMovementToPoint(player.x, player.y);
    }
    
    /**
     * –î–≤–∏–∂–µ—Ç—Å—è –∫ —Ü–µ–ª–∏ (—è–π—Ü—É) —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ Phaser Physics
     */
    moveToTarget() {
        if (!this._target || !this._target._isAlive || !this._isAlive) {
            this.stopMovement();
            return;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏
        const distance = Phaser.Math.Distance.Between(this.x, this.y, this._target.x, this._target.y);
        
        // –ï—Å–ª–∏ —Ü–µ–ª—å –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –∏ –∞—Ç–∞–∫—É–µ–º
        if (distance <= this.attackRange) {
            this.stopMovement();
            this.attack(this._target);
            return;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (this._useUniqueMovement && this._movementSystem) {
            // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞
            if (this.enemyType === 'ant' && Math.random() < 0.1) {
                console.log(`üêú Enemy Debug:`, {
                    enemyType: this.enemyType,
                    useUniqueMovement: this._useUniqueMovement,
                    hasMovementSystem: !!this._movementSystem,
                    position: `(${this.x.toFixed(1)}, ${this.y.toFixed(1)})`,
                    target: this._target ? `(${this._target.x.toFixed(1)}, ${this._target.y.toFixed(1)})` : 'none',
                    movementType: 'UNIQUE'
                });
            }
            this._movementSystem.updateEnemyMovement(this, this._target, this.scene.game.loop.delta);
            return;
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏–Ω–µ–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        if (this.enemyType === 'ant' && Math.random() < 0.1) {
            console.log(`üêú Enemy Debug:`, {
                enemyType: this.enemyType,
                useUniqueMovement: this._useUniqueMovement,
                hasMovementSystem: !!this._movementSystem,
                position: `(${this.x.toFixed(1)}, ${this.y.toFixed(1)})`,
                target: this._target ? `(${this._target.x.toFixed(1)}, ${this._target.y.toFixed(1)})` : 'none',
                movementType: 'LINEAR'
            });
        }
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–∏–Ω–µ–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        this.moveToTargetLinear();
    }
    
    /**
     * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–∏–Ω–µ–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
     */
    moveToTargetLinear() {
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
        const direction = new Phaser.Math.Vector2(
            this._target.x - this.x,
            this._target.y - this.y
        ).normalize();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —á–µ—Ä–µ–∑ Phaser Physics (speed –∫–∞–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)
        const baseSpeed = 10; // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –ø–∏–∫—Å–µ–ª—è—Ö –≤ —Å–µ–∫—É–Ω–¥—É
        const actualSpeed = baseSpeed * this.speed;
        const velocityX = direction.x * actualSpeed;
        const velocityY = direction.y * actualSpeed;
        
        // –õ–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –º—É—Ä–∞–≤—å—è)
        if (this.enemyType === 'ant' && Math.random() < 0.1) { // 10% —à–∞–Ω—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            console.log(`üêú Ant Movement Debug:`, {
                position: `(${this.x.toFixed(1)}, ${this.y.toFixed(1)})`,
                target: `(${this._target.x.toFixed(1)}, ${this._target.y.toFixed(1)})`,
                distance: Phaser.Math.Distance.Between(this.x, this.y, this._target.x, this._target.y).toFixed(1),
                direction: `(${direction.x.toFixed(3)}, ${direction.y.toFixed(3)})`,
                speed: {
                    base: baseSpeed,
                    coefficient: this.speed,
                    actual: actualSpeed.toFixed(1)
                },
                velocity: `(${velocityX.toFixed(1)}, ${velocityY.toFixed(1)})`,
                deltaTime: this.scene.game.loop.delta,
                movementType: 'linear'
            });
        }
        
        this.physicsBody.setVelocity(velocityX, velocityY);
        
        // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø—Ä–∞–π—Ç –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if (velocityX !== 0 || velocityY !== 0) {
            const angle = Math.atan2(velocityY, velocityX) * (180 / Math.PI);
            this.setRotation(angle * (Math.PI / 180));
        }
    }
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ç–∞–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—Ä–∞–≥–æ–≤
    attack(target) {
        if (!this._isAlive || !this.scene)
            return false;
            
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        const currentTime = this.scene.time.now;
        if (currentTime - this._lastAttackTime < this.cooldown) {
            return false; // –ï—â–µ –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ
        }
        
        const attackTarget = target || this._target;
        if (!attackTarget || !attackTarget.isAlive)
            return false;
        const distance = Phaser.Math.Distance.Between(this.x, this.y, attackTarget.x, attackTarget.y);
        if (distance > this.attackRange)
            return false;
            
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—Ç–∞–∫–∏
        this._lastAttackTime = currentTime;
        
        // –ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤—Ä–∞–≥–æ–≤
        this.performBasicAttack(attackTarget);
        return true;
    }
    performBasicAttack(target) {
        // –ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞
        target.takeDamage(this.damage);
        this.emit('attack', target, this.damage);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç–∞–∫–∏
        
        // –≠—Ñ—Ñ–µ–∫—Ç –∞—Ç–∞–∫–∏
        this.shake(100, 2);
    }
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –≤—Ä–∞–≥–∞ –Ω–∞ –∑–∞—â–∏—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç
     */
    getReactionToDefence(defenceType) {
        const reactions = this._enemyData.reactions;
        switch (defenceType) {
            case 'sugar': return reactions.sugar;
            case 'stone': return reactions.stone;
            case 'crack': return reactions.crack;
            case 'spikes': return reactions.spikes;
            case 'madCucumber': return reactions.madCucumber;
            case 'pit': return reactions.pit;
            default: return 'ignore';
        }
    }
    // –ì–µ—Ç—Ç–µ—Ä—ã
    get id() { return this._id; }
    get enemyType() { return this._enemyType; }
    get detectionRange() { return this._detectionRange; }
    get isChasing() { return this._isChasing; }
    get enemyData() { return this._enemyData; }
    // –°–µ—Ç—Ç–µ—Ä—ã
    set enemyType(value) {
        this._enemyType = value;
        this._enemyData = enemyTypes[value];
        this.setupEnemyBehavior();
    }
    set detectionRange(value) { this._detectionRange = Math.max(0, value); }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–ª—å –¥–ª—è –≤—Ä–∞–≥–∞ (—è–π—Ü–æ)
     */
    setTarget(target) {
        this._target = target;
        this.emit('targetChanged', target);
    }
    
    /**
     * –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
     */
    setUniqueMovement(enabled) {
        this._useUniqueMovement = enabled;
        if (enabled && !this._movementSystem) {
            this.initializeMovementSystem();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    getUniqueMovement() {
        return this._useUniqueMovement;
    }

    // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å –æ—á–∏—Å—Ç–∫–æ–π —Ç–∞–π–º–µ—Ä–æ–≤
    destroy() {
        if (this._chaseTimer) {
            this._chaseTimer.destroy();
            this._chaseTimer = undefined;
        }
        
        // –û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥–≤–∏–∂–µ–Ω–∏—è
        if (this._movementSystem) {
            this._movementSystem.removePattern(this._id);
        }
        
        super.destroy();
    }
    /**
     * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–∞–≥–∞ —Å –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
     * –°–æ–∑–¥–∞–µ—Ç –≤—Ä–∞–≥–∞, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫—É –∏ —Å–æ–∑–¥–∞–µ—Ç HealthBar
     */
    static CreateEnemy(scene, enemyType, x, y) {
        const enemyData = enemyTypes[enemyType];
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–∞
        const enemy = new Enemy(scene, {
            x: x,
            y: y,
            texture: enemyType,
            enemyType: enemyType,
            health: enemyData.health,
            damage: enemyData.damage,
            speed: enemyData.speed * 10, // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 10 –¥–ª—è Phaser –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            cooldown: enemyData.cooldown * 1000 // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1000 –¥–ª—è –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
        });
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç 10 –ø–∏–∫—Å–µ–ª–µ–π * size)
        const baseSize = 10; // –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        const enemySize = baseSize * enemyData.size;
        enemy.setScale(enemySize / 32); // 32 - —ç—Ç–æ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ Phaser
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–æ—Å—É –∑–¥–æ—Ä–æ–≤—å—è
        enemy.createHealthBar({
            showWhenFull: false, // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∑–¥–æ—Ä–æ–≤—å–µ
            showWhenEmpty: true, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏
            offsetY: -(enemySize / 2 + 5), // –°–º–µ—â–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –æ—Ç –æ–±—ä–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞
            colors: {
                background: 0x000000,
                health: 0x00ff00,
                border: 0xffffff
            }
        });
        return enemy;
    }
}
