/**
 * –¢–∏–ø—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –º–∏—Ä–∞ Pet Thief
 */

// –¢–∏–ø—ã –±–∏–æ–º–æ–≤
export const BIOME_TYPES = {
    FOREST: 'forest',
    DESERT: 'desert',
    SNOW: 'snow',
    PLAINS: 'plains'
};

// –í–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –±–∏–æ–º–æ–≤
export const BIOME_VISUALS = {
    [BIOME_TYPES.FOREST]: {
        name: '–õ–µ—Å',
        backgroundColor: 0x2d5016, // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
        tintColor: 0x4a7c2e, // –ó–µ–ª–µ–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫
        grassTexture: 'grass', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–∞–≤—è–Ω–æ–π —Ñ–æ–Ω
        obstacleTypes: ['tree', 'bush', 'stone'],
        emoji: 'üå≤'
    },
    [BIOME_TYPES.DESERT]: {
        name: '–ü—É—Å—Ç—ã–Ω—è',
        backgroundColor: 0xdaa520, // –ó–æ–ª–æ—Ç–∏—Å—Ç–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π
        tintColor: 0xf4a460, // –ü–µ—Å–æ—á–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫
        grassTexture: 'grass', // –ë—É–¥–µ—Ç –∑–∞—Ç–æ–Ω–∏—Ä–æ–≤–∞–Ω
        obstacleTypes: ['cactus', 'stone', 'bones'],
        emoji: 'üèúÔ∏è'
    },
    [BIOME_TYPES.SNOW]: {
        name: '–°–Ω–µ–∂–Ω—ã–µ —Ä–∞–≤–Ω–∏–Ω—ã',
        backgroundColor: 0xe0f0ff, // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
        tintColor: 0xffffff, // –ë–µ–ª—ã–π
        grassTexture: 'grass', // –ë—É–¥–µ—Ç –∑–∞—Ç–æ–Ω–∏—Ä–æ–≤–∞–Ω
        obstacleTypes: ['tree', 'stone', 'snowdrift'],
        emoji: '‚ùÑÔ∏è'
    },
    [BIOME_TYPES.PLAINS]: {
        name: '–ü–æ–ª—è',
        backgroundColor: 0x7cbe54, // –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        tintColor: 0x90d65f, // –Ø—Ä–∫–∏–π –∑–µ–ª–µ–Ω—ã–π
        grassTexture: 'grass',
        obstacleTypes: ['bush', 'flower', 'stone'],
        emoji: 'üåæ'
    }
};

// –†–∞–∑–º–µ—Ä –º–∏—Ä–∞
export const WORLD_SIZE = {
    width: 3000,
    height: 3000
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏—Ä–∞
export const WORLD_GENERATION = {
    // Seed –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –¥–ª—è 24-—á–∞—Å–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    getSeed: () => {
        const now = new Date();
        return `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`;
    },
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–ª–∏—â –Ω–∞ –∫–∞—Ä—Ç–µ
    HOUSES: {
        MIN: 3,
        MAX: 8
    },
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–µ
    COINS: {
        MIN: 20,
        MAX: 50
    },
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
    OBSTACLES: {
        MIN: 30,
        MAX: 60
    },
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–∞–∂–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
    MIN_DISTANCE_BETWEEN_HOUSES: 400,
    MIN_DISTANCE_FROM_PLAYER: 300,
    
    // –†–∞–∑–º–µ—Ä –∑–æ–Ω—ã –∏–≥—Ä–æ–∫–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞ –≤–æ–∫—Ä—É–≥ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏)
    PLAYER_SAFE_ZONE_RADIUS: 200
};

// –¢–∏–ø—ã –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
export const OBSTACLE_TYPES = {
    TREE: {
        texture: 'üå≤',
        spriteKey: null, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏
        size: 2,
        collision: true
    },
    BUSH: {
        texture: 'üå≥',
        spriteKey: null,
        size: 1.5,
        collision: true
    },
    STONE: {
        texture: 'ü™®',
        spriteKey: 'stone',
        size: 1,
        collision: true
    },
    CACTUS: {
        texture: 'üåµ',
        spriteKey: null,
        size: 1.5,
        collision: true
    },
    FLOWER: {
        texture: 'üåª',
        spriteKey: null,
        size: 1,
        collision: false
    },
    SNOWDRIFT: {
        texture: '‚õÑ',
        spriteKey: null,
        size: 1.5,
        collision: true
    },
    BONES: {
        texture: 'ü¶¥',
        spriteKey: null,
        size: 1,
        collision: false
    }
};

// –°–≤–æ–π—Å—Ç–≤–∞ –ø–∏—Ç–æ–º—Ü–∞
export const PET_CONFIG = {
    DEFAULT_SPEED: 150,
    DEFAULT_HEALTH: 100,
    DEFAULT_SIZE: 2,
    TEXTURE: 'üêæ',
    SPRITE_KEY: 'pet',
    
    // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    DEFAULT_INVENTORY: {
        coins: 0,
        jewels: 0,
        keys: 20,
        lockpicks: 20,
        treasures: []
    },
    
    // –ù–∞–≤—ã–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    DEFAULT_SKILLS: {
        lockpicking: 0,
        stealth: 0,
        tracking: 0
    }
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–∏—Ä–∞
export const WORLD_CONSTANTS = {
    // –ì–ª—É–±–∏–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º DEPTH_CONSTANTS)
    DEPTH: {
        BACKGROUND: -100,
        WORLD_OBJECTS: 0,
        OBSTACLES: 10,
        ITEMS: 15,
        HOUSES: 20,
        PET: 30,
        UI: 1000
    },
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
    CAMERA: {
        FOLLOW_LERP: 0.1, // –ü–ª–∞–≤–Ω–æ—Å—Ç—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (0-1, –º–µ–Ω—å—à–µ = –ø–ª–∞–≤–Ω–µ–µ)
        ZOOM: 1,
        ROUND_PIXELS: false // –ù–µ –æ–∫—Ä—É–≥–ª—è—Ç—å –ø–∏–∫—Å–µ–ª–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
    }
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –º–∏—Ä–µ
 * @param {number} margin - –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤
 * @returns {{x: number, y: number}}
 */
export function generateRandomPosition(margin = 100) {
    return {
        x: margin + Math.random() * (WORLD_SIZE.width - margin * 2),
        y: margin + Math.random() * (WORLD_SIZE.height - margin * 2)
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–ª–µ–∫–æ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
 * @param {{x: number, y: number}} newPos - –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
 * @param {Array<{x: number, y: number}>} existingPositions - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
 * @param {number} minDistance - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
 * @returns {boolean}
 */
export function isPositionValid(newPos, existingPositions, minDistance) {
    for (const pos of existingPositions) {
        const dx = newPos.x - pos.x;
        const dy = newPos.y - pos.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < minDistance) {
            return false;
        }
    }
    return true;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
 * @param {Array<{x: number, y: number}>} existingPositions - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
 * @param {number} minDistance - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
 * @param {number} maxAttempts - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
 * @returns {{x: number, y: number}|null}
 */
export function generateValidPosition(existingPositions, minDistance, maxAttempts = 100) {
    for (let i = 0; i < maxAttempts; i++) {
        const pos = generateRandomPosition();
        if (isPositionValid(pos, existingPositions, minDistance)) {
            return pos;
        }
    }
    return null;
}

