/**
 * –¢–∏–ø—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–º–∫–æ–≤ –¥–ª—è Pet Thief
 */

// –¢–∏–ø—ã –∑–∞–º–∫–æ–≤
export const LOCK_TYPES = {
    SIMPLE: 'simple',
    MAZE: 'maze', 
    PATTERN: 'pattern'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–º–∫–æ–≤
export const LOCK_CONFIGS = {
    [LOCK_TYPES.SIMPLE]: {
        name: '–ü—Ä–æ—Å—Ç–æ–π –∑–∞–º–æ–∫',
        emoji: 'üîì',
        description: '–ü–æ–¥–±–æ—Ä –ø–∏–Ω–æ–≤',
        difficulty: {
            1: {
                pins: 1,
                indicatorSpeed: 1.5,
                tolerance: 25,
                maxAttempts: 3,
                timeLimit: 0 // –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            },
            2: {
                pins: 2,
                indicatorSpeed: 2.0,
                tolerance: 20,
                maxAttempts: 3,
                timeLimit: 0
            },
            3: {
                pins: 3,
                indicatorSpeed: 2.5,
                tolerance: 15,
                maxAttempts: 4,
                timeLimit: 0
            }
        }
    },
    
    [LOCK_TYPES.MAZE]: {
        name: '–õ–∞–±–∏—Ä–∏–Ω—Ç-–∑–∞–º–æ–∫',
        emoji: 'üß©',
        description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ —à–∞—Ä–∏–∫ —á–µ—Ä–µ–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç',
        difficulty: {
            1: {
                mazeSize: 5, // 5x5
                ballSpeed: 200,
                timeLimit: 30, // 30 —Å–µ–∫—É–Ω–¥
                maxAttempts: 3
            },
            2: {
                mazeSize: 7, // 7x7
                ballSpeed: 180,
                timeLimit: 45,
                maxAttempts: 3
            },
            3: {
                mazeSize: 9, // 9x9
                ballSpeed: 160,
                timeLimit: 60,
                maxAttempts: 4
            }
        }
    },
    
    [LOCK_TYPES.PATTERN]: {
        name: '–ü–∞—Ç—Ç–µ—Ä–Ω-–∑–∞–º–æ–∫',
        emoji: 'üéØ',
        description: '–°–æ–µ–¥–∏–Ω–∏—Ç—å —Ç–æ—á–∫–∏ –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π',
        difficulty: {
            1: {
                points: 4, // 2x2 —Å–µ—Ç–∫–∞
                timeLimit: 20,
                maxAttempts: 3,
                showPattern: true // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            },
            2: {
                points: 6, // 2x3 —Å–µ—Ç–∫–∞
                timeLimit: 30,
                maxAttempts: 3,
                showPattern: false
            },
            3: {
                points: 9, // 3x3 —Å–µ—Ç–∫–∞
                timeLimit: 45,
                maxAttempts: 4,
                showPattern: false
            }
        }
    }
};

// –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–º–∫–æ–≤
export const LOCK_LEVELS = {
    EASY: 1,
    MEDIUM: 2,
    HARD: 3
};

// –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∑–ª–æ–º–∞ (–≤ –æ—Ç–º—ã—á–∫–∞—Ö)
export const LOCK_COST = {
    [LOCK_LEVELS.EASY]: 1,
    [LOCK_LEVELS.MEDIUM]: 2,
    [LOCK_LEVELS.HARD]: 3
};

// –®–∞–Ω—Å—ã —É—Å–ø–µ—Ö–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–º–∫–æ–≤
export const LOCK_SUCCESS_RATES = {
    [LOCK_TYPES.SIMPLE]: {
        [LOCK_LEVELS.EASY]: 0.8,   // 80% —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
        [LOCK_LEVELS.MEDIUM]: 0.6, // 60% —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
        [LOCK_LEVELS.HARD]: 0.4    // 40% —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
    },
    [LOCK_TYPES.MAZE]: {
        [LOCK_LEVELS.EASY]: 0.7,
        [LOCK_LEVELS.MEDIUM]: 0.5,
        [LOCK_LEVELS.HARD]: 0.3
    },
    [LOCK_TYPES.PATTERN]: {
        [LOCK_LEVELS.EASY]: 0.9,
        [LOCK_LEVELS.MEDIUM]: 0.7,
        [LOCK_LEVELS.HARD]: 0.5
    }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–º–∫–∞
export function getRandomLockType() {
    const types = Object.values(LOCK_TYPES);
    return types[Math.floor(Math.random() * types.length)];
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
export function getRandomLockLevel() {
    const levels = Object.values(LOCK_LEVELS);
    return levels[Math.floor(Math.random() * levels.length)];
}

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–º–∫–∞
export function getLockConfig(type, level) {
    return LOCK_CONFIGS[type]?.difficulty[level] || null;
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∑–ª–æ–º–∞
export function getLockCost(level) {
    return LOCK_COST[level] || 1;
}

// –ü–æ–ª—É—á–∏—Ç—å —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
export function getLockSuccessRate(type, level) {
    return LOCK_SUCCESS_RATES[type]?.[level] || 0.5;
}

