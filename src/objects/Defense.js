import { GameObject } from './GameObject.js';
import { defenseTypes } from '../types/defenseTypes';
import { PropertyUtils } from '../utils/PropertyUtils.js';
import { PHYSICS_CONSTANTS, COLORS, DEPTH_CONSTANTS, STONE_SETTINGS } from '../settings/GameSettings.js';
import { EVENT_TYPES } from '../types/EventTypes.js';

export class Defense extends GameObject {
    constructor(scene, config) {
        const defenseType = config.defenseType || 'sugar';
        const defenseData = defenseTypes[defenseType];
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ç–∏–ø–∞ –∑–∞—â–∏—Ç—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
        const defenseConfig = {
            health: config.health !== undefined ? config.health : defenseData.health,
            maxHealth: config.maxHealth !== undefined ? config.maxHealth : defenseData.maxHealth,
            speed: 0, // –ó–∞—â–∏—Ç–Ω—ã–µ —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è –Ω–µ–ø–æ–¥–≤–∏–∂–Ω—ã
            x: config.x,
            y: config.y,
            texture: config.texture || defenseData.texture, // fallback —ç–º–æ–¥–∑–∏
            spriteKey: config.spriteKey || defenseData.spriteKey, // –∫–ª—é—á –¥–ª—è —Å–ø—Ä–∞–π—Ç–∞
            size: config.size || defenseData.size // —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø—Ä–∞–π—Ç–∞
        };
        
        super(scene, defenseConfig);
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–≤–æ–π—Å—Ç–≤–∞
        PropertyUtils.defineProperty(this, "_defenseType", undefined);
        PropertyUtils.defineProperty(this, "_defenseData", undefined);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–æ–π—Å—Ç–≤ –∑–∞—â–∏—Ç—ã
        this._defenseType = defenseType;
        this._defenseData = defenseData;

        // –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è drag & drop (–∏–∑ defenseData)
        this.isDraggable = defenseData.isDraggable || false;
        this.isBeingDragged = false;
        this.dragOffset = { x: 0, y: 0 };
        this.originalScale = { x: this.scaleX, y: this.scaleY };
        this.originalAlpha = this.alpha;

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–∑–∏–∫—É –¥–ª—è –∑–∞—â–∏—Ç–Ω—ã—Ö —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π
        this.physicsBody.setImmovable(true);
        this.physicsBody.setBounce(PHYSICS_CONSTANTS.DEFAULT_BOUNCE);
        this.physicsBody.setDrag(PHYSICS_CONSTANTS.DEFAULT_DRAG, PHYSICS_CONSTANTS.DEFAULT_DRAG);
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã
    get defenseType() { return this._defenseType; }
    get defenseData() { return this._defenseData; }

    /**
     * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—â–∏—Ç—ã —Å –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
     */
    static createDefense(scene, defenseType, x, y) {
        const defenseData = defenseTypes[defenseType];
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞—â–∏—Ç—É —Å –±–∞–∑–æ–≤—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        const defense = new Defense(scene, {
            x, y, defenseType,
            ...defenseData // –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ defenseTypes
        });
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        const defenseSize = PHYSICS_CONSTANTS.BASE_ENEMY_SIZE * defenseData.size;
        defense.setScale(defenseSize / PHYSICS_CONSTANTS.DEFAULT_TEXTURE_SIZE);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        defense.setDepth(DEPTH_CONSTANTS.DEFENSE);
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–æ—Å—É –∑–¥–æ—Ä–æ–≤—å—è (–µ—Å–ª–∏ —É –∑–∞—â–∏—Ç—ã –µ—Å—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ)
        if (defenseData.health > 0) {
            const healthBarConfig = {
                showWhenFull: false,
                showWhenEmpty: true,
                colors: {
                    background: COLORS.BLACK,
                    health: COLORS.HEALTH_GREEN,
                    border: COLORS.WHITE
                },
                offsetY: -(defenseSize / 2 + PHYSICS_CONSTANTS.HEALTH_BAR_OFFSET)
            };
            
            // –î–ª—è —è–º –¥–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if (defenseType === 'pit') {
                healthBarConfig.showDigits = true;
                healthBarConfig.showBar = false; // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–ª—è —è–º
            }
            
            defense.createHealthBar(healthBarConfig);
        }
        
        return defense;
    }

    // ========== DRAG & DROP –ú–ï–¢–û–î–´ ==========
    
    /**
     * –í–∫–ª—é—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    enableDrag() {
        if (!this.isDraggable) return;
        
        this.setInteractive();
        console.log(`üóø [Defense] Drag & drop –≤–∫–ª—é—á–µ–Ω –¥–ª—è ${this.defenseType}`);
    }
    
    /**
     * –û—Ç–∫–ª—é—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    disableDrag() {
        this.disableInteractive();
        this.stopDrag();
        console.log(`üóø [Defense] Drag & drop –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è ${this.defenseType}`);
    }
    
    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
     * @param {Object} pointer - –û–±—ä–µ–∫—Ç —É–∫–∞–∑–∞—Ç–µ–ª—è Phaser
     */
    startDrag(pointer) {
        if (!this.isDraggable || this.isBeingDragged) return;
        
        this.isBeingDragged = true;
        this.dragOffset.x = this.x - pointer.x;
        this.dragOffset.y = this.y - pointer.y;
        
        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        this.setAlpha(STONE_SETTINGS.DRAG_FEEDBACK.ALPHA);
        this.setScale(
            this.originalScale.x * STONE_SETTINGS.DRAG_FEEDBACK.SCALE_MULTIPLIER,
            this.originalScale.y * STONE_SETTINGS.DRAG_FEEDBACK.SCALE_MULTIPLIER
        );
        
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        this.scene.events.emit(EVENT_TYPES.DRAG_START, {
            object: this,
            pointer: pointer
        });
        
        console.log(`üóø [Defense] –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ ${this.defenseType}`);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
     * @param {Object} pointer - –û–±—ä–µ–∫—Ç —É–∫–∞–∑–∞—Ç–µ–ª—è Phaser
     */
    updateDrag(pointer) {
        if (!this.isBeingDragged) return;
        
        this.x = pointer.x + this.dragOffset.x;
        this.y = pointer.y + this.dragOffset.y;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ
        this.physicsBody.setPosition(this.x, this.y);
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
     * @param {Object} pointer - –û–±—ä–µ–∫—Ç —É–∫–∞–∑–∞—Ç–µ–ª—è Phaser
     */
    endDrag(pointer) {
        if (!this.isBeingDragged) return;
        
        this.isBeingDragged = false;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∏–¥
        this.setAlpha(this.originalAlpha);
        this.setScale(this.originalScale.x, this.originalScale.y);
        
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–∞–º–Ω—è
        if (this.defenseType === 'stone') {
            this.scene.events.emit(EVENT_TYPES.STONE_MOVED, {
                stone: this,
                newPosition: { x: this.x, y: this.y }
            });
        }
        
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        this.scene.events.emit(EVENT_TYPES.DRAG_END, {
            object: this,
            pointer: pointer
        });
        
        console.log(`üóø [Defense] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ ${this.defenseType} –≤ (${this.x.toFixed(1)}, ${this.y.toFixed(1)})`);
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
     */
    stopDrag() {
        if (this.isBeingDragged) {
            this.isBeingDragged = false;
            this.setAlpha(this.originalAlpha);
            this.setScale(this.originalScale.x, this.originalScale.y);
        }
    }

}