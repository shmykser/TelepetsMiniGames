/**
 * –°—É–Ω–¥—É–∫ —Å —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏
 * –†–∞–∑–º–µ—â–∞–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞—Ö –¥–æ–º–æ–≤
 */

import { Lock } from './Lock.js';
import { LOCK_TYPES, getRandomLockType, getRandomLockLevel } from '../types/lockTypes.js';

export class Chest extends Phaser.GameObjects.Text {
    constructor(scene, x, y, config = {}) {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å —ç–º–æ–¥–∑–∏
        super(scene, x, y, 'üéÅ', {
            fontSize: '64px',
            fontFamily: 'Arial'
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É
        scene.add.existing(this);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º origin –≤ —Ü–µ–Ω—Ç—Ä
        this.setOrigin(0.5);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        this.setShadow(2, 2, '#000000', 4, true, true);
        
        // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–Ω–¥—É–∫–∞
        this.contents = {
            coins: config.coins || 0,
            jewels: config.jewels || 0,
            keys: config.keys || 0
        };
        
        // –°—Ç–∞—Ç—É—Å
        this.isOpened = false;
        this.isLocked = config.isLocked || false;
        this.lockLevel = config.lockLevel || 0; // 0 = –Ω–µ—Ç –∑–∞–º–∫–∞, 1-3 = —É—Ä–æ–≤–µ–Ω—å –∑–∞–º–∫–∞
        
        // ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–µ–π –¥–æ–º)
        this.ownerId = config.ownerId || null;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–º–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        this.lock = null;
        if (this.isLocked) {
            this.createLock(config);
            this.setupLockEvents();
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ü–µ–Ω—É
        this.scene = scene;
        
        // –í–∏–∑—É–∞–ª
        this.setupVisuals();
        
        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        this.setInteractive();
        this.setupInteraction();
        
        console.log(`üí∞ [Chest] –°—É–Ω–¥—É–∫ —Å–æ–∑–¥–∞–Ω –≤ (${x}, ${y}), —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:`, this.contents);
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–∫–∞ –¥–ª—è —Å—É–Ω–¥—É–∫–∞
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–º–∫–∞
     */
    createLock(config) {
        const lockType = config.lockType || getRandomLockType();
        const lockLevel = config.lockLevel || getRandomLockLevel();
        
        console.log(`üîí [Chest] –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–∫–∞: ${lockType} —É—Ä–æ–≤–µ–Ω—å ${lockLevel}`);
        
        this.lock = new Lock(this.scene, this.x, this.y, {
            type: lockType,
            level: lockLevel,
            ownerId: this.ownerId
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –∑–∞–º–∫–∞
     */
    setupLockEvents() {
        if (!this.lock) return;
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞–º–∫–∞
        this.scene.events.on('lock:opened', (data) => {
            if (data.lock === this.lock) {
                console.log('üîì [Chest] –ó–∞–º–æ–∫ —Å—É–Ω–¥—É–∫–∞ –≤–∑–ª–æ–º–∞–Ω!');
                this.isLocked = false;
                this.isOpened = true;
                this.open();
            }
        });
        
        this.scene.events.on('lock:failed', (data) => {
            if (data.lock === this.lock) {
                console.log('‚ùå [Chest] –ü—Ä–æ–≤–∞–ª –≤–∑–ª–æ–º–∞ –∑–∞–º–∫–∞ —Å—É–Ω–¥—É–∫–∞');
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            }
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∑—É–∞–ª–∞ —Å—É–Ω–¥—É–∫–∞
     */
    setupVisuals() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
        this.setDepth(100);
        
        // –ó–∞–º–æ–∫ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ createLock()
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    setupInteraction() {
        this.on('pointerover', () => {
            if (!this.isOpened) {
                this.setScale(1.15);
                this.scene.input.setDefaultCursor('pointer');
            }
        });
        
        this.on('pointerout', () => {
            if (!this.isOpened) {
                this.setScale(1.0);
                this.scene.input.setDefaultCursor('default');
            }
        });
        
        this.on('pointerdown', () => {
            if (!this.isOpened) {
                this.tryOpen();
            }
        });
    }
    
    /**
     * –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫
     */
    tryOpen() {
        console.log(`üí∞ [Chest] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–æ–∫
        if (this.isLocked && this.lock) {
            console.log(`üîí [Chest] –°—É–Ω–¥—É–∫ –∑–∞–ø–µ—Ä—Ç! –¢–∏–ø –∑–∞–º–∫–∞: ${this.lock.type}, —É—Ä–æ–≤–µ–Ω—å: ${this.lock.level}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ —Å—Ü–µ–Ω—ã
            const pet = this.scene.pet || (this.scene.scene && this.scene.scene.pet);
            if (!pet) {
                console.warn('üîí [Chest] –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω');
                this.showLockedMessage('–û—à–∏–±–∫–∞: –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return false;
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –≤–∑–ª–æ–º–∞—Ç—å –∑–∞–º–æ–∫
            return this.lock.tryPick(pet);
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—É–Ω–¥—É–∫
        this.open();
        return true;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø–µ—Ä—Ç–æ–º —Å—É–Ω–¥—É–∫–µ
     * @param {string} message 
     */
    showLockedMessage(message) {
        const { width, height } = this.scene.scale;
        
        const messageText = this.scene.add.text(
            width / 2,
            height / 2,
            message,
            {
                fontSize: '18px',
                fontFamily: 'Arial',
                color: '#ff0000',
                stroke: '#000000',
                strokeThickness: 3,
                align: 'center'
            }
        ).setOrigin(0.5).setDepth(200);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        this.scene.time.delayedCall(2000, () => {
            messageText.destroy();
        });
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫
     */
    open() {
        if (this.isOpened) {
            return;
        }
        
        console.log(`üí∞ [Chest] –°—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç! –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:`, this.contents);
        
        this.isOpened = true;
        
        // –ú–µ–Ω—è–µ–º –≤–∏–∑—É–∞–ª
        this.setText('üì¶'); // –û—Ç–∫—Ä—ã—Ç—ã–π —Å—É–Ω–¥—É–∫
        
        // –£–±–∏—Ä–∞–µ–º –∑–∞–º–æ–∫
        if (this.lockIcon) {
            this.lockIcon.destroy();
            this.lockIcon = null;
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è
        this.scene.tweens.add({
            targets: this,
            scaleX: 1.2,
            scaleY: 1.2,
            duration: 200,
            yoyo: true,
            ease: 'Back.easeOut',
            onComplete: () => {
                this.setScale(0.9);
                this.setAlpha(0.7);
            }
        });
        
        // –°–æ–±—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
        this.emit('chest:opened', {
            chest: this,
            contents: this.contents
        });
        
        // –î–µ–ª–∞–µ–º –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º
        this.disableInteractive();
    }
    
    /**
     * –ó–∞–±—Ä–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–Ω–¥—É–∫–∞
     * @returns {Object} –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–Ω–¥—É–∫–∞
     */
    collectContents() {
        if (!this.isOpened) {
            console.warn(`üí∞ [Chest] –ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Å—É–Ω–¥—É–∫–∞`);
            return null;
        }
        
        const contents = { ...this.contents };
        
        // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        this.contents = {
            coins: 0,
            jewels: 0,
            keys: 0
        };
        
        console.log(`üí∞ [Chest] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–±—Ä–∞–Ω–æ:`, contents);
        
        // –°–æ–±—ã—Ç–∏–µ —Å–±–æ—Ä–∞
        this.emit('chest:collected', {
            chest: this,
            contents: contents
        });
        
        return contents;
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç—å –∑–∞–º–æ–∫ (—Å –ø–æ–º–æ—â—å—é –æ—Ç–º—ã—á–∫–∏ –∏–ª–∏ –∫–ª—é—á–∞)
     * @param {number} skillLevel - –£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –≤–∑–ª–æ–º–∞
     */
    unlock(skillLevel = 0) {
        if (!this.isLocked) {
            return true;
        }
        
        console.log(`üîì [Chest] –ü–æ–ø—ã—Ç–∫–∞ –≤–∑–ª–æ–º–∞ –∑–∞–º–∫–∞. –ù–∞–≤—ã–∫: ${skillLevel}, –£—Ä–æ–≤–µ–Ω—å –∑–∞–º–∫–∞: ${this.lockLevel}`);
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (skillLevel >= this.lockLevel) {
            this.isLocked = false;
            
            if (this.lockIcon) {
                this.lockIcon.destroy();
                this.lockIcon = null;
            }
            
            console.log(`üîì [Chest] –ó–∞–º–æ–∫ –≤–∑–ª–æ–º–∞–Ω!`);
            
            this.emit('chest:unlocked', {
                chest: this
            });
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º
            this.open();
            
            return true;
        }
        
        console.log(`üîí [Chest] –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑–ª–æ–º–∞—Ç—å –∑–∞–º–æ–∫`);
        return false;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—É—Å—Ç–æ–π –ª–∏ —Å—É–Ω–¥—É–∫
     */
    isEmpty() {
        return this.contents.coins === 0 && 
               this.contents.jewels === 0 && 
               this.contents.keys === 0;
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å—É–Ω–¥—É–∫–∞
     */
    destroy() {
        if (this.lockIcon) {
            this.lockIcon.destroy();
        }
        super.destroy();
    }
}

