/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –∑–∞–º–∫–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –∑–∞–º–∫–æ–≤: Simple, Maze, Pattern
 */

import { LOCK_TYPES, getLockConfig, getLockCost } from '../types/lockTypes.js';

export class Lock {
    constructor(scene, x, y, config = {}) {
        this.scene = scene;
        this.x = x;
        this.y = y;
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        this.type = config.type || LOCK_TYPES.SIMPLE;
        this.level = config.level || 1;
        this.isLocked = config.isLocked !== false;
        this.ownerId = config.ownerId || null;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–º–∫–∞
        this.config = getLockConfig(this.type, this.level);
        this.cost = getLockCost(this.level);
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.isOpened = false;
        this.attempts = 0;
        this.maxAttempts = this.config?.maxAttempts || 3;
        
        // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.lockIcon = null;
        this.visualElements = [];
        
        console.log(`üîí [Lock] –ó–∞–º–æ–∫ —Å–æ–∑–¥–∞–Ω: ${this.type} —É—Ä–æ–≤–µ–Ω—å ${this.level}`);
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∞ –∑–∞–º–∫–∞
     */
    createVisuals() {
        // –ë–∞–∑–æ–≤—ã–π –≤–∏–∑—É–∞–ª - –∏–∫–æ–Ω–∫–∞ –∑–∞–º–∫–∞
        this.lockIcon = this.scene.add.text(
            this.x + 25,
            this.y - 25,
            this.getLockEmoji(),
            { fontSize: '32px' }
        ).setDepth(101);
        
        this.lockIcon.setShadow(2, 2, '#000000', 4, true, true);
        this.visualElements.push(this.lockIcon);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if (this.isLocked) {
            this.createTypeSpecificVisuals();
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–º–∫–∞
     */
    createTypeSpecificVisuals() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        const levelText = this.scene.add.text(
            this.x + 40,
            this.y - 40,
            `${this.level}`,
            { 
                fontSize: '16px',
                fontFamily: 'Arial',
                color: this.getLevelColor(),
                stroke: '#000000',
                strokeThickness: 2
            }
        ).setDepth(102);
        
        this.visualElements.push(levelText);
        
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch (this.type) {
            case LOCK_TYPES.SIMPLE:
                // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–º–æ–∫ - —Ç–æ–ª—å–∫–æ —É—Ä–æ–≤–µ–Ω—å
                break;
            case LOCK_TYPES.MAZE:
                this.createMazeEffect();
                break;
            case LOCK_TYPES.PATTERN:
                this.createPatternEffect();
                break;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
     */
    getLevelColor() {
        switch (this.type) {
            case LOCK_TYPES.SIMPLE:
                return '#ffff00'; // –ñ–µ–ª—Ç—ã–π
            case LOCK_TYPES.MAZE:
                return '#00ffff'; // –ì–æ–ª—É–±–æ–π
            case LOCK_TYPES.PATTERN:
                return '#ff00ff'; // –ü—É—Ä–ø—É—Ä–Ω—ã–π
            default:
                return '#ffffff'; // –ë–µ–ª—ã–π
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
     */
    createMazeEffect() {
        const lines = [];
        const radius = 30;
        const numLines = 8;
        
        for (let i = 0; i < numLines; i++) {
            const angle = (i / numLines) * Math.PI * 2;
            const startX = this.x + Math.cos(angle) * radius;
            const startY = this.y + Math.sin(angle) * radius;
            const endX = this.x + Math.cos(angle) * (radius + 10);
            const endY = this.y + Math.sin(angle) * (radius + 10);
            
            const line = this.scene.add.line(
                this.x, this.y,
                startX - this.x, startY - this.y,
                endX - this.x, endY - this.y,
                0x888888
            ).setLineWidth(2).setDepth(100);
            
            lines.push(line);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ª–∏–Ω–∏–π
            this.scene.tweens.add({
                targets: line,
                alpha: 0.3,
                duration: 1000 + i * 100,
                yoyo: true,
                repeat: -1,
                ease: 'Sine.easeInOut'
            });
        }
        
        this.visualElements.push(...lines);
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ç–æ—á–µ–∫ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    createPatternEffect() {
        const points = [];
        const radius = 25;
        const numPoints = 6;
        
        for (let i = 0; i < numPoints; i++) {
            const angle = (i / numPoints) * Math.PI * 2;
            const x = this.x + Math.cos(angle) * radius;
            const y = this.y + Math.sin(angle) * radius;
            
            const point = this.scene.add.circle(x, y, 3, 0xffffff).setDepth(100);
            
            points.push(point);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Ç–æ—á–µ–∫
            this.scene.tweens.add({
                targets: point,
                scale: 1.5,
                duration: 800 + i * 150,
                yoyo: true,
                repeat: -1,
                ease: 'Sine.easeInOut'
            });
        }
        
        this.visualElements.push(...points);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –∑–∞–º–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
     */
    getLockEmoji() {
        switch (this.type) {
            case LOCK_TYPES.SIMPLE:
                return 'üîì';
            case LOCK_TYPES.MAZE:
                return 'üß©';
            case LOCK_TYPES.PATTERN:
                return 'üéØ';
            default:
                return 'üîí';
        }
    }
    
    /**
     * –ü–æ–ø—ã—Ç–∫–∞ –≤–∑–ª–æ–º–∞ –∑–∞–º–∫–∞
     * @param {Object} pet - –ü–∏—Ç–æ–º–µ—Ü —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
     * @returns {boolean} - –£—Å–ø–µ—à–Ω–æ –ª–∏ –Ω–∞—á–∞—Ç –≤–∑–ª–æ–º
     */
    tryPick(pet) {
        if (!this.isLocked || this.isOpened) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–º—ã—á–µ–∫
        const lockpicks = pet.inventory.lockpicks || 0;
        
        if (lockpicks < this.cost) {
            this.showMessage(`‚ùå –ù—É–∂–Ω–æ ${this.cost} –æ—Ç–º—ã—á–µ–∫! –£ –≤–∞—Å: ${lockpicks}`);
            return false;
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏-–∏–≥—Ä—É –≤–∑–ª–æ–º–∞
        this.startLockpicking(pet);
        return true;
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏-–∏–≥—Ä—ã –≤–∑–ª–æ–º–∞
     * @param {Object} pet - –ü–∏—Ç–æ–º–µ—Ü
     */
    startLockpicking(pet) {
        console.log(`üîì [Lock] –ó–∞–ø—É—Å–∫ –≤–∑–ª–æ–º–∞ ${this.type} –∑–∞–º–∫–∞`);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
        this.scene.scene.pause(this.scene.scene.key);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å—Ü–µ–Ω—É –≤–∑–ª–æ–º–∞
        this.scene.scene.launch('LockpickingScene', {
            lock: this,
            pet: pet,
            lockType: this.type,
            lockLevel: this.level,
            config: this.config,
            cost: this.cost
        });
    }
    
    /**
     * –£—Å–ø–µ—à–Ω—ã–π –≤–∑–ª–æ–º
     */
    onPickSuccess() {
        console.log(`‚úÖ [Lock] –ó–∞–º–æ–∫ ${this.type} —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–Ω!`);
        
        this.isOpened = true;
        this.isLocked = false;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª
        this.updateVisuals();
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ
        this.scene.events.emit('lock:opened', {
            lock: this,
            type: this.type,
            level: this.level
        });
    }
    
    /**
     * –ü—Ä–æ–≤–∞–ª –≤–∑–ª–æ–º–∞
     */
    onPickFailed() {
        console.log(`‚ùå [Lock] –ü—Ä–æ–≤–∞–ª –≤–∑–ª–æ–º–∞ ${this.type} –∑–∞–º–∫–∞`);
        
        this.attempts++;
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ
        this.scene.events.emit('lock:failed', {
            lock: this,
            type: this.type,
            level: this.level,
            attempts: this.attempts,
            maxAttempts: this.maxAttempts
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∞ –ø–æ—Å–ª–µ –≤–∑–ª–æ–º–∞
     */
    updateVisuals() {
        if (this.lockIcon) {
            this.lockIcon.setText('üîì'); // –û—Ç–∫—Ä—ã—Ç—ã–π –∑–∞–º–æ–∫
            this.lockIcon.setTint(0x00ff00); // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param {string} message 
     */
    showMessage(message) {
        const { width, height } = this.scene.scale;
        
        const messageText = this.scene.add.text(
            width / 2,
            height / 2,
            message,
            {
                fontSize: '18px',
                fontFamily: 'Arial',
                color: '#ff0000',
                stroke: '#000000',
                strokeThickness: 3,
                align: 'center'
            }
        ).setOrigin(0.5).setDepth(200);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        this.scene.time.delayedCall(2000, () => {
            messageText.destroy();
        });
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        this.visualElements.forEach(element => {
            if (element && element.destroy) {
                element.destroy();
            }
        });
        this.visualElements = [];
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –º–∏–Ω–∏-–∏–≥—Ä—ã
     */
    getGameConfig() {
        const baseConfig = {
            type: this.type,
            maxAttempts: this.config.maxAttempts,
            timeLimit: this.config.timeLimit || 0
        };
        
        switch (this.type) {
            case LOCK_TYPES.SIMPLE:
                return {
                    ...baseConfig,
                    pins: this.config.pins,
                    indicatorSpeed: this.config.indicatorSpeed,
                    tolerance: this.config.tolerance
                };
            case LOCK_TYPES.MAZE:
                return {
                    ...baseConfig,
                    mazeSize: this.config.mazeSize,
                    ballSpeed: this.config.ballSpeed
                };
            case LOCK_TYPES.PATTERN:
                return {
                    ...baseConfig,
                    points: this.config.points,
                    showPattern: this.config.showPattern
                };
            default:
                return baseConfig;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–∫–µ
     */
    getInfo() {
        return {
            type: this.type,
            level: this.level,
            isLocked: this.isLocked,
            isOpened: this.isOpened,
            attempts: this.attempts,
            maxAttempts: this.maxAttempts,
            cost: this.cost
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–æ–≤ —É–±—Ä–∞–Ω—ã - –æ–Ω–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
