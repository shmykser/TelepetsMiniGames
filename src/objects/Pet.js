/**
 * –ö–ª–∞—Å—Å –ø–∏—Ç–æ–º—Ü–∞ –∏–≥—Ä–æ–∫–∞ –¥–ª—è Pet Thief
 * –ù–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç GameObject, —É–ø—Ä–∞–≤–ª—è–µ–º—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
 */

import { GameObject } from './GameObject.js';
import { PET_CONFIG, WORLD_CONSTANTS } from '../types/worldTypes.js';
import { PropertyUtils } from '../utils/PropertyUtils.js';
import { Inventory } from './Inventory.js';

export class Pet extends GameObject {
    constructor(scene, x, y, config = {}) {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è GameObject
        const petConfig = {
            x,
            y,
            health: config.health || PET_CONFIG.DEFAULT_HEALTH,
            maxHealth: config.maxHealth || PET_CONFIG.DEFAULT_HEALTH,
            texture: config.texture || PET_CONFIG.TEXTURE,
            spriteKey: config.spriteKey || PET_CONFIG.SPRITE_KEY,
            size: config.size || PET_CONFIG.DEFAULT_SIZE,
            speed: config.speed || PET_CONFIG.DEFAULT_SPEED,
            damage: 0, // –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –∞—Ç–∞–∫—É–µ—Ç (–ø–æ–∫–∞)
            cooldown: 0
        };
        
        super(scene, petConfig);
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–∏—Ç–æ–º—Ü–∞
        PropertyUtils.defineProperty(this, "_inventory", new Inventory(scene, this));
        PropertyUtils.defineProperty(this, "_skills", { ...PET_CONFIG.DEFAULT_SKILLS });
        PropertyUtils.defineProperty(this, "_isMoving", false);
        PropertyUtils.defineProperty(this, "_targetPosition", null);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏—Ç–æ–º—Ü–∞
        this.setupPet();
        
        console.log('üêæ [Pet] –ü–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏', { x, y });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∑—É–∞–ª–∞ –∏ —Ñ–∏–∑–∏–∫–∏ –ø–∏—Ç–æ–º—Ü–∞
     */
    setupPet() {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø—Ä–∞–π—Ç–∞
        this.setScale(1.5);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.setDepth(WORLD_CONSTANTS.DEPTH.PET);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–ª–∞
        if (this.physicsBody) {
            this.physicsBody.setCollideWorldBounds(false); // –ú–æ–∂–µ–º –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã (–±—É–¥—É—Ç –≥—Ä–∞–Ω–∏—Ü—ã –º–∏—Ä–∞)
            this.physicsBody.setSize(this.width * 0.8, this.height * 0.8);
            this.physicsBody.setOffset(
                (this.width - this.width * 0.8) / 2,
                (this.height - this.height * 0.8) / 2
            );
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–æ—Å–∫—É –∑–¥–æ—Ä–æ–≤—å—è
        this.createHealthBar({
            width: 40,
            height: 4,
            offsetY: -30,
            showBackground: true,
            backgroundColor: 0x000000,
            borderColor: 0xffffff
        });
    }
    
    // ===== –ì–ï–¢–¢–ï–†–´ –ò –°–ï–¢–¢–ï–†–´ =====
    
    get inventory() {
        return this._inventory;
    }
    
    get skills() {
        return this._skills;
    }
    
    get isMoving() {
        return this._isMoving;
    }
    
    set isMoving(value) {
        this._isMoving = value;
    }
    
    get targetPosition() {
        return this._targetPosition;
    }
    
    set targetPosition(value) {
        this._targetPosition = value;
    }
    
    // ===== –ú–ï–¢–û–î–´ –ò–ù–í–ï–ù–¢–ê–†–Ø =====
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –º–æ–Ω–µ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
     * @param {number} amount 
     */
    addCoins(amount) {
        this.inventory.add('coins', amount);
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
     * @param {number} amount 
     */
    addJewels(amount) {
        this.inventory.add('jewels', amount);
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª—é—á–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
     * @param {number} amount 
     */
    addKeys(amount) {
        this.inventory.add('keys', amount);
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–º—ã—á–∫–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
     * @param {number} amount 
     */
    addLockpicks(amount) {
        this.inventory.add('lockpicks', amount);
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–∫—Ä–æ–≤–∏—â–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
     * @param {Object} treasure 
     */
    addTreasure(treasure) {
        this.inventory.add('treasures', treasure);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
     * @param {string} itemType - –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞
     * @param {number} amount - –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
     * @returns {boolean}
     */
    hasItem(itemType, amount = 1) {
        return this.inventory.has(itemType, amount);
    }
    
    /**
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     * @param {string} itemType 
     * @param {number} amount 
     * @returns {boolean}
     */
    useItem(itemType, amount = 1) {
        return this.inventory.use(itemType, amount);
    }
    
    // ===== –ú–ï–¢–û–î–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =====
    
    /**
     * –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    fillInventoryForTesting() {
        this.inventory.fillForTesting();
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º—ã—á–µ–∫ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     * @param {number} amount 
     */
    setLockpicks(amount) {
        this.inventory.set('lockpicks', amount);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     * @param {number} amount 
     */
    setCoins(amount) {
        this.inventory.set('coins', amount);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     * @param {number} amount 
     */
    setJewels(amount) {
        this.inventory.set('jewels', amount);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     * @param {number} amount 
     */
    setKeys(amount) {
        this.inventory.set('keys', amount);
    }
    
    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    clearInventory() {
        this.inventory.clear();
    }
    
    // ===== –ú–ï–¢–û–î–´ –ù–ê–í–´–ö–û–í =====
    
    /**
     * –£–ª—É—á—à–∞–µ—Ç –Ω–∞–≤—ã–∫
     * @param {string} skillName 
     * @param {number} amount 
     */
    improveSkill(skillName, amount = 1) {
        if (this._skills.hasOwnProperty(skillName)) {
            this._skills[skillName] += amount;
            console.log(`‚≠ê [Pet] –ù–∞–≤—ã–∫ —É–ª—É—á—à–µ–Ω: ${skillName} = ${this._skills[skillName]}`);
            
            this.scene.events.emit('pet:skillImproved', {
                skill: skillName,
                level: this._skills[skillName]
            });
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞
     * @param {string} skillName 
     * @returns {number}
     */
    getSkillLevel(skillName) {
        return this._skills[skillName] || 0;
    }
    
    // ===== –ú–ï–¢–û–î–´ –î–í–ò–ñ–ï–ù–ò–Ø =====
    
    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
     * @param {number} x 
     * @param {number} y 
     */
    moveTo(x, y) {
        this._targetPosition = { x, y };
        this._isMoving = true;
        
        console.log(`üêæ [Pet] –ù–∞—á–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è –∫`, this._targetPosition);
        
        this.scene.events.emit('pet:moveStart', {
            target: this._targetPosition
        });
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ
     */
    stopMovement() {
        this._isMoving = false;
        this._targetPosition = null;
        
        if (this.physicsBody) {
            this.physicsBody.setVelocity(0, 0);
        }
        
        console.log('üêæ [Pet] –î–≤–∏–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        this.scene.events.emit('pet:moveStop');
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–∏—Ç–æ–º–µ—Ü —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
     * @returns {boolean}
     */
    hasReachedTarget() {
        if (!this._targetPosition) return true;
        
        const dx = this._targetPosition.x - this.x;
        const dy = this._targetPosition.y - this.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        return distance < 5; // –ü–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
    }
    
    // ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï =====
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä)
     * @param {number} time 
     * @param {number} delta 
     */
    update(time, delta) {
        super.update(time, delta);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –∏ —Ç.–¥.
    }
    
    // ===== –û–ß–ò–°–¢–ö–ê =====
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
     */
    destroy() {
        console.log('üêæ [Pet] –ü–∏—Ç–æ–º–µ—Ü —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
        super.destroy();
    }
    
    // ===== –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ú–ï–¢–û–î –°–û–ó–î–ê–ù–ò–Ø =====
    
    /**
     * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
     * @param {Phaser.Scene} scene 
     * @param {number} x 
     * @param {number} y 
     * @param {Object} config 
     * @returns {Pet}
     */
    static CreatePet(scene, x, y, config = {}) {
        return new Pet(scene, x, y, config);
    }
}

