import Phaser from 'phaser';
import { PHYSICS_CONSTANTS, DEPTH_CONSTANTS } from '../settings/GameSettings.js';

/**
 * –ö–ª–∞—Å—Å —Å–Ω–∞—Ä—è–¥–∞ –¥–ª—è –≤—Ä–∞–≥–æ–≤
 */
export class Projectile extends Phaser.GameObjects.Container {
    constructor(scene, x, y, config = {}) {
        super(scene, x, y);
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–Ω–∞—Ä—è–¥–∞
        this.speed = config.speed || 400;
        this.damage = config.damage || 1;
        this.direction = config.direction || { x: 1, y: 0 };
        this.target = config.target || null;
        this.source = config.source || null;
        this.color = config.color || 0xFF6600; // –†—ã–∂–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.lifetime = config.lifetime || 5000; // 5 —Å–µ–∫—É–Ω–¥ –∂–∏–∑–Ω–∏
        
        // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞
        this.createVisual();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–∑–∏–∫—É
        this.setupPhysics();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
        this.setVelocity();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è
        this.setupLifetime();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
        scene.add.existing(this);
        
        console.log(`üí• [Projectile] –°–æ–∑–¥–∞–Ω —Å–Ω–∞—Ä—è–¥: —Å–∫–æ—Ä–æ—Å—Ç—å=${this.speed}, —É—Ä–æ–Ω=${this.damage}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ=(${this.direction.x.toFixed(2)}, ${this.direction.y.toFixed(2)})`);
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–Ω–∞—Ä—è–¥–∞
     */
    createVisual() {
        // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥ –∫–∞–∫ —Å–Ω–∞—Ä—è–¥
        this.graphics = this.scene.add.graphics();
        this.graphics.fillStyle(this.color);
        this.graphics.fillCircle(0, 0, 4); // –†–∞–¥–∏—É—Å 4 –ø–∏–∫—Å–µ–ª—è
        this.add(this.graphics);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
        this.setDepth(DEPTH_CONSTANTS.PROJECTILE);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–∑–∏–∫–∏ —Å–Ω–∞—Ä—è–¥–∞
     */
    setupPhysics() {
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ
        this.scene.physics.add.existing(this);
        this.physicsBody = this.body;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
        this.physicsBody.setSize(8, 8); // –†–∞–∑–º–µ—Ä –∫–æ–ª–ª–∏–∑–∏–∏
        this.physicsBody.setOffset(-4, -4); // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–ª–∏–∑–∏—é
        this.physicsBody.setBounce(0.1);
        this.physicsBody.setDrag(0);
        
        // –í–∫–ª—é—á–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å –º–∏—Ä–æ–º
        this.physicsBody.setCollideWorldBounds(true);
        this.physicsBody.onWorldBounds = true;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –º–∏—Ä–∞
        this.physicsBody.world.on('worldbounds', (event) => {
            if (event.gameObject === this) {
                this.destroy();
            }
        });
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–Ω–∞—Ä—è–¥–∞
     */
    setVelocity() {
        if (this.physicsBody) {
            this.physicsBody.setVelocity(
                this.direction.x * this.speed,
                this.direction.y * this.speed
            );
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Å–Ω–∞—Ä—è–¥–∞
     */
    setupLifetime() {
        this.scene.time.delayedCall(this.lifetime, () => {
            if (this && this.scene) {
                this.destroy();
            }
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞
     */
    update(time, delta) {
        super.update(time, delta);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å —Ü–µ–ª—å—é
        if (this.target && this.target.isAlive) {
            const distance = this.scene.physics.world.distance(this, this.target);
            if (distance < 10) { // –ï—Å–ª–∏ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏
                this.hitTarget();
            }
        }
    }
    
    /**
     * –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ü–µ–ª—å
     */
    hitTarget() {
        if (this.target && this.target.isAlive) {
            console.log(`üí• [Projectile] –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ü–µ–ª—å! –£—Ä–æ–Ω: ${this.damage}`);
            
            // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
            if (this.target.takeDamage) {
                this.target.takeDamage(this.damage, this.source);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è
            if (this.scene.events) {
                this.scene.events.emit('projectile_hit', {
                    projectile: this,
                    target: this.target,
                    damage: this.damage,
                    source: this.source
                });
            }
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å–Ω–∞—Ä—è–¥
        this.destroy();
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞
     */
    destroy() {
        if (this.graphics) {
            this.graphics.destroy();
        }
        super.destroy();
    }
}
