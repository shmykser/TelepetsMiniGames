/**
 * –°—Ü–µ–Ω–∞ –≤–∑–ª–æ–º–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç-–∑–∞–º–∫–∞
 * –ú–∏–Ω–∏-–∏–≥—Ä–∞: –ø—Ä–æ–≤–µ—Å—Ç–∏ —à–∞—Ä–∏–∫ —á–µ—Ä–µ–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç –∫ –≤—ã—Ö–æ–¥—É
 */

import { BaseLockScene } from './BaseLockScene.js';
import { MazeGenerator } from '../../utils/MazeGenerator.js';
// HTMLButton —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ Phaser –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

export class MazeLockScene extends BaseLockScene {
    constructor() {
        super('MazeLockScene');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
        this.ball = null;
        this.exit = null;
        this.mazeWalls = null;
        
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ (–¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π)
        this.mazeStartX = 0;
        this.mazeStartY = 0;
        this.mazeWidth = 0;
        this.mazeHeight = 0;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
     */
    create() {
        super.create();
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π UI
        this.createBaseUI('üß© –í–ó–õ–û–ú –õ–ê–ë–ò–†–ò–ù–¢-–ó–ê–ú–ö–ê');
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        const { width } = this.scale;
        this.add.text(width / 2, 160, '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —à–∞—Ä–∏–∫ –∫ –∑–µ–ª–µ–Ω–æ–º—É –≤—ã—Ö–æ–¥—É!', {
            fontSize: '16px',
            fontFamily: 'Arial',
            color: '#ffffff',
            stroke: '#000000',
            strokeThickness: 2,
            align: 'center'
        }).setOrigin(0.5).setDepth(10);
        
        // –°–æ–∑–¥–∞–µ–º –ª–∞–±–∏—Ä–∏–Ω—Ç
        this.createMaze();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à (–¥–ª—è –ü–ö)
        this.setupKeyboard();
        
        // –ò–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
        this.isGameActive = true;
        
        console.log('üß© [MazeLockScene] –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ Recursive Backtracker
     */
    createMaze() {
        const { width, height } = this.scale;
        const mazeSize = this.config.mazeSize || 5;
        const cellSize = 40;
        const mazeWidth = mazeSize * cellSize;
        const mazeHeight = mazeSize * cellSize;
        const startX = (width - mazeWidth) / 2;
        const startY = (height - mazeHeight) / 2 + 20;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –¥–ª—è Tap-to-Move
        this.mazeStartX = startX;
        this.mazeStartY = startY;
        this.mazeWidth = mazeWidth;
        this.mazeHeight = mazeHeight;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–∏–¥–µ–∞–ª—å–Ω—ã–π" –ª–∞–±–∏—Ä–∏–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ Recursive Backtracker
        const mazeGrid = MazeGenerator.generate(mazeSize, mazeSize);
        
        // –í—ã–≤–æ–¥–∏–º ASCII –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üß© [MazeLockScene] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ª–∞–±–∏—Ä–∏–Ω—Ç:\n' + MazeGenerator.visualize(mazeGrid));
        
        // –ì—Ä—É–ø–ø–∞ –¥–ª—è —Å—Ç–µ–Ω
        this.mazeWalls = this.physics.add.staticGroup();
        
        // –¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω
        const wallThickness = 6;
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏
        for (let y = 0; y < mazeSize; y++) {
            for (let x = 0; x < mazeSize; x++) {
                const cell = mazeGrid[y][x];
                const cellX = startX + x * cellSize;
                const cellY = startY + y * cellSize;
                
                // –í–µ—Ä—Ö–Ω—è—è —Å—Ç–µ–Ω–∞
                if (cell.walls.top) {
                    const wall = this.add.rectangle(
                        cellX + cellSize / 2,
                        cellY,
                        cellSize,
                        wallThickness,
                        0x444444
                    ).setDepth(5);
                    this.physics.add.existing(wall, true);
                    this.mazeWalls.add(wall);
                }
                
                // –ü—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞
                if (cell.walls.right) {
                    const wall = this.add.rectangle(
                        cellX + cellSize,
                        cellY + cellSize / 2,
                        wallThickness,
                        cellSize,
                        0x444444
                    ).setDepth(5);
                    this.physics.add.existing(wall, true);
                    this.mazeWalls.add(wall);
                }
                
                // –ù–∏–∂–Ω—è—è —Å—Ç–µ–Ω–∞
                if (cell.walls.bottom) {
                    const wall = this.add.rectangle(
                        cellX + cellSize / 2,
                        cellY + cellSize,
                        cellSize,
                        wallThickness,
                        0x444444
                    ).setDepth(5);
                    this.physics.add.existing(wall, true);
                    this.mazeWalls.add(wall);
                }
                
                // –õ–µ–≤–∞—è —Å—Ç–µ–Ω–∞
                if (cell.walls.left) {
                    const wall = this.add.rectangle(
                        cellX,
                        cellY + cellSize / 2,
                        wallThickness,
                        cellSize,
                        0x444444
                    ).setDepth(5);
                    this.physics.add.existing(wall, true);
                    this.mazeWalls.add(wall);
                }
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º —à–∞—Ä–∏–∫ (—Å—Ç–∞—Ä—Ç –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É)
        this.ball = this.add.circle(
            startX + cellSize / 2,
            startY + cellSize / 2,
            12,
            0xff0000
        ).setDepth(6);
        
        this.physics.add.existing(this.ball);
        this.ball.body.setCircle(12);
        this.ball.body.setCollideWorldBounds(false);
        this.ball.body.setBounce(0.3);
        this.ball.body.setDamping(true);
        this.ball.body.setDrag(0.95);
        this.ball.body.setMaxVelocity(300, 300);
        
        // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥ (–≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É)
        this.exit = this.add.circle(
            startX + (mazeSize - 1) * cellSize + cellSize / 2,
            startY + (mazeSize - 1) * cellSize + cellSize / 2,
            15,
            0x00ff00
        ).setDepth(6);
        
        this.physics.add.existing(this.exit, true);
        
        // –ö–æ–ª–ª–∏–∑–∏–∏ —Å —Å—Ç–µ–Ω–∞–º–∏
        this.physics.add.collider(this.ball, this.mazeWalls);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
        this.physics.add.overlap(this.ball, this.exit, () => {
            if (this.isGameActive) {
                this.onSuccess();
            }
        });
        
        console.log('üß© [MazeLockScene] –õ–∞–±–∏—Ä–∏–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é Recursive Backtracker');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    setupKeyboard() {
        const cursors = this.input.keyboard.createCursorKeys();
        
        this.input.keyboard.on('keydown-UP', () => this.moveBall('up'));
        this.input.keyboard.on('keydown-DOWN', () => this.moveBall('down'));
        this.input.keyboard.on('keydown-LEFT', () => this.moveBall('left'));
        this.input.keyboard.on('keydown-RIGHT', () => this.moveBall('right'));
        
        // WASD
        this.input.keyboard.on('keydown-W', () => this.moveBall('up'));
        this.input.keyboard.on('keydown-S', () => this.moveBall('down'));
        this.input.keyboard.on('keydown-A', () => this.moveBall('left'));
        this.input.keyboard.on('keydown-D', () => this.moveBall('right'));
        
        // –ú–û–ë–ò–õ–¨–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.setupTapToMove();
        this.setupSwipeControls();
        this.setupGyroscope();
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–∞–π–ø-—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
     */
    setupSwipeControls() {
        const { width, height } = this.scale;
        
        // –°–æ–∑–¥–∞—ë–º –Ω–µ–≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Å–≤–∞–π–ø–æ–≤ (—Ç–æ—á–Ω–æ –ø–æ —Ä–∞–∑–º–µ—Ä—É –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ + –æ—Ç—Å—Ç—É–ø—ã)
        const areaPadding = 50;
        const areaX = this.mazeStartX + this.mazeWidth / 2;
        const areaY = this.mazeStartY + this.mazeHeight / 2;
        const areaWidth = this.mazeWidth + areaPadding * 2;
        const areaHeight = this.mazeHeight + areaPadding * 2;
        
        const swipeArea = this.add.rectangle(areaX, areaY, areaWidth, areaHeight, 0x000000, 0.01);
        swipeArea.setInteractive();
        swipeArea.setDepth(1); // –ù–∏–∂–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        
        let swipeStartX = 0;
        let swipeStartY = 0;
        let swipeTime = 0;
        
        swipeArea.on('pointerdown', (pointer) => {
            swipeStartX = pointer.x;
            swipeStartY = pointer.y;
            swipeTime = this.time.now;
        });
        
        swipeArea.on('pointerup', (pointer) => {
            const swipeEndX = pointer.x;
            const swipeEndY = pointer.y;
            const swipeDuration = this.time.now - swipeTime;
            
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è —Å–≤–∞–π–ø–∞
            const minDistance = 30;
            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤–∞–π–ø–∞ (–º—Å)
            const maxDuration = 300;
            
            if (swipeDuration > maxDuration) return;
            
            const deltaX = swipeEndX - swipeStartX;
            const deltaY = swipeEndY - swipeStartY;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–∞–π–ø–∞
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
                // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
                if (Math.abs(deltaX) > minDistance) {
                    if (deltaX > 0) {
                        this.moveBall('right');
                    } else {
                        this.moveBall('left');
                    }
                }
            } else {
                // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
                if (Math.abs(deltaY) > minDistance) {
                    if (deltaY > 0) {
                        this.moveBall('down');
                    } else {
                        this.moveBall('up');
                    }
                }
            }
        });
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö (–æ–±–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ)
        this.controlHintText = this.add.text(width / 2, 180, '–ó–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...', {
            fontSize: '14px',
            fontFamily: 'Arial',
            color: '#aaaaaa',
            align: 'center'
        }).setOrigin(0.5).setDepth(10);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tap-to-Move —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    setupTapToMove() {
        const { width, height } = this.scale;
        
        // –°–æ–∑–¥–∞—ë–º –Ω–µ–≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ç–∞–ø–æ–≤ (—Ç–æ—á–Ω–æ –ø–æ —Ä–∞–∑–º–µ—Ä—É –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ + –æ—Ç—Å—Ç—É–ø—ã)
        const areaPadding = 50;
        const areaX = this.mazeStartX + this.mazeWidth / 2;
        const areaY = this.mazeStartY + this.mazeHeight / 2;
        const areaWidth = this.mazeWidth + areaPadding * 2;
        const areaHeight = this.mazeHeight + areaPadding * 2;
        
        const tapArea = this.add.rectangle(areaX, areaY, areaWidth, areaHeight, 0x00ff00, 0.05);
        tapArea.setInteractive();
        tapArea.setDepth(2); // –í—ã—à–µ —Å–≤–∞–π–ø-–∑–æ–Ω—ã, –Ω–æ –Ω–∏–∂–µ –∫–Ω–æ–ø–æ–∫
        
        console.log('üéØ [MazeLockScene] Tap –æ–±–ª–∞—Å—Ç—å:', { 
            areaX, areaY, areaWidth, areaHeight,
            mazeStartX: this.mazeStartX, 
            mazeStartY: this.mazeStartY,
            mazeWidth: this.mazeWidth,
            mazeHeight: this.mazeHeight
        });
        
        tapArea.on('pointerdown', (pointer) => {
            if (!this.isGameActive || !this.ball) return;
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —à–∞—Ä–∏–∫–∞
            const ballX = this.ball.x;
            const ballY = this.ball.y;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç —à–∞—Ä–∏–∫–∞ –∫ —Ç–æ—á–∫–µ —Ç–∞–ø–∞
            const deltaX = pointer.x - ballX;
            const deltaY = pointer.y - ballY;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
                // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                if (deltaX > 0) {
                    this.moveBall('right');
                } else {
                    this.moveBall('left');
                }
            } else {
                // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                if (deltaY > 0) {
                    this.moveBall('down');
                } else {
                    this.moveBall('up');
                }
            }
        });
        
        console.log('üéØ [MazeLockScene] Tap-to-Move —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≥–∏—Ä–æ—Å–∫–æ–ø
     */
    setupGyroscope() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp API
        if (typeof window.Telegram === 'undefined' || !window.Telegram.WebApp) {
            console.log('‚ö†Ô∏è [MazeLockScene] Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            this.updateControlHint('tap');
            return;
        }
        
        const WebApp = window.Telegram.WebApp;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Accelerometer (–¥–æ—Å—Ç—É–ø–µ–Ω —Å –≤–µ—Ä—Å–∏–∏ 11.4)
        if (!WebApp.Accelerometer) {
            console.log('‚ö†Ô∏è [MazeLockScene] –ì–∏—Ä–æ—Å–∫–æ–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Telegram');
            this.updateControlHint('tap');
            return;
        }
        
        // –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        this.gyroscopeEnabled = false;
        this.gyroscopeData = { x: 0, y: 0, z: 0 };
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä—É
        try {
            WebApp.Accelerometer.start({ refresh_rate: 60 }, (data) => {
                if (this.gyroscopeEnabled && this.isGameActive && this.ball && this.ball.body) {
                    // –î–∞–Ω–Ω—ã–µ: x, y, z (—É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ –æ—Å—è–º)
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–ª—É –∫ —à–∞—Ä–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–ª–æ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    
                    const sensitivity = 50; // –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    
                    // x - –Ω–∞–∫–ª–æ–Ω –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ
                    // y - –Ω–∞–∫–ª–æ–Ω –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥
                    const forceX = data.x * sensitivity;
                    const forceY = data.y * sensitivity;
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∫ —à–∞—Ä–∏–∫—É
                    this.ball.body.setVelocityX(this.ball.body.velocity.x + forceX);
                    this.ball.body.setVelocityY(this.ball.body.velocity.y + forceY);
                    
                    this.gyroscopeData = data;
                }
            });
            
            console.log('üì± [MazeLockScene] –ì–∏—Ä–æ—Å–∫–æ–ø –¥–æ—Å—Ç—É–ø–µ–Ω');
            
            // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            this.createControlSwitcher();
            
            this.updateControlHint('tap+gyro');
            
        } catch (error) {
            console.warn('‚ö†Ô∏è [MazeLockScene] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–∏—Ä–æ—Å–∫–æ–ø:', error);
            this.updateControlHint('tap');
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    createControlSwitcher() {
        const { width, height } = this.scale;
        
        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è, —Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É)
        this.gyroToggleButton = this.createButton(width - 80, 220, 140, 45, 'üì± –ì–∏—Ä–æ—Å–∫–æ–ø: OFF', {
            fontSize: '13px',
            backgroundColor: 0x555555,
            borderColor: 0x777777,
            hoverColor: 0x666666
        });
        
        this.gyroToggleButton.container.on('pointerdown', () => {
            this.gyroscopeEnabled = !this.gyroscopeEnabled;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if (this.gyroToggleButton.label && this.gyroToggleButton.label.scene) {
                this.gyroToggleButton.label.setText(
                    this.gyroscopeEnabled ? 'üì± –ì–∏—Ä–æ—Å–∫–æ–ø: ON' : 'üì± –ì–∏—Ä–æ—Å–∫–æ–ø: OFF'
                );
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
            const newColor = this.gyroscopeEnabled ? 0x4CAF50 : 0x555555;
            this.updateButtonColor(this.gyroToggleButton, newColor);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            this.updateControlHint(this.gyroscopeEnabled ? 'gyro' : 'tap');
            
            console.log(`üì± [MazeLockScene] –ì–∏—Ä–æ—Å–∫–æ–ø: ${this.gyroscopeEnabled ? 'ON' : 'OFF'}`);
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–∫–∏
     */
    updateButtonColor(button, color) {
        if (!button || !button.bg || !button.x) return;
        
        const { x, y, width, height } = button;
        button.bg.clear();
        button.bg.fillStyle(color, 1);
        button.bg.fillRoundedRect(x - width/2, y - height/2, width, height, 8);
        button.bg.lineStyle(2, 0x777777, 1);
        button.bg.strokeRoundedRect(x - width/2, y - height/2, width, height, 8);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    updateControlHint(mode) {
        if (!this.controlHintText || !this.controlHintText.scene) return;
        
        const hints = {
            'tap': '–¢–∞–ø–∞–π—Ç–µ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è',
            'gyro': 'üì± –ù–∞–∫–ª–æ–Ω—è–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            'tap+gyro': '–¢–∞–ø –∏–ª–∏ –≥–∏—Ä–æ—Å–∫–æ–ø (–∫–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∞ –≤–Ω–∏–∑—É)'
        };
        
        this.controlHintText.setText(hints[mode] || hints['tap']);
    }
    
    /**
     * –î–≤–∏–∂–µ–Ω–∏–µ —à–∞—Ä–∏–∫–∞
     */
    moveBall(direction) {
        if (!this.isGameActive || !this.ball || !this.ball.body) return;
        
        const speed = this.config.ballSpeed || 200;
        
        switch (direction) {
            case 'up':
                this.ball.body.setVelocityY(-speed);
                break;
            case 'down':
                this.ball.body.setVelocityY(speed);
                break;
            case 'left':
                this.ball.body.setVelocityX(-speed);
                break;
            case 'right':
                this.ball.body.setVelocityX(speed);
                break;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
     */
    update(time, delta) {
        // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ —à–∞—Ä–∏–∫–∞
        if (this.ball && this.ball.body) {
            this.ball.body.velocity.x *= 0.95;
            this.ball.body.velocity.y *= 0.95;
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞
     */
    shutdown() {
        super.shutdown();
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–∏—Ä–æ—Å–∫–æ–ø
        if (typeof window.Telegram !== 'undefined' && 
            window.Telegram.WebApp && 
            window.Telegram.WebApp.Accelerometer) {
            try {
                window.Telegram.WebApp.Accelerometer.stop();
                console.log('üì± [MazeLockScene] –ì–∏—Ä–æ—Å–∫–æ–ø –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            } catch (error) {
                console.warn('‚ö†Ô∏è [MazeLockScene] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–∏—Ä–æ—Å–∫–æ–ø–∞:', error);
            }
        }
        
        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
        if (this.input && this.input.keyboard) {
            this.input.keyboard.off('keydown-UP');
            this.input.keyboard.off('keydown-DOWN');
            this.input.keyboard.off('keydown-LEFT');
            this.input.keyboard.off('keydown-RIGHT');
            this.input.keyboard.off('keydown-W');
            this.input.keyboard.off('keydown-S');
            this.input.keyboard.off('keydown-A');
            this.input.keyboard.off('keydown-D');
        }
    }
}

