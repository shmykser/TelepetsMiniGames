/**
 * –°—Ü–µ–Ω–∞ –≤–∑–ª–æ–º–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç-–∑–∞–º–∫–∞
 * –ú–∏–Ω–∏-–∏–≥—Ä–∞: –ø—Ä–æ–≤–µ—Å—Ç–∏ —à–∞—Ä–∏–∫ —á–µ—Ä–µ–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç –∫ –≤—ã—Ö–æ–¥—É
 */

import { BaseLockScene } from './BaseLockScene.js';
import { MazeGenerator } from '../../utils/MazeGenerator.js';
// HTMLButton —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ Phaser –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

export class MazeLockScene extends BaseLockScene {
    constructor() {
        super('MazeLockScene');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
        this.ball = null;
        this.exit = null;
        this.mazeWalls = null;
        
        // –ù–û–í–´–ï –ú–ï–•–ê–ù–ò–ö–ò
        this.keys = []; // –ö–ª—é—á–∏ –¥–ª—è —Å–±–æ—Ä–∞
        this.collectedKeys = 0;
        this.requiredKeys = 0;
        this.enemies = []; // –ü–∞—Ç—Ä—É–ª–∏—Ä—É—é—â–∏–µ –≤—Ä–∞–≥–∏
        this.portals = []; // –ü–∞—Ä–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã
        this.portalTimers = [];
        this.portalCooldown = false; // –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
        this.fogRectangle = null; // –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ç—É–º–∞–Ω–∞
        this.fogMask = null; // –ú–∞—Å–∫–∞ –¥–ª—è —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã
        this.mazeGrid = null; // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Ç–∫–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ (–¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π)
        this.mazeStartX = 0;
        this.mazeStartY = 0;
        this.mazeWidth = 0;
        this.mazeHeight = 0;
        this.cellSize = 0;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
     */
    create() {
        super.create();
        
        // –í–ê–ñ–ù–û: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        this.ball = null;
        this.exit = null;
        this.mazeWalls = null;
        this.keys = [];
        this.collectedKeys = 0;
        this.requiredKeys = this.config.keys || 0;
        this.enemies = [];
        this.portals = [];
        this.portalTimers = [];
        this.portalCooldown = false;
        this.fogRectangle = null;
        this.fogMask = null;
        this.mazeGrid = null;
        this.mazeStartX = 0;
        this.mazeStartY = 0;
        this.mazeWidth = 0;
        this.mazeHeight = 0;
        this.cellSize = 0;
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π UI
        this.createBaseUI('üß© –í–ó–õ–û–ú –õ–ê–ë–ò–†–ò–ù–¢-–ó–ê–ú–ö–ê');
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–æ–¥ –º–µ—Ö–∞–Ω–∏–∫–∏)
        const { width } = this.scale;
        let instructionText = '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —à–∞—Ä–∏–∫ –∫ –∑–µ–ª–µ–Ω–æ–º—É –≤—ã—Ö–æ–¥—É!';
        
        if (this.requiredKeys > 0) {
            instructionText = `–°–æ–±–µ—Ä–∏—Ç–µ ${this.requiredKeys} –∫–ª—é—á–∞(–µ–π), –∑–∞—Ç–µ–º –∫ –≤—ã—Ö–æ–¥—É!`;
        }
        
        this.add.text(width / 2, 160, instructionText, {
            fontSize: '15px',
            fontFamily: 'Arial',
            color: '#ffffff',
            stroke: '#000000',
            strokeThickness: 2,
            align: 'center'
        }).setOrigin(0.5).setDepth(10);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∫–∞—Ö
        const hints = [];
        if (this.config.enemies > 0) {
            hints.push(`üî¥ –í—Ä–∞–≥–∏: ${this.config.enemies}`);
        }
        if (this.config.portals > 0) {
            hints.push(`üåÄ –ü–æ—Ä—Ç–∞–ª—ã: ${this.config.portals}`);
        }
        if (this.config.fogOfWar) {
            hints.push('üå´Ô∏è –¢—É–º–∞–Ω –≤–æ–π–Ω—ã');
        }
        
        if (hints.length > 0) {
            this.add.text(width / 2, 180, hints.join(' | '), {
                fontSize: '11px',
                fontFamily: 'Arial',
                color: '#ffaa00',
                stroke: '#000000',
                strokeThickness: 1,
                align: 'center'
            }).setOrigin(0.5).setDepth(10);
        }
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã –∫–ª—é—á–∏)
        if (this.requiredKeys > 0) {
            this.keysText = this.add.text(width / 2, 205, `üîë –ö–ª—é—á–∏: 0/${this.requiredKeys}`, {
                fontSize: '14px',
                fontFamily: 'Arial',
                color: '#ffff00',
                stroke: '#000000',
                strokeThickness: 2,
                align: 'center'
            }).setOrigin(0.5).setDepth(100);
        }
        
        // –°–æ–∑–¥–∞–µ–º –ª–∞–±–∏—Ä–∏–Ω—Ç
        this.createMaze();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à (–¥–ª—è –ü–ö)
        this.setupKeyboard();
        
        // –ò–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
        this.isGameActive = true;
        
        console.log('üß© [MazeLockScene] –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ Recursive Backtracker
     */
    createMaze() {
        const { width, height } = this.scale;
        const mazeSize = this.config.mazeSize || 5;
        const cellSize = 40;
        const mazeWidth = mazeSize * cellSize;
        const mazeHeight = mazeSize * cellSize;
        const startX = (width - mazeWidth) / 2;
        const startY = (height - mazeHeight) / 2 + 20;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –¥–ª—è Tap-to-Move
        this.mazeStartX = startX;
        this.mazeStartY = startY;
        this.mazeWidth = mazeWidth;
        this.mazeHeight = mazeHeight;
        this.cellSize = cellSize;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–∏–¥–µ–∞–ª—å–Ω—ã–π" –ª–∞–±–∏—Ä–∏–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ Recursive Backtracker
        const mazeGrid = MazeGenerator.generate(mazeSize, mazeSize);
        this.mazeGrid = mazeGrid; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
        
        // –í—ã–≤–æ–¥–∏–º ASCII –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üß© [MazeLockScene] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ª–∞–±–∏—Ä–∏–Ω—Ç:\n' + MazeGenerator.visualize(mazeGrid));
        
        // –ì—Ä—É–ø–ø–∞ –¥–ª—è —Å—Ç–µ–Ω
        this.mazeWalls = this.physics.add.staticGroup();
        
        // –¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω
        const wallThickness = 6;
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏
        for (let y = 0; y < mazeSize; y++) {
            for (let x = 0; x < mazeSize; x++) {
                const cell = mazeGrid[y][x];
                const cellX = startX + x * cellSize;
                const cellY = startY + y * cellSize;
                
                // –í–µ—Ä—Ö–Ω—è—è —Å—Ç–µ–Ω–∞
                if (cell.walls.top) {
                    const wall = this.add.rectangle(
                        cellX + cellSize / 2,
                        cellY,
                        cellSize,
                        wallThickness,
                        0x444444
                    ).setDepth(5);
                    this.physics.add.existing(wall, true);
                    this.mazeWalls.add(wall);
                }
                
                // –ü—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞
                if (cell.walls.right) {
                    const wall = this.add.rectangle(
                        cellX + cellSize,
                        cellY + cellSize / 2,
                        wallThickness,
                        cellSize,
                        0x444444
                    ).setDepth(5);
                    this.physics.add.existing(wall, true);
                    this.mazeWalls.add(wall);
                }
                
                // –ù–∏–∂–Ω—è—è —Å—Ç–µ–Ω–∞
                if (cell.walls.bottom) {
                    const wall = this.add.rectangle(
                        cellX + cellSize / 2,
                        cellY + cellSize,
                        cellSize,
                        wallThickness,
                        0x444444
                    ).setDepth(5);
                    this.physics.add.existing(wall, true);
                    this.mazeWalls.add(wall);
                }
                
                // –õ–µ–≤–∞—è —Å—Ç–µ–Ω–∞
                if (cell.walls.left) {
                    const wall = this.add.rectangle(
                        cellX,
                        cellY + cellSize / 2,
                        wallThickness,
                        cellSize,
                        0x444444
                    ).setDepth(5);
                    this.physics.add.existing(wall, true);
                    this.mazeWalls.add(wall);
                }
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º —à–∞—Ä–∏–∫ (—Å—Ç–∞—Ä—Ç –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É)
        this.ball = this.add.circle(
            startX + cellSize / 2,
            startY + cellSize / 2,
            12,
            0xff0000
        ).setDepth(6);
        
        this.physics.add.existing(this.ball);
        this.ball.body.setCircle(12);
        this.ball.body.setCollideWorldBounds(false);
        this.ball.body.setBounce(0.3);
        this.ball.body.setDamping(true);
        this.ball.body.setDrag(0.95);
        this.ball.body.setMaxVelocity(300, 300);
        
        // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥ (–≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É)
        this.exit = this.add.circle(
            startX + (mazeSize - 1) * cellSize + cellSize / 2,
            startY + (mazeSize - 1) * cellSize + cellSize / 2,
            15,
            0x00ff00
        ).setDepth(6);
        
        this.physics.add.existing(this.exit, true);
        
        // –ö–æ–ª–ª–∏–∑–∏–∏ —Å —Å—Ç–µ–Ω–∞–º–∏
        this.physics.add.collider(this.ball, this.mazeWalls);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
        this.physics.add.overlap(this.ball, this.exit, () => {
            if (this.isGameActive) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –∫–ª—é—á–∏
                if (this.collectedKeys >= this.requiredKeys) {
                    this.onSuccess();
                } else {
                    console.log(`üîë [MazeLockScene] –ù—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –µ—â–µ ${this.requiredKeys - this.collectedKeys} –∫–ª—é—á(–µ–π)`);
                }
            }
        });
        
        // –ù–û–í–´–ï –ú–ï–•–ê–ù–ò–ö–ò: –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.createKeys(mazeGrid, startX, startY, mazeSize, cellSize);
        this.createEnemies(mazeGrid, startX, startY, mazeSize, cellSize);
        this.createPortals(mazeGrid, startX, startY, mazeSize, cellSize);
        this.createFogOfWar(startX, startY, mazeSize, cellSize);
        
        console.log('üß© [MazeLockScene] –õ–∞–±–∏—Ä–∏–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é Recursive Backtracker');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    setupKeyboard() {
        const cursors = this.input.keyboard.createCursorKeys();
        
        this.input.keyboard.on('keydown-UP', () => this.moveBall('up'));
        this.input.keyboard.on('keydown-DOWN', () => this.moveBall('down'));
        this.input.keyboard.on('keydown-LEFT', () => this.moveBall('left'));
        this.input.keyboard.on('keydown-RIGHT', () => this.moveBall('right'));
        
        // WASD
        this.input.keyboard.on('keydown-W', () => this.moveBall('up'));
        this.input.keyboard.on('keydown-S', () => this.moveBall('down'));
        this.input.keyboard.on('keydown-A', () => this.moveBall('left'));
        this.input.keyboard.on('keydown-D', () => this.moveBall('right'));
        
        // –ú–û–ë–ò–õ–¨–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.setupTapToMove();
        this.setupSwipeControls();
        this.setupGyroscope();
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–∞–π–ø-—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
     */
    setupSwipeControls() {
        const { width, height } = this.scale;
        
        // –°–æ–∑–¥–∞—ë–º –Ω–µ–≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Å–≤–∞–π–ø–æ–≤ (—Ç–æ—á–Ω–æ –ø–æ —Ä–∞–∑–º–µ—Ä—É –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ + –æ—Ç—Å—Ç—É–ø—ã)
        const areaPadding = 50;
        const areaX = this.mazeStartX + this.mazeWidth / 2;
        const areaY = this.mazeStartY + this.mazeHeight / 2;
        const areaWidth = this.mazeWidth + areaPadding * 2;
        const areaHeight = this.mazeHeight + areaPadding * 2;
        
        const swipeArea = this.add.rectangle(areaX, areaY, areaWidth, areaHeight, 0x000000, 0.01);
        swipeArea.setInteractive();
        swipeArea.setDepth(1); // –ù–∏–∂–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        
        let swipeStartX = 0;
        let swipeStartY = 0;
        let swipeTime = 0;
        
        swipeArea.on('pointerdown', (pointer) => {
            swipeStartX = pointer.x;
            swipeStartY = pointer.y;
            swipeTime = this.time.now;
        });
        
        swipeArea.on('pointerup', (pointer) => {
            const swipeEndX = pointer.x;
            const swipeEndY = pointer.y;
            const swipeDuration = this.time.now - swipeTime;
            
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è —Å–≤–∞–π–ø–∞
            const minDistance = 30;
            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤–∞–π–ø–∞ (–º—Å)
            const maxDuration = 300;
            
            if (swipeDuration > maxDuration) return;
            
            const deltaX = swipeEndX - swipeStartX;
            const deltaY = swipeEndY - swipeStartY;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–∞–π–ø–∞
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
                // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
                if (Math.abs(deltaX) > minDistance) {
                    if (deltaX > 0) {
                        this.moveBall('right');
                    } else {
                        this.moveBall('left');
                    }
                }
            } else {
                // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
                if (Math.abs(deltaY) > minDistance) {
                    if (deltaY > 0) {
                        this.moveBall('down');
                    } else {
                        this.moveBall('up');
                    }
                }
            }
        });
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö (–æ–±–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ)
        this.controlHintText = this.add.text(width / 2, 180, '–ó–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...', {
            fontSize: '14px',
            fontFamily: 'Arial',
            color: '#aaaaaa',
            align: 'center'
        }).setOrigin(0.5).setDepth(10);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tap-to-Move —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    setupTapToMove() {
        const { width, height } = this.scale;
        
        // –°–æ–∑–¥–∞—ë–º –Ω–µ–≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ç–∞–ø–æ–≤ (—Ç–æ—á–Ω–æ –ø–æ —Ä–∞–∑–º–µ—Ä—É –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ + –æ—Ç—Å—Ç—É–ø—ã)
        const areaPadding = 50;
        const areaX = this.mazeStartX + this.mazeWidth / 2;
        const areaY = this.mazeStartY + this.mazeHeight / 2;
        const areaWidth = this.mazeWidth + areaPadding * 2;
        const areaHeight = this.mazeHeight + areaPadding * 2;
        
        const tapArea = this.add.rectangle(areaX, areaY, areaWidth, areaHeight, 0x00ff00, 0.05);
        tapArea.setInteractive();
        tapArea.setDepth(2); // –í—ã—à–µ —Å–≤–∞–π–ø-–∑–æ–Ω—ã, –Ω–æ –Ω–∏–∂–µ –∫–Ω–æ–ø–æ–∫
        
        console.log('üéØ [MazeLockScene] Tap –æ–±–ª–∞—Å—Ç—å:', { 
            areaX, areaY, areaWidth, areaHeight,
            mazeStartX: this.mazeStartX, 
            mazeStartY: this.mazeStartY,
            mazeWidth: this.mazeWidth,
            mazeHeight: this.mazeHeight
        });
        
        tapArea.on('pointerdown', (pointer) => {
            if (!this.isGameActive || !this.ball) return;
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —à–∞—Ä–∏–∫–∞
            const ballX = this.ball.x;
            const ballY = this.ball.y;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç —à–∞—Ä–∏–∫–∞ –∫ —Ç–æ—á–∫–µ —Ç–∞–ø–∞
            const deltaX = pointer.x - ballX;
            const deltaY = pointer.y - ballY;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
                // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                if (deltaX > 0) {
                    this.moveBall('right');
                } else {
                    this.moveBall('left');
                }
            } else {
                // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                if (deltaY > 0) {
                    this.moveBall('down');
                } else {
                    this.moveBall('up');
                }
            }
        });
        
        console.log('üéØ [MazeLockScene] Tap-to-Move —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≥–∏—Ä–æ—Å–∫–æ–ø
     */
    setupGyroscope() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp API
        if (typeof window.Telegram === 'undefined' || !window.Telegram.WebApp) {
            console.log('‚ö†Ô∏è [MazeLockScene] Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            this.updateControlHint('tap');
            return;
        }
        
        const WebApp = window.Telegram.WebApp;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Accelerometer (–¥–æ—Å—Ç—É–ø–µ–Ω —Å –≤–µ—Ä—Å–∏–∏ 11.4)
        if (!WebApp.Accelerometer) {
            console.log('‚ö†Ô∏è [MazeLockScene] –ì–∏—Ä–æ—Å–∫–æ–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Telegram');
            this.updateControlHint('tap');
            return;
        }
        
        // –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        this.gyroscopeEnabled = false;
        this.gyroscopeData = { x: 0, y: 0, z: 0 };
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä—É
        try {
            WebApp.Accelerometer.start({ refresh_rate: 60 }, (data) => {
                if (this.gyroscopeEnabled && this.isGameActive && this.ball && this.ball.body) {
                    // –î–∞–Ω–Ω—ã–µ: x, y, z (—É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ –æ—Å—è–º)
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–ª—É –∫ —à–∞—Ä–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–ª–æ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    
                    const sensitivity = 50; // –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    
                    // x - –Ω–∞–∫–ª–æ–Ω –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ
                    // y - –Ω–∞–∫–ª–æ–Ω –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥
                    const forceX = data.x * sensitivity;
                    const forceY = data.y * sensitivity;
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∫ —à–∞—Ä–∏–∫—É
                    this.ball.body.setVelocityX(this.ball.body.velocity.x + forceX);
                    this.ball.body.setVelocityY(this.ball.body.velocity.y + forceY);
                    
                    this.gyroscopeData = data;
                }
            });
            
            console.log('üì± [MazeLockScene] –ì–∏—Ä–æ—Å–∫–æ–ø –¥–æ—Å—Ç—É–ø–µ–Ω');
            
            // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            this.createControlSwitcher();
            
            this.updateControlHint('tap+gyro');
            
        } catch (error) {
            console.warn('‚ö†Ô∏è [MazeLockScene] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–∏—Ä–æ—Å–∫–æ–ø:', error);
            this.updateControlHint('tap');
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    createControlSwitcher() {
        const { width, height } = this.scale;
        
        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è, —Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É)
        this.gyroToggleButton = this.createButton(width - 80, 220, 140, 45, 'üì± –ì–∏—Ä–æ—Å–∫–æ–ø: OFF', {
            fontSize: '13px',
            backgroundColor: 0x555555,
            borderColor: 0x777777,
            hoverColor: 0x666666
        });
        
        this.gyroToggleButton.container.on('pointerdown', () => {
            this.gyroscopeEnabled = !this.gyroscopeEnabled;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if (this.gyroToggleButton.label && this.gyroToggleButton.label.scene) {
                this.gyroToggleButton.label.setText(
                    this.gyroscopeEnabled ? 'üì± –ì–∏—Ä–æ—Å–∫–æ–ø: ON' : 'üì± –ì–∏—Ä–æ—Å–∫–æ–ø: OFF'
                );
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
            const newColor = this.gyroscopeEnabled ? 0x4CAF50 : 0x555555;
            this.updateButtonColor(this.gyroToggleButton, newColor);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            this.updateControlHint(this.gyroscopeEnabled ? 'gyro' : 'tap');
            
            console.log(`üì± [MazeLockScene] –ì–∏—Ä–æ—Å–∫–æ–ø: ${this.gyroscopeEnabled ? 'ON' : 'OFF'}`);
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–∫–∏
     */
    updateButtonColor(button, color) {
        if (!button || !button.bg || !button.x) return;
        
        const { x, y, width, height } = button;
        button.bg.clear();
        button.bg.fillStyle(color, 1);
        button.bg.fillRoundedRect(x - width/2, y - height/2, width, height, 8);
        button.bg.lineStyle(2, 0x777777, 1);
        button.bg.strokeRoundedRect(x - width/2, y - height/2, width, height, 8);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    updateControlHint(mode) {
        if (!this.controlHintText || !this.controlHintText.scene) return;
        
        const hints = {
            'tap': '–¢–∞–ø–∞–π—Ç–µ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è',
            'gyro': 'üì± –ù–∞–∫–ª–æ–Ω—è–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            'tap+gyro': '–¢–∞–ø –∏–ª–∏ –≥–∏—Ä–æ—Å–∫–æ–ø (–∫–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∞ –≤–Ω–∏–∑—É)'
        };
        
        this.controlHintText.setText(hints[mode] || hints['tap']);
    }
    
    /**
     * –î–≤–∏–∂–µ–Ω–∏–µ —à–∞—Ä–∏–∫–∞
     */
    moveBall(direction) {
        if (!this.isGameActive || !this.ball || !this.ball.body) return;
        
        const speed = this.config.ballSpeed || 200;
        
        switch (direction) {
            case 'up':
                this.ball.body.setVelocityY(-speed);
                break;
            case 'down':
                this.ball.body.setVelocityY(speed);
                break;
            case 'left':
                this.ball.body.setVelocityX(-speed);
                break;
            case 'right':
                this.ball.body.setVelocityX(speed);
                break;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
     */
    update(time, delta) {
        // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ —à–∞—Ä–∏–∫–∞
        if (this.ball && this.ball.body) {
            this.ball.body.velocity.x *= 0.95;
            this.ball.body.velocity.y *= 0.95;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É–º–∞–Ω –≤–æ–π–Ω—ã –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
        this.updateFogOfWar();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —à–∞—Ä–∏–∫–∞ —Å –ø–æ—Ä—Ç–∞–ª–∞–º–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ wasOverlapping
        if (this.ball && this.portals) {
            this.portals.forEach(portalData => {
                if (portalData.circle && portalData.circle.wasOverlapping) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ —à–∞—Ä–∏–∫ —Å –ø–æ—Ä—Ç–∞–ª–æ–º
                    const overlapping = this.physics.overlap(this.ball, portalData.circle);
                    
                    // –ï—Å–ª–∏ –ù–ï –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                    if (!overlapping) {
                        portalData.circle.wasOverlapping = false;
                    }
                }
            });
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞
     */
    shutdown() {
        super.shutdown();
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–∏—Ä–æ—Å–∫–æ–ø
        if (typeof window.Telegram !== 'undefined' && 
            window.Telegram.WebApp && 
            window.Telegram.WebApp.Accelerometer) {
            try {
                window.Telegram.WebApp.Accelerometer.stop();
                console.log('üì± [MazeLockScene] –ì–∏—Ä–æ—Å–∫–æ–ø –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            } catch (error) {
                console.warn('‚ö†Ô∏è [MazeLockScene] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–∏—Ä–æ—Å–∫–æ–ø–∞:', error);
            }
        }
        
        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
        if (this.input && this.input.keyboard) {
            this.input.keyboard.off('keydown-UP');
            this.input.keyboard.off('keydown-DOWN');
            this.input.keyboard.off('keydown-LEFT');
            this.input.keyboard.off('keydown-RIGHT');
            this.input.keyboard.off('keydown-W');
            this.input.keyboard.off('keydown-S');
            this.input.keyboard.off('keydown-A');
            this.input.keyboard.off('keydown-D');
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –ø–æ—Ä—Ç–∞–ª–æ–≤
        this.portalTimers.forEach(timer => {
            if (timer) timer.remove();
        });
        
        // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.ball = null;
        this.exit = null;
        this.mazeWalls = null;
        this.keys = [];
        this.collectedKeys = 0;
        this.requiredKeys = 0;
        this.enemies = [];
        this.portals = [];
        this.portalTimers = [];
        this.portalCooldown = false;
        this.fogRectangle = null;
        this.fogMask = null;
        this.mazeGrid = null;
        this.mazeStartX = 0;
        this.mazeStartY = 0;
        this.mazeWidth = 0;
        this.mazeHeight = 0;
        this.cellSize = 0;
        
        console.log('üß© [MazeLockScene] –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
    }
    
    /**
     * –ú–ï–•–ê–ù–ò–ö–ê 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π –¥–ª—è —Å–±–æ—Ä–∞
     */
    createKeys(mazeGrid, startX, startY, mazeSize, cellSize) {
        const keyCount = this.config.keys || 0;
        if (keyCount === 0) return;
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ (–Ω–µ —Å—Ç–∞—Ä—Ç, –Ω–µ –≤—ã—Ö–æ–¥)
        const freeCells = [];
        for (let y = 0; y < mazeSize; y++) {
            for (let x = 0; x < mazeSize; x++) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç (0,0) –∏ –≤—ã—Ö–æ–¥ (mazeSize-1, mazeSize-1)
                if ((x === 0 && y === 0) || (x === mazeSize - 1 && y === mazeSize - 1)) continue;
                freeCells.push({ x, y });
            }
        }
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ keyCount –∫–ª–µ—Ç–æ–∫
        Phaser.Utils.Array.Shuffle(freeCells);
        
        for (let i = 0; i < Math.min(keyCount, freeCells.length); i++) {
            const cell = freeCells[i];
            const keyX = startX + cell.x * cellSize + cellSize / 2;
            const keyY = startY + cell.y * cellSize + cellSize / 2;
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á (–∂–µ–ª—Ç–∞—è –∑–≤–µ–∑–¥–∞)
            const key = this.add.star(keyX, keyY, 6, 8, 16, 0xffff00).setDepth(7);
            this.physics.add.existing(key, true);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
            this.tweens.add({
                targets: key,
                angle: 360,
                duration: 2000,
                repeat: -1,
                ease: 'Linear'
            });
            
            this.keys.push(key);
            
            // –ö–æ–ª–ª–∏–∑–∏—è —Å —à–∞—Ä–∏–∫–æ–º
            this.physics.add.overlap(this.ball, key, () => {
                if (this.isGameActive) {
                    key.destroy();
                    this.collectedKeys++;
                    
                    if (this.keysText) {
                        this.keysText.setText(`üîë –ö–ª—é—á–∏: ${this.collectedKeys}/${this.requiredKeys}`);
                    }
                    
                    console.log(`üîë [MazeLockScene] –°–æ–±—Ä–∞–Ω –∫–ª—é—á ${this.collectedKeys}/${this.requiredKeys}`);
                }
            });
        }
        
        console.log(`üîë [MazeLockScene] –°–æ–∑–¥–∞–Ω–æ ${this.keys.length} –∫–ª—é—á–µ–π`);
    }
    
    /**
     * –ú–ï–•–ê–ù–ò–ö–ê 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç—Ä—É–ª–∏—Ä—É—é—â–∏—Ö –≤—Ä–∞–≥–æ–≤
     */
    createEnemies(mazeGrid, startX, startY, mazeSize, cellSize) {
        const enemyCount = this.config.enemies || 0;
        if (enemyCount === 0) return;
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –¥–ª—è –≤—Ä–∞–≥–æ–≤
        const freeCells = [];
        for (let y = 0; y < mazeSize; y++) {
            for (let x = 0; x < mazeSize; x++) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç –∏ –≤—ã—Ö–æ–¥
                if ((x === 0 && y === 0) || (x === mazeSize - 1 && y === mazeSize - 1)) continue;
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–µ—Ç–∫–∏ —Ä—è–¥–æ–º —Å–æ —Å—Ç–∞—Ä—Ç–æ–º
                if (x <= 1 && y <= 1) continue;
                freeCells.push({ x, y });
            }
        }
        
        Phaser.Utils.Array.Shuffle(freeCells);
        
        const enemySpeed = this.config.enemySpeed || 80;
        
        for (let i = 0; i < Math.min(enemyCount, freeCells.length); i++) {
            const cell = freeCells[i];
            const enemyX = startX + cell.x * cellSize + cellSize / 2;
            const enemyY = startY + cell.y * cellSize + cellSize / 2;
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–∞ (–∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç)
            const enemy = this.add.rectangle(enemyX, enemyY, 18, 18, 0xff0000).setDepth(7);
            this.physics.add.existing(enemy);
            enemy.body.setCollideWorldBounds(true);
            enemy.body.setBounce(1, 1);
            
            // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            const directions = [
                { x: enemySpeed, y: 0 },
                { x: -enemySpeed, y: 0 },
                { x: 0, y: enemySpeed },
                { x: 0, y: -enemySpeed }
            ];
            const dir = Phaser.Utils.Array.GetRandom(directions);
            enemy.body.setVelocity(dir.x, dir.y);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            enemy.gridX = cell.x;
            enemy.gridY = cell.y;
            enemy.patrolSpeed = enemySpeed;
            
            this.enemies.push(enemy);
            
            // –ö–æ–ª–ª–∏–∑–∏—è —Å —Å—Ç–µ–Ω–∞–º–∏ - –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            this.physics.add.collider(enemy, this.mazeWalls, () => {
                // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                const newDir = Phaser.Utils.Array.GetRandom(directions);
                enemy.body.setVelocity(newDir.x, newDir.y);
            });
            
            // –ö–æ–ª–ª–∏–∑–∏—è —Å —à–∞—Ä–∏–∫–æ–º - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            this.physics.add.overlap(this.ball, enemy, () => {
                if (this.isGameActive) {
                    this.resetBallPosition();
                }
            });
        }
        
        console.log(`üî¥ [MazeLockScene] –°–æ–∑–¥–∞–Ω–æ ${this.enemies.length} –≤—Ä–∞–≥–æ–≤`);
    }
    
    /**
     * –ú–ï–•–ê–ù–ò–ö–ê 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–Ω—ã—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤
     */
    createPortals(mazeGrid, startX, startY, mazeSize, cellSize) {
        const portalCount = this.config.portals || 0;
        if (portalCount === 0) return;
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ç–Ω–æ–µ
        const actualCount = Math.floor(portalCount / 2) * 2;
        if (actualCount === 0) return;
        
        const portalDuration = this.config.portalDuration || 3000;
        const portalInterval = this.config.portalInterval || 5000;
        
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –≤–æ–ª–Ω—É –ø–∞—Ä–Ω—ã—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤
        this.spawnPortals(mazeGrid, startX, startY, mazeSize, cellSize, actualCount);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤
        const timer = this.time.addEvent({
            delay: portalInterval,
            callback: () => {
                this.spawnPortals(mazeGrid, startX, startY, mazeSize, cellSize, actualCount);
            },
            loop: true
        });
        
        this.portalTimers.push(timer);
        
        const pairCount = actualCount / 2;
        console.log(`üåÄ [MazeLockScene] –°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä–Ω—ã—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (${actualCount} –ø–æ—Ä—Ç–∞–ª–æ–≤ = ${pairCount} –ø–∞—Ä)`);
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–Ω—ã—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤
     */
    spawnPortals(mazeGrid, startX, startY, mazeSize, cellSize, count) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Ä—Ç–∞–ª—ã
        this.portals.forEach(portal => {
            if (portal && portal.circle) portal.circle.destroy();
        });
        this.portals = [];
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
        const freeCells = [];
        for (let y = 0; y < mazeSize; y++) {
            for (let x = 0; x < mazeSize; x++) {
                if ((x === 0 && y === 0) || (x === mazeSize - 1 && y === mazeSize - 1)) continue;
                freeCells.push({ x, y });
            }
        }
        
        Phaser.Utils.Array.Shuffle(freeCells);
        
        const portalDuration = this.config.portalDuration || 3000;
        const pairCount = count / 2;
        
        // –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä
        const colors = [
            0x00aaff, // –°–∏–Ω–∏–π
            0xff00ff, // –ü—É—Ä–ø—É—Ä–Ω—ã–π
            0x00ff88, // –ë–∏—Ä—é–∑–æ–≤—ã–π
            0xffaa00, // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            0xff0088  // –†–æ–∑–æ–≤—ã–π
        ];
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –ø–æ—Ä—Ç–∞–ª–æ–≤
        for (let pairIndex = 0; pairIndex < pairCount; pairIndex++) {
            if (freeCells.length < 2) break;
            
            const color = colors[pairIndex % colors.length];
            
            // –ü–µ—Ä–≤—ã–π –ø–æ—Ä—Ç–∞–ª –ø–∞—Ä—ã
            const cell1 = freeCells.shift();
            const portal1X = startX + cell1.x * cellSize + cellSize / 2;
            const portal1Y = startY + cell1.y * cellSize + cellSize / 2;
            
            // –í—Ç–æ—Ä–æ–π –ø–æ—Ä—Ç–∞–ª –ø–∞—Ä—ã
            const cell2 = freeCells.shift();
            const portal2X = startX + cell2.x * cellSize + cellSize / 2;
            const portal2Y = startY + cell2.y * cellSize + cellSize / 2;
            
            // –°–æ–∑–¥–∞–µ–º –æ–±–∞ –ø–æ—Ä—Ç–∞–ª–∞
            const portal1 = this.createSinglePortal(portal1X, portal1Y, color, portalDuration);
            const portal2 = this.createSinglePortal(portal2X, portal2Y, color, portalDuration);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞—Ö
            const portalData1 = { 
                circle: portal1, 
                x: portal1X, 
                y: portal1Y, 
                pairIndex: pairIndex, 
                pairPortal: null // –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ
            };
            
            const portalData2 = { 
                circle: portal2, 
                x: portal2X, 
                y: portal2Y, 
                pairIndex: pairIndex, 
                pairPortal: portalData1 // –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –ø–æ—Ä—Ç–∞–ª
            };
            
            portalData1.pairPortal = portalData2; // –í–∑–∞–∏–º–Ω–∞—è —Å—Å—ã–ª–∫–∞
            
            this.portals.push(portalData1, portalData2);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—é –¥–ª—è –æ–±–æ–∏—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤
            this.setupPortalTeleport(portal1, portalData2);
            this.setupPortalTeleport(portal2, portalData1);
        }
        
        console.log(`üåÄ [MazeLockScene] –°–æ–∑–¥–∞–Ω–æ ${pairCount} –ø–∞—Ä –ø–æ—Ä—Ç–∞–ª–æ–≤ (${this.portals.length} —à—Ç—É–∫)`);
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
     */
    createSinglePortal(x, y, color, duration) {
        const portal = this.add.circle(x, y, 12, color, 0.7).setDepth(7);
        this.physics.add.existing(portal, true);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏
        this.tweens.add({
            targets: portal,
            scale: { from: 1, to: 1.3 },
            alpha: { from: 0.7, to: 0.3 },
            duration: 800,
            yoyo: true,
            repeat: -1,
            ease: 'Sine.easeInOut'
        });
        
        // –£–¥–∞–ª—è–µ–º –ø–æ—Ä—Ç–∞–ª —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        this.time.delayedCall(duration, () => {
            if (portal && portal.scene) {
                portal.destroy();
            }
        });
        
        return portal;
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Ä—Ç–∞–ª–∞
     */
    setupPortalTeleport(portalCircle, targetPortalData) {
        // –§–ª–∞–≥ "–±—ã–ª –ª–∏ —à–∞—Ä–∏–∫ –≤–Ω—É—Ç—Ä–∏ –ø–æ—Ä—Ç–∞–ª–∞ –≤ –ø—Ä–æ—à–ª–æ–º –∫–∞–¥—Ä–µ"
        portalCircle.wasOverlapping = false;
        
        const collider = this.physics.add.overlap(
            this.ball, 
            portalCircle, 
            // collideCallback - —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ processCallback –≤–µ—Ä–Ω—É–ª true
            () => {
                if (this.isGameActive) {
                    this.teleportToPairedPortal(targetPortalData);
                }
            },
            // processCallback - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ú–û–ñ–ù–û –õ–ò —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
            () => {
                // –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —à–∞—Ä–∏–∫ –¢–û–õ–¨–ö–û –ß–¢–û –≤–æ—à–µ–ª –≤ –ø–æ—Ä—Ç–∞–ª
                if (!portalCircle.wasOverlapping && !this.portalCooldown) {
                    portalCircle.wasOverlapping = true;
                    return true; // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—é
                }
                return false; // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—é
            },
            this
        );
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä
        portalCircle.collider = collider;
    }
    
    /**
     * –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –∫ –ø–∞—Ä–Ω–æ–º—É –ø–æ—Ä—Ç–∞–ª—É
     */
    teleportToPairedPortal(targetPortalData) {
        if (!targetPortalData) return;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—É–ª–¥–∞—É–Ω
        this.portalCooldown = true;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ wasOverlapping –¥–ª—è –í–°–ï–• –ø–æ—Ä—Ç–∞–ª–æ–≤
        // –≠—Ç–æ –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã —à–∞—Ä–∏–∫ –º–æ–≥ —Å—Ä–∞–∑—É –≤—ã–π—Ç–∏ –∏–∑ –ø–æ—Ä—Ç–∞–ª–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        this.portals.forEach(portalData => {
            if (portalData.circle) {
                portalData.circle.wasOverlapping = false;
            }
        });
        
        // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞—Ä–∏–∫ –∫ –ø–∞—Ä–Ω–æ–º—É –ø–æ—Ä—Ç–∞–ª—É
        this.ball.setPosition(targetPortalData.x, targetPortalData.y);
        this.ball.body.setVelocity(0, 0);
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
        this.cameras.main.flash(300, 0, 100, 255);
        
        console.log(`üåÄ [MazeLockScene] –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –∫ –ø–∞—Ä–Ω–æ–º—É –ø–æ—Ä—Ç–∞–ª—É (–ø–∞—Ä–∞ ${targetPortalData.pairIndex})`);
        
        // –ß–µ—Ä–µ–∑ 100–º—Å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ —à–∞—Ä–∏–∫ –£–ñ–ï –≤–Ω—É—Ç—Ä–∏ –ø–æ—Ä—Ç–∞–ª–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—é
        this.time.delayedCall(100, () => {
            // –ü–æ–º–µ—á–∞–µ–º –ø–æ—Ä—Ç–∞–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ "–∑–∞–Ω—è—Ç—ã–π"
            if (targetPortalData.circle) {
                targetPortalData.circle.wasOverlapping = true;
            }
        });
        
        // –°–Ω–∏–º–∞–µ–º –∫—É–ª–¥–∞—É–Ω —á–µ—Ä–µ–∑ 500–º—Å
        this.time.delayedCall(500, () => {
            this.portalCooldown = false;
            console.log('üåÄ [MazeLockScene] –ü–æ—Ä—Ç–∞–ª—ã —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã');
        });
    }
    
    /**
     * –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ —à–∞—Ä–∏–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç (–ø—Ä–∏ –∫–∞—Å–∞–Ω–∏–∏ –≤—Ä–∞–≥–∞)
     */
    resetBallPosition() {
        const startX = this.mazeStartX + this.cellSize / 2;
        const startY = this.mazeStartY + this.cellSize / 2;
        
        this.ball.setPosition(startX, startY);
        this.ball.body.setVelocity(0, 0);
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–±—Ä–æ—Å–∞
        this.cameras.main.shake(200, 0.01);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
        if (this.collectedKeys > 0) {
            console.log(`üî¥ [MazeLockScene] –ö–∞—Å–∞–Ω–∏–µ –≤—Ä–∞–≥–∞! –ü–æ—Ç–µ—Ä—è–Ω–æ ${this.collectedKeys} –∫–ª—é—á–µ–π!`);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
            this.respawnKeys();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            this.collectedKeys = 0;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            if (this.keysText) {
                this.keysText.setText(`üîë –ö–ª—é—á–∏: 0/${this.requiredKeys}`);
            }
        } else {
            console.log('üî¥ [MazeLockScene] –ö–∞—Å–∞–Ω–∏–µ –≤—Ä–∞–≥–∞! –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç');
        }
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–∞ –∫–∞—Ä—Ç–µ
     */
    respawnKeys() {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
        this.keys.forEach(key => {
            if (key && key.scene) {
                key.destroy();
            }
        });
        this.keys = [];
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
        const keyCount = this.config.keys || 0;
        if (keyCount === 0) return;
        
        const mazeSize = this.config.mazeSize || 5;
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ (–Ω–µ —Å—Ç–∞—Ä—Ç, –Ω–µ –≤—ã—Ö–æ–¥)
        const freeCells = [];
        for (let y = 0; y < mazeSize; y++) {
            for (let x = 0; x < mazeSize; x++) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç (0,0) –∏ –≤—ã—Ö–æ–¥ (mazeSize-1, mazeSize-1)
                if ((x === 0 && y === 0) || (x === mazeSize - 1 && y === mazeSize - 1)) continue;
                freeCells.push({ x, y });
            }
        }
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ keyCount –∫–ª–µ—Ç–æ–∫
        Phaser.Utils.Array.Shuffle(freeCells);
        
        for (let i = 0; i < Math.min(keyCount, freeCells.length); i++) {
            const cell = freeCells[i];
            const keyX = this.mazeStartX + cell.x * this.cellSize + this.cellSize / 2;
            const keyY = this.mazeStartY + cell.y * this.cellSize + this.cellSize / 2;
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á (–∂–µ–ª—Ç–∞—è –∑–≤–µ–∑–¥–∞)
            const key = this.add.star(keyX, keyY, 6, 8, 16, 0xffff00).setDepth(7);
            this.physics.add.existing(key, true);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
            this.tweens.add({
                targets: key,
                angle: 360,
                duration: 2000,
                repeat: -1,
                ease: 'Linear'
            });
            
            this.keys.push(key);
            
            // –ö–æ–ª–ª–∏–∑–∏—è —Å —à–∞—Ä–∏–∫–æ–º
            this.physics.add.overlap(this.ball, key, () => {
                if (this.isGameActive) {
                    key.destroy();
                    this.collectedKeys++;
                    
                    if (this.keysText) {
                        this.keysText.setText(`üîë –ö–ª—é—á–∏: ${this.collectedKeys}/${this.requiredKeys}`);
                    }
                    
                    console.log(`üîë [MazeLockScene] –°–æ–±—Ä–∞–Ω –∫–ª—é—á ${this.collectedKeys}/${this.requiredKeys}`);
                }
            });
        }
        
        console.log(`üîÑ [MazeLockScene] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${this.keys.length} –∫–ª—é—á–µ–π`);
    }
    
    /**
     * –ú–ï–•–ê–ù–ò–ö–ê 4: –¢—É–º–∞–Ω –≤–æ–π–Ω—ã
     */
    createFogOfWar(startX, startY, mazeSize, cellSize) {
        if (!this.config.fogOfWar) return;
        
        const fogRadius = this.config.fogRadius || 3;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–º–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –ø–æ–≤–µ—Ä—Ö –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        this.fogRectangle = this.add.rectangle(
            startX + this.mazeWidth / 2,
            startY + this.mazeHeight / 2,
            this.mazeWidth,
            this.mazeHeight,
            0x000000,
            0.92
        ).setDepth(50);
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫—É –¥–ª—è –º–∞—Å–∫–∏ (–∫—Ä—É–≥ –≤–∏–¥–∏–º–æ—Å—Ç–∏)
        this.fogMask = this.make.graphics();
        this.fogMask.fillStyle(0xffffff);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫—É (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
        const mask = this.fogMask.createGeometryMask();
        mask.invertAlpha = true; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: –≤–∏–¥–Ω–æ –ì–î–ï –ï–°–¢–¨ –∫—Ä—É–≥
        this.fogRectangle.setMask(mask);
        
        console.log(`üå´Ô∏è [MazeLockScene] –¢—É–º–∞–Ω –≤–æ–π–Ω—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (—Ä–∞–¥–∏—É—Å: ${fogRadius} –∫–ª–µ—Ç–æ–∫)`);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
     */
    updateFogOfWar() {
        if (!this.config.fogOfWar || !this.fogMask || !this.ball) return;
        
        const fogRadius = this.config.fogRadius || 3;
        const visibleRadius = fogRadius * this.cellSize;
        
        // –û—á–∏—â–∞–µ–º –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫—Ä—É–≥ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ –ø–æ–∑–∏—Ü–∏–∏ —à–∞—Ä–∏–∫–∞
        this.fogMask.clear();
        this.fogMask.fillStyle(0xffffff);
        this.fogMask.fillCircle(this.ball.x, this.ball.y, visibleRadius);
    }
}

