/**
 * –°—Ü–µ–Ω–∞ –≤–∑–ª–æ–º–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–º–∫–∞
 * –ú–∏–Ω–∏-–∏–≥—Ä–∞: –ø–æ–¥–±–æ—Ä –ø–∏–Ω–æ–≤ - –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–æ–≥–¥–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∑–µ–ª–µ–Ω–æ–π –∑–æ–Ω–µ
 */

import { BaseLockScene } from './BaseLockScene.js';
// HTMLButton —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ Phaser –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

export class SimpleLockScene extends BaseLockScene {
    constructor() {
        super('SimpleLockScene');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
        this.pins = [];
        this.currentPin = 0;
        this.indicator = null;
        this.pickButton = null;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
     */
    create() {
        super.create();
        
        // –í–ê–ñ–ù–û: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        this.pins = [];
        this.currentPin = 0;
        this.indicator = null;
        this.pickButton = null;
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π UI
        this.createBaseUI('üîì –í–ó–õ–û–ú –ü–†–û–°–¢–û–ì–û –ó–ê–ú–ö–ê');
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–æ–¥ –º–µ—Ö–∞–Ω–∏–∫–∏)
        const { width } = this.scale;
        let instructionText = '–ù–∞–∂–º–∏ –í–ó–õ–û–ú–ê–¢–¨ –∫–æ–≥–¥–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∑–µ–ª–µ–Ω–æ–π –∑–æ–Ω–µ!';
        
        if (this.config.twoPhaseMode) {
            instructionText = '–ü–æ–ø–∞–¥–∏ –≤ –ó–ï–õ–ï–ù–£–Æ, –∑–∞—Ç–µ–º –≤ –ñ–ï–õ–¢–£–Æ –∑–æ–Ω—É!';
        }
        
        this.add.text(width / 2, 180, instructionText, {
            fontSize: '14px',
            fontFamily: 'Arial',
            color: '#ffffff',
            stroke: '#000000',
            strokeThickness: 2,
            align: 'center'
        }).setOrigin(0.5).setDepth(10);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∫–∞—Ö
        const hints = [];
        if (this.config.resetOnFail) {
            hints.push('‚ö†Ô∏è –ü—Ä–æ–º–∞—Ö —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞ 1-–π –ø–∏–Ω');
        }
        if (this.config.shrinkingZone) {
            hints.push('üìâ –ó–æ–Ω–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ–º–∞—Ö–µ');
        }
        
        if (hints.length > 0) {
            this.add.text(width / 2, 200, hints.join(' | '), {
                fontSize: '11px',
                fontFamily: 'Arial',
                color: '#ffaa00',
                stroke: '#000000',
                strokeThickness: 1,
                align: 'center'
            }).setOrigin(0.5).setDepth(10);
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–∏–Ω—ã
        this.createPins();
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        this.createIndicator();
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–∑–ª–æ–º–∞
        this.createPickButton();
        
        // –ò–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
        this.isGameActive = true;
        
        console.log('üîì [SimpleLockScene] –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∏–Ω–æ–≤
     */
    createPins() {
        const { width, height } = this.scale;
        const numPins = this.config.pins || 1;
        const pinWidth = 50;
        const spacing = 70;
        const startX = width / 2 - (numPins - 1) * spacing / 2;
        const y = height / 2 - 20;
        
        for (let i = 0; i < numPins; i++) {
            const x = startX + i * spacing;
            
            // –û—Å–Ω–æ–≤–∞ –ø–∏–Ω–∞
            const pinBase = this.add.rectangle(x, y, pinWidth, 80, 0x333333).setDepth(5);
            
            // –ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞ (—É—Å–ø–µ—Ö) - –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            const tolerance = this.config.tolerance || 20;
            const greenZone = this.add.rectangle(x, y, pinWidth - 8, tolerance, 0x00ff00).setDepth(6);
            
            // –ñ–µ–ª—Ç–∞—è –∑–æ–Ω–∞ (–¥–ª—è –¥–≤—É—Ö—Ñ–∞–∑–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞) - —Å–æ–∑–¥–∞–µ–º –Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º
            let yellowZone = null;
            if (this.config.twoPhaseMode) {
                const yellowTolerance = this.config.yellowTolerance || 15;
                yellowZone = this.add.rectangle(x, y, pinWidth - 8, yellowTolerance, 0xffff00).setDepth(6);
                yellowZone.setVisible(false); // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞
            }
            
            // –¢–µ–∫—Å—Ç –ø–∏–Ω–∞
            const pinText = this.add.text(x, y + 50, `–ü–∏–Ω ${i + 1}`, {
                fontSize: '12px',
                fontFamily: 'Arial',
                color: '#ffffff',
                stroke: '#000000',
                strokeThickness: 2
            }).setOrigin(0.5).setDepth(10);
            
            // –°—Ç–∞—Ç—É—Å –ø–∏–Ω–∞
            const status = this.add.text(x, y + 65, '‚ö™', {
                fontSize: '20px'
            }).setOrigin(0.5).setDepth(10);
            
            this.pins.push({
                base: pinBase,
                greenZone: greenZone,
                yellowZone: yellowZone,
                text: pinText,
                status: status,
                unlocked: false,
                phase: 1, // –§–∞–∑–∞ 1 (–∑–µ–ª–µ–Ω–∞—è) –∏–ª–∏ 2 (–∂–µ–ª—Ç–∞—è)
                x: x,
                y: y,
                tolerance: tolerance, // –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∑–µ–ª–µ–Ω–æ–π –∑–æ–Ω—ã
                originalTolerance: tolerance // –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            });
        }
        
        this.currentPin = 0;
        this.highlightCurrentPin();
    }
    
    /**
     * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–∏–Ω–∞
     */
    highlightCurrentPin() {
        // –°–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–æ –≤—Å–µ—Ö
        this.pins.forEach((pin, index) => {
            pin.base.setFillStyle(0x333333);
            
            if (index === this.currentPin) {
                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π
                pin.base.setFillStyle(0x555555);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∂–µ–ª—Ç—É—é —Ä–∞–º–∫—É
                if (pin.highlight) {
                    pin.highlight.destroy();
                }
                pin.highlight = this.add.rectangle(pin.x, pin.y, 54, 84, 0xffff00, 0).setDepth(4);
                pin.highlight.setStrokeStyle(2, 0xffff00);
            } else if (pin.highlight) {
                pin.highlight.destroy();
                pin.highlight = null;
            }
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
     */
    createIndicator() {
        if (!this.pins || !this.pins[this.currentPin]) return;
        
        const pin = this.pins[this.currentPin];
        
        this.indicator = this.add.rectangle(
            pin.x,
            pin.y + 40,
            40,
            8,
            0xff0000
        ).setDepth(7);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        const speed = this.config.indicatorSpeed || 2;
        const duration = 1200 / speed;
        
        this.tweens.add({
            targets: this.indicator,
            y: pin.y - 40,
            duration: duration,
            yoyo: true,
            repeat: -1,
            ease: 'Linear'
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–∑–ª–æ–º–∞
     */
    createPickButton() {
        const { width, height } = this.scale;
        
        this.pickButton = this.createButton(width / 2, height - 120, 250, 60, 'üîì –í–ó–õ–û–ú–ê–¢–¨', {
            fontSize: '18px',
            backgroundColor: 0x4CAF50,
            borderColor: 0x45a049,
            hoverColor: 0x45a049
        });
        
        this.pickButton.container.on('pointerdown', () => this.tryPick());
        
        // –ú–û–ë–ò–õ–¨–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê: —Ç–∞–ø –ø–æ –æ–±–ª–∞—Å—Ç–∏ –∏–≥—Ä—ã (–Ω–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º)
        const gameArea = this.add.rectangle(width / 2, height / 2 - 80, width, 400, 0x000000, 0.01);
        gameArea.setInteractive();
        gameArea.on('pointerdown', (pointer) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–ø –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ
            if (pointer.y < height - 150) {
                this.tryPick();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ –ø—Ä–æ–±–µ–ª–∞ (–¥–ª—è –ü–ö)
        this.input.keyboard.on('keydown-SPACE', () => {
            this.tryPick();
        });
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        this.add.text(width / 2, height - 180, '–¢–∞–ø–∞–π—Ç–µ –ø–æ —ç–∫—Ä–∞–Ω—É –∏–ª–∏ –∫–Ω–æ–ø–∫–µ', {
            fontSize: '14px',
            fontFamily: 'Arial',
            color: '#aaaaaa',
            align: 'center'
        }).setOrigin(0.5).setDepth(10);
    }
    
    /**
     * –ü–æ–ø—ã—Ç–∫–∞ –≤–∑–ª–æ–º–∞
     */
    tryPick() {
        if (!this.isGameActive) return;
        if (!this.pins || !this.pins[this.currentPin]) return;
        
        const pin = this.pins[this.currentPin];
        const indicatorY = this.indicator.y;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–æ–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        let targetZone, targetTolerance, currentPhase;
        
        if (this.config.twoPhaseMode && pin.phase === 1) {
            // –§–∞–∑–∞ 1: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–µ–ª–µ–Ω—É—é –∑–æ–Ω—É
            targetZone = pin.greenZone;
            targetTolerance = pin.tolerance;
            currentPhase = 1;
        } else if (this.config.twoPhaseMode && pin.phase === 2) {
            // –§–∞–∑–∞ 2: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∂–µ–ª—Ç—É—é –∑–æ–Ω—É
            targetZone = pin.yellowZone;
            targetTolerance = this.config.yellowTolerance || 15;
            currentPhase = 2;
        } else {
            // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –∑–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞
            targetZone = pin.greenZone;
            targetTolerance = pin.tolerance;
            currentPhase = 1;
        }
        
        const zoneTop = targetZone.y - targetTolerance / 2;
        const zoneBottom = targetZone.y + targetTolerance / 2;
        const isSuccess = indicatorY >= zoneTop && indicatorY <= zoneBottom;
        
        console.log(`üîì [SimpleLockScene] –ü–æ–ø—ã—Ç–∫–∞ –≤–∑–ª–æ–º–∞ –ø–∏–Ω–∞ ${this.currentPin + 1}, —Ñ–∞–∑–∞ ${currentPhase}:`, {
            indicatorY,
            zoneTop,
            zoneBottom,
            isSuccess,
            tolerance: targetTolerance
        });
        
        if (isSuccess) {
            // –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∑–æ–Ω—É!
            
            if (this.config.twoPhaseMode && pin.phase === 1) {
                // –§–∞–∑–∞ 1 —É—Å–ø–µ—à–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∞–∑–µ 2
                pin.phase = 2;
                pin.greenZone.setVisible(false);
                pin.yellowZone.setVisible(true);
                
                if (pin.status && pin.status.scene) {
                    pin.status.setText('üü°');
                    pin.status.setColor('#ffff00');
                }
                
                console.log(`üü¢ [SimpleLockScene] –ü–∏–Ω ${this.currentPin + 1}: –§–∞–∑–∞ 1 –ø—Ä–æ–π–¥–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∞–∑–µ 2`);
                
            } else {
                // –ü–æ–ª–Ω—ã–π —É—Å–ø–µ—Ö (–ª–∏–±–æ —Ñ–∞–∑–∞ 2, –ª–∏–±–æ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º)
                pin.unlocked = true;
                
                if (pin.status && pin.status.scene) {
                    pin.status.setText('‚úÖ');
                    pin.status.setColor('#00ff00');
                }
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–∏–Ω—É
                this.currentPin++;
                
                if (this.currentPin >= this.pins.length) {
                    // –í—Å–µ –ø–∏–Ω—ã –≤–∑–ª–æ–º–∞–Ω—ã!
                    this.onSuccess();
                } else {
                    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–∏–Ω
                    this.highlightCurrentPin();
                    this.updateIndicator();
                }
            }
            
        } else {
            // –ü—Ä–æ–º–∞—Ö!
            this.handleFailure(pin);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
     */
    handleFailure(pin) {
        this.incrementAttempts();
        
        // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–≤–∞–ª–∞
        if (pin.status && pin.status.scene) {
            pin.status.setText('‚ùå');
            pin.status.setColor('#ff0000');
        }
        
        // –ú–ï–•–ê–ù–ò–ö–ê 2: –°—É–∂–∞—é—â–∞—è—Å—è –∑–æ–Ω–∞
        if (this.config.shrinkingZone) {
            const shrinkAmount = this.config.shrinkAmount || 3;
            const minTolerance = this.config.minTolerance || 10;
            
            if (pin.tolerance > minTolerance) {
                pin.tolerance = Math.max(minTolerance, pin.tolerance - shrinkAmount);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∑–µ–ª–µ–Ω–æ–π –∑–æ–Ω—ã
                pin.greenZone.setDisplaySize(pin.greenZone.width, pin.tolerance);
                
                console.log(`üìâ [SimpleLockScene] –ó–æ–Ω–∞ —É–º–µ–Ω—å—à–µ–Ω–∞ –¥–æ ${pin.tolerance}px`);
            }
        }
        
        // –ú–ï–•–ê–ù–ò–ö–ê 3: –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—ã–π –ø–∏–Ω
        if (this.config.resetOnFail && this.currentPin > 0) {
            console.log(`üîÑ [SimpleLockScene] –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—ã–π –ø–∏–Ω!`);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–∏–Ω—ã
            this.pins.forEach((p, index) => {
                p.unlocked = false;
                p.phase = 1;
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–æ–Ω—ã
                if (this.config.shrinkingZone) {
                    p.tolerance = p.originalTolerance;
                    p.greenZone.setDisplaySize(p.greenZone.width, p.tolerance);
                }
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if (p.greenZone) p.greenZone.setVisible(true);
                if (p.yellowZone) p.yellowZone.setVisible(false);
                
                if (p.status && p.status.scene) {
                    p.status.setText('‚ö™');
                    p.status.setColor('#ffffff');
                }
            });
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—ã–π –ø–∏–Ω
            this.currentPin = 0;
            this.highlightCurrentPin();
            this.updateIndicator();
            
            return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
        }
        
        // –î–≤—É—Ö—Ñ–∞–∑–Ω—ã–π —Ä–µ–∂–∏–º: —Å–±—Ä–æ—Å —Ñ–∞–∑—ã –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ —Ñ–∞–∑—ã 2
        if (this.config.twoPhaseMode && pin.phase === 2) {
            pin.phase = 1;
            pin.greenZone.setVisible(true);
            pin.yellowZone.setVisible(false);
            console.log(`üîÑ [SimpleLockScene] –ü–∏–Ω ${this.currentPin + 1}: –°–±—Ä–æ—Å –Ω–∞ —Ñ–∞–∑—É 1`);
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ 500–º—Å
        this.time.delayedCall(500, () => {
            if (this.isGameActive && pin.status && pin.status.scene) {
                if (pin.phase === 1) {
                    pin.status.setText('‚ö™');
                    pin.status.setColor('#ffffff');
                } else if (pin.phase === 2) {
                    pin.status.setText('üü°');
                    pin.status.setColor('#ffff00');
                }
            }
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∏–Ω–∞
     */
    updateIndicator() {
        if (!this.indicator) return;
        if (!this.pins || !this.pins[this.currentPin]) return;
        
        const pin = this.pins[this.currentPin];
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        this.tweens.killTweensOf(this.indicator);
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫ –Ω–æ–≤–æ–º—É –ø–∏–Ω—É
        this.indicator.setPosition(pin.x, pin.y + 40);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        const speed = this.config.indicatorSpeed || 2;
        const duration = 1200 / speed;
        
        this.tweens.add({
            targets: this.indicator,
            y: pin.y - 40,
            duration: duration,
            yoyo: true,
            repeat: -1,
            ease: 'Linear'
        });
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞
     */
    shutdown() {
        super.shutdown();
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
        if (this.indicator) {
            this.tweens.killTweensOf(this.indicator);
        }
        
        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
        if (this.input && this.input.keyboard) {
            this.input.keyboard.off('keydown-SPACE');
        }
        
        // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.pins = [];
        this.currentPin = 0;
        this.indicator = null;
        this.pickButton = null;
        
        console.log('üîì [SimpleLockScene] –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
    }
}

