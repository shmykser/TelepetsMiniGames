/**
 * –°—Ü–µ–Ω–∞ –≤–∑–ª–æ–º–∞ –ø–∞—Ç—Ç–µ—Ä–Ω-–∑–∞–º–∫–∞
 * –ú–∏–Ω–∏-–∏–≥—Ä–∞: —Å–æ–µ–¥–∏–Ω–∏—Ç—å —Ç–æ—á–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
 */

import { BaseLockScene } from './BaseLockScene.js';

export class PatternLockScene extends BaseLockScene {
    constructor() {
        super('PatternLockScene');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
        this.patternPoints = [];
        this.selectedPoints = [];
        this.lines = [];
        this.correctPattern = [];
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
     */
    create() {
        super.create();
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π UI
        this.createBaseUI('üéØ –í–ó–õ–û–ú –ü–ê–¢–¢–ï–†–ù-–ó–ê–ú–ö–ê');
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        const { width } = this.scale;
        const instruction = this.add.text(width / 2, 180, '–°–æ–µ–¥–∏–Ω–∏—Ç–µ —Ç–æ—á–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ!\n–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Ç–æ—á–∫–∞–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ', {
            fontSize: '14px',
            fontFamily: 'Arial',
            color: '#ffffff',
            stroke: '#000000',
            strokeThickness: 2,
            align: 'center'
        }).setOrigin(0.5).setDepth(10);
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
        this.createPattern();
        
        // –ò–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
        this.isGameActive = true;
        
        console.log('üéØ [PatternLockScene] –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    createPattern() {
        const { width, height } = this.scale;
        const points = this.config.points || 4;
        const gridSize = Math.ceil(Math.sqrt(points));
        const cellSize = 70;
        const patternWidth = gridSize * cellSize;
        const patternHeight = gridSize * cellSize;
        const startX = (width - patternWidth) / 2 + cellSize / 2;
        const startY = (height - patternHeight) / 2 + cellSize / 2;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏
        let pointIndex = 0;
        for (let row = 0; row < gridSize; row++) {
            for (let col = 0; col < gridSize; col++) {
                if (pointIndex >= points) break;
                
                const x = startX + col * cellSize;
                const y = startY + row * cellSize;
                
                // –ö—Ä—É–∂–æ–∫ —Ç–æ—á–∫–∏ (—É–≤–µ–ª–∏—á–µ–Ω —Ä–∞–¥–∏—É—Å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
                const point = this.add.circle(x, y, 20, 0x666666).setDepth(6);
                point.setStrokeStyle(4, 0xffffff);
                
                // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–ª–∏–∫–∞ –¥–ª—è —Ç–∞—á-—ç–∫—Ä–∞–Ω–∞
                const hitArea = new Phaser.Geom.Circle(0, 0, 30);
                point.setInteractive(hitArea, Phaser.Geom.Circle.Contains);
                point.setData('index', pointIndex);
                point.setData('x', x);
                point.setData('y', y);
                
                // –ù–æ–º–µ—Ä —Ç–æ—á–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞)
                const showNumbers = this.config.showPattern || false;
                if (showNumbers) {
                    const label = this.add.text(x, y, (pointIndex + 1).toString(), {
                        fontSize: '16px',
                        fontFamily: 'Arial',
                        color: '#ffffff',
                        fontStyle: 'bold'
                    }).setOrigin(0.5).setDepth(7);
                    point.setData('label', label);
                }
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
                point.on('pointerdown', () => {
                    this.onPointClick(point, pointIndex);
                });
                
                this.patternPoints.push(point);
                pointIndex++;
            }
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        this.correctPattern = this.generateCorrectPattern(points);
        
        console.log('üéØ [PatternLockScene] –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω:', this.correctPattern);
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    generateCorrectPattern(points) {
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ—á–µ–∫ 0 ‚Üí 1 ‚Üí 2 ‚Üí ...
        const pattern = [];
        for (let i = 0; i < points - 1; i++) {
            pattern.push([i, i + 1]);
        }
        return pattern;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ—á–∫–µ
     */
    onPointClick(point, index) {
        if (!this.isGameActive) return;
        
        const isAlreadySelected = this.selectedPoints.includes(index);
        
        if (isAlreadySelected) {
            // –¢–æ—á–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
        this.selectedPoints.push(index);
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–æ—á–∫—É
        point.setFillStyle(0x00ff00);
        
        console.log('üéØ [PatternLockScene] –í—ã–±—Ä–∞–Ω–∞ —Ç–æ—á–∫–∞:', index, '| –í—Å–µ–≥–æ:', this.selectedPoints);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞, —Ä–∏—Å—É–µ–º –ª–∏–Ω–∏—é –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π
        if (this.selectedPoints.length > 1) {
            const prevIndex = this.selectedPoints[this.selectedPoints.length - 2];
            const prevPoint = this.patternPoints[prevIndex];
            
            this.drawLine(
                prevPoint.getData('x'),
                prevPoint.getData('y'),
                point.getData('x'),
                point.getData('y')
            );
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if (this.selectedPoints.length === this.patternPoints.length) {
            // –í—Å–µ —Ç–æ—á–∫–∏ –≤—ã–±—Ä–∞–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
            this.checkPattern();
        }
    }
    
    /**
     * –†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
     */
    drawLine(x1, y1, x2, y2) {
        const line = this.add.line(0, 0, x1, y1, x2, y2, 0x00ff00, 0.8);
        line.setLineWidth(4);
        line.setDepth(5);
        
        this.lines.push(line);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    checkPattern() {
        console.log('üéØ [PatternLockScene] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞...');
        console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏:', this.selectedPoints);
        console.log('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω:', this.correctPattern);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        let isCorrect = true;
        
        for (let i = 0; i < this.correctPattern.length; i++) {
            const [from, to] = this.correctPattern[i];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            const selectedFrom = this.selectedPoints[i];
            const selectedTo = this.selectedPoints[i + 1];
            
            if (selectedFrom !== from || selectedTo !== to) {
                isCorrect = false;
                break;
            }
        }
        
        console.log('üéØ [PatternLockScene] –†–µ–∑—É–ª—å—Ç–∞—Ç:', isCorrect ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        this.time.delayedCall(500, () => {
            if (isCorrect) {
                this.onSuccess();
            } else {
                this.onPatternFailed();
            }
        });
    }
    
    /**
     * –ü—Ä–æ–≤–∞–ª –ø–æ–ø—ã—Ç–∫–∏
     */
    onPatternFailed() {
        console.log('‚ùå [PatternLockScene] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω!');
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ª–∏–Ω–∏–∏ –∫—Ä–∞—Å–Ω—ã–º
        this.lines.forEach(line => {
            line.setStrokeStyle(4, 0xff0000);
        });
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ –∫—Ä–∞—Å–Ω—ã–º
        this.patternPoints.forEach(point => {
            if (this.selectedPoints.includes(point.getData('index'))) {
                point.setFillStyle(0xff0000);
            }
        });
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        this.incrementAttempts();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        this.time.delayedCall(1000, () => {
            if (this.isGameActive) {
                this.resetPattern();
            }
        });
    }
    
    /**
     * –°–±—Ä–æ—Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    resetPattern() {
        console.log('üîÑ [PatternLockScene] –°–±—Ä–æ—Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞');
        
        // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
        this.selectedPoints = [];
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–æ—á–µ–∫
        this.patternPoints.forEach(point => {
            point.setFillStyle(0x666666);
        });
        
        // –£–¥–∞–ª—è–µ–º –ª–∏–Ω–∏–∏
        this.lines.forEach(line => line.destroy());
        this.lines = [];
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞
     */
    shutdown() {
        super.shutdown();
        
        // –û—á–∏—â–∞–µ–º –ª–∏–Ω–∏–∏
        if (this.lines) {
            this.lines.forEach(line => line.destroy());
            this.lines = [];
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–æ—á–∫–∏
        if (this.patternPoints) {
            this.patternPoints.forEach(point => {
                point.removeAllListeners();
            });
            this.patternPoints = [];
        }
    }
}

