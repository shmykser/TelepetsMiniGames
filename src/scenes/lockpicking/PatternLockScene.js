/**
 * –°—Ü–µ–Ω–∞ –≤–∑–ª–æ–º–∞ –ø–∞—Ç—Ç–µ—Ä–Ω-–∑–∞–º–∫–∞
 * –ú–∏–Ω–∏-–∏–≥—Ä–∞: —Å–æ–µ–¥–∏–Ω–∏—Ç—å —Ü–≤–µ—Ç–Ω—ã–µ –ø–∞—Ä—ã —Ç–æ—á–µ–∫ –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ª–∏–Ω–∏–π (–∫–∞–∫ Flow Free)
 */

import { BaseLockScene } from './BaseLockScene.js';

export class PatternLockScene extends BaseLockScene {
    constructor() {
        super('PatternLockScene');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
        this.grid = []; // –°–µ—Ç–∫–∞ —Ç–æ—á–µ–∫ [row][col]
        this.coloredPairs = []; // –ü–∞—Ä—ã –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.lines = []; // –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏
        this.currentLine = null; // –õ–∏–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.isDrawing = false;
        this.gridGraphics = null;
        this.gridSize = 0;
        this.cellSize = 0;
        this.startX = 0;
        this.startY = 0;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
     */
    create() {
        super.create();
        
        // –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–∞—Å—Å–∏–≤—ã –∏ —Ñ–ª–∞–≥–∏
        this.grid = [];
        this.coloredPairs = [];
        this.lines = [];
        this.currentLine = null;
        this.isDrawing = false;
        this.gridGraphics = null;
        
        console.log('üéÆ [PatternLockScene] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã');
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π UI
        this.createBaseUI('üéØ –í–ó–õ–û–ú –ü–ê–¢–¢–ï–†–ù-–ó–ê–ú–ö–ê');
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        const { width } = this.scale;
        this.instructionText = this.add.text(width / 2, 160, '–ó–∞–∂–º–∏—Ç–µ —Ü–≤–µ—Ç–Ω—É—é —Ç–æ—á–∫—É –∏ –≤–µ–¥–∏—Ç–µ –∫ –ø–∞—Ä–Ω–æ–π!\n–°–æ–µ–¥–∏–Ω–∏—Ç–µ –≤—Å–µ –ø–∞—Ä—ã!', {
            fontSize: '15px',
            fontFamily: 'Arial',
            color: '#ffffff',
            stroke: '#000000',
            strokeThickness: 2,
            align: 'center'
        }).setOrigin(0.5).setDepth(10);
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É
        this.gridSize = this.config.gridSize || 3;
        this.cellSize = 60;
        this.createGrid();
        this.drawGridLines();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä—ã —Ç–æ—á–µ–∫ (—Å —Ä–µ—à–µ–Ω–∏–µ–º)
        this.generatePairs();
        
        // –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å–∏—Ç—å"
        this.resetButton = this.createButton(width - 90, 220, 160, 45, 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å', {
            fontSize: '14px',
            backgroundColor: 0x555555,
            borderColor: 0x777777,
            hoverColor: 0x666666
        });
        
        this.resetButton.container.on('pointerdown', () => {
            this.resetAllLines();
        });
        
        // DEBUG: –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"
        this.debugButton = this.createButton(90, 220, 160, 45, 'üîç –†–µ—à–µ–Ω–∏–µ', {
            fontSize: '14px',
            backgroundColor: 0x003366,
            borderColor: 0x0066cc,
            hoverColor: 0x004488
        });
        
        this.debugButton.container.on('pointerdown', () => {
            this.showSolution();
        });
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        this.setupInput();
        
        // –ò–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
        this.isGameActive = true;
        
        console.log('üéØ [PatternLockScene] –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏
     */
    createGrid() {
        const { width, height } = this.scale;
        const gridWidth = (this.gridSize - 1) * this.cellSize;
        const gridHeight = (this.gridSize - 1) * this.cellSize;
        this.startX = (width - gridWidth) / 2;
        this.startY = (height - gridHeight) / 2 + 20;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
        this.grid = [];
        for (let row = 0; row < this.gridSize; row++) {
            this.grid[row] = [];
            for (let col = 0; col < this.gridSize; col++) {
                const x = this.startX + col * this.cellSize;
                const y = this.startY + row * this.cellSize;
                
                this.grid[row][col] = {
                    x,
                    y,
                    row,
                    col,
                    color: null,
                    pairIndex: null,
                    occupied: false, // –ó–∞–Ω—è—Ç–∞ –ª–∏ –ª–∏–Ω–∏–µ–π
                    circle: null
                };
            }
        }
    }
    
    /**
     * –†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–π —Å–µ—Ç–∫–∏
     */
    drawGridLines() {
        this.gridGraphics = this.add.graphics();
        this.gridGraphics.lineStyle(1, 0x333333, 0.5);
        this.gridGraphics.setDepth(1);
        
        const gridWidth = (this.gridSize - 1) * this.cellSize;
        const gridHeight = (this.gridSize - 1) * this.cellSize;
        
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for (let col = 0; col < this.gridSize; col++) {
            const x = this.startX + col * this.cellSize;
            this.gridGraphics.lineBetween(x, this.startY, x, this.startY + gridHeight);
        }
        
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for (let row = 0; row < this.gridSize; row++) {
            const y = this.startY + row * this.cellSize;
            this.gridGraphics.lineBetween(this.startX, y, this.startX + gridWidth, y);
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω—ã—Ö –ø–∞—Ä —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π —Ä–µ—à–∞–µ–º–æ—Å—Ç–∏
     * –ê–ª–≥–æ—Ä–∏—Ç–º: —Å–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ, –ø–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏
     */
    generatePairs() {
        const pairCount = this.config.pairs || 2;
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –¥–ª—è 7+ –ø–∞—Ä
        const colors = [
            0xff0000, // –ö—Ä–∞—Å–Ω—ã–π
            0x0000ff, // –°–∏–Ω–∏–π
            0x00ff00, // –ó–µ–ª–µ–Ω—ã–π
            0xffff00, // –ñ–µ–ª—Ç—ã–π
            0xff00ff, // –ü—É—Ä–ø—É—Ä–Ω—ã–π
            0x00ffff, // –ì–æ–ª—É–±–æ–π
            0xff8800, // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            0x8800ff, // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            0x00ff88  // –ë–∏—Ä—é–∑–æ–≤—ã–π
        ];
        
        console.log('üéØ [PatternLockScene] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–∞–µ–º–æ–π –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏...');
        
        let attempts = 0;
        const maxAttempts = 50;
        let success = false;
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–∞–µ–º—É—é –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É
        while (!success && attempts < maxAttempts) {
            attempts++;
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–ø—ã—Ç–∫—É
            this.clearGrid();
            this.coloredPairs = [];
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            success = this.generateSolvablePaths(pairCount, colors);
            
            if (!success) {
                console.log(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempts} –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...`);
            }
        }
        
        if (success) {
            console.log(`‚úÖ [PatternLockScene] –†–µ—à–∞–µ–º–∞—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫`);
        } else {
            console.warn('‚ö†Ô∏è [PatternLockScene] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é');
            this.generateSimplePairs(pairCount, colors);
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–∞–µ–º—ã—Ö –ø—É—Ç–µ–π (–ü–†–ê–í–ò–õ–¨–ù–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º Flow Free)
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç backtracking –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –ø—É—Ç–µ–π
     */
    generateSolvablePaths(pairCount, colors) {
        const totalCells = this.gridSize * this.gridSize;
        console.log(`üéØ [Flow Free] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${pairCount} –ø—É—Ç–µ–π –Ω–∞ —Å–µ—Ç–∫–µ ${this.gridSize}x${this.gridSize}`);
        
        // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ–π –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏
        const maxGlobalAttempts = 100;
        
        for (let globalAttempt = 0; globalAttempt < maxGlobalAttempts; globalAttempt++) {
            // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
            this.clearGrid();
            
            const paths = [];
            let success = true;
            const placedPoints = [];
            
            // –ò–ó–ú–ï–ù–ï–ù–û: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä—ã –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û, –∞ –Ω–µ –≤—Å–µ —Å—Ä–∞–∑—É
            // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –ø–∞—Ä–µ —É—á–∏—Ç—ã–≤–∞—Ç—å —É–∂–µ –∑–∞–Ω—è—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            for (let i = 0; i < pairCount; i++) {
                const color = colors[i % colors.length];
                const minDistance = Math.max(2, Math.floor(this.gridSize * 0.35));
                
                let startCell = null;
                let endCell = null;
                let path = null;
                let pairAttempts = 0;
                const maxPairAttempts = 50;
                
                // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–∞—Ä—É –∏ –Ω–∞–π—Ç–∏ –¥–ª—è –Ω–µ—ë –ø—É—Ç—å
                while ((!path || path.length < 2) && pairAttempts < maxPairAttempts) {
                    pairAttempts++;
                    
                    const availableCells = this.getAvailableCells();
                    
                    if (availableCells.length < 2) {
                        break; // –ù–µ—Ç –º–µ—Å—Ç–∞
                    }
                    
                    // –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É
                    if (i === 0) {
                        // –ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞ - –∏–∑ —É–≥–ª–æ–≤
                        const corners = availableCells.filter(c => 
                            (c.row === 0 || c.row === this.gridSize - 1) && 
                            (c.col === 0 || c.col === this.gridSize - 1)
                        );
                        startCell = corners.length > 0 ? 
                            Phaser.Utils.Array.GetRandom(corners) : 
                            Phaser.Utils.Array.GetRandom(availableCells);
                    } else {
                        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–∞–ª–µ–∫–æ –æ—Ç —É–∂–µ —Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
                        startCell = this.selectFarthestCell(availableCells, placedPoints);
                    }
                    
                    // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É
                    startCell.occupied = true;
                    
                    // –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É (–¥–∞–ª–µ–∫–æ –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–π)
                    const remainingCells = this.getAvailableCells();
                    const farCells = remainingCells.filter(c => 
                        this.getDistance(c, startCell) >= minDistance
                    );
                    
                    if (farCells.length === 0) {
                        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏ –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É
                        startCell.occupied = false;
                        continue;
                    }
                    
                    endCell = this.selectFarthestCell(farCells, placedPoints);
                    endCell.occupied = true;
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—É—Ç—å –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
                    path = this.findPathBetweenPoints(startCell, endCell);
                    
                    if (!path || path.length < 2) {
                        // –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–±–µ —Ç–æ—á–∫–∏
                        startCell.occupied = false;
                        endCell.occupied = false;
                        startCell = null;
                        endCell = null;
                        path = null;
                    }
                }
                
                // –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
                if (!path || path.length < 2) {
                    console.log(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${globalAttempt + 1}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É ${i} –∑–∞ ${maxPairAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
                    success = false;
                    break;
                }
                
                // –£—Å–ø–µ—Ö! –ü–æ–º–µ—á–∞–µ–º –≤–µ—Å—å –ø—É—Ç—å –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä
                path.forEach(cell => cell.occupied = true);
                placedPoints.push(startCell, endCell);
                
                paths.push({ path, color, pairIndex: i, start: startCell, end: endCell });
                console.log(`‚úÖ –ü–∞—Ä–∞ ${i}: –ø—É—Ç—å –¥–ª–∏–Ω–æ–π ${path.length} (–ø–æ–ø—ã—Ç–∫–∞ ${pairAttempts})`);
            }
            
            if (!success) {
                continue; // –ü—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ –≤—Å—é –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É
            }
            
            // –£—Å–ø–µ—Ö! –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            paths.forEach(({ path, color, pairIndex, start, end }) => {
                start.color = color;
                start.pairIndex = pairIndex;
                end.color = color;
                end.pairIndex = pairIndex;
                
                // –í–ê–ñ–ù–û: –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –û–°–¢–ê–Æ–¢–°–Ø occupied = true
                // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ
                // –ù–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ –º—ã –∏—Ö "–æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º" –≤–∏–∑—É–∞–ª—å–Ω–æ
                for (let i = 1; i < path.length - 1; i++) {
                    path[i].occupied = false; // –¢–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞!
                }
                
                this.createColoredCircle(start);
                this.createColoredCircle(end);
                
                this.coloredPairs.push({
                    index: pairIndex,
                    color: color,
                    start: start,
                    end: end,
                    connected: false,
                    solutionPath: path
                });
            });
            
            const coverage = paths.reduce((sum, p) => sum + p.path.length, 0);
            console.log(`‚ú® [Flow Free] –£—Å–ø–µ—Ö –∑–∞ ${globalAttempt + 1} –ø–æ–ø—ã—Ç–æ–∫! –ü–æ–∫—Ä—ã—Ç–∏–µ: ${coverage}/${totalCells} (${Math.round(coverage/totalCells*100)}%)`);
            
            return true;
        }
        
        console.warn(`‚ùå [Flow Free] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É –∑–∞ ${maxGlobalAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
        return false;
    }
    
    /**
     * –ü–æ–∏—Å–∫ –ø—É—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è BFS (Breadth-First Search)
     * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å –∑–∞–Ω—è—Ç—ã–º–∏ –∫–ª–µ—Ç–∫–∞–º–∏
     */
    findPathBetweenPoints(start, end) {
        const queue = [[start]];
        const visited = new Set();
        visited.add(`${start.row},${start.col}`);
        
        while (queue.length > 0) {
            const path = queue.shift();
            const current = path[path.length - 1];
            
            // –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏?
            if (current.row === end.row && current.col === end.col) {
                return path;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å–µ–¥–µ–π (–≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ)
            const neighbors = this.getNeighbors(current);
            
            for (const neighbor of neighbors) {
                const key = `${neighbor.row},${neighbor.col}`;
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ
                if (visited.has(key)) continue;
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ (–ù–û –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –º–æ–∂–µ–º –ø–æ—Å–µ—Ç–∏—Ç—å!)
                // –ë–ª–æ–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ü–û–°–õ–ï —Ä–µ—à–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º blocked
                if (neighbor.occupied && !(neighbor.row === end.row && neighbor.col === end.col)) continue;
                
                visited.add(key);
                queue.push([...path, neighbor]);
            }
        }
        
        // –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        return null;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ (–≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ)
     */
    getNeighbors(cell) {
        const neighbors = [];
        const directions = [
            { dr: -1, dc: 0 },  // –≤–≤–µ—Ä—Ö
            { dr: 1, dc: 0 },   // –≤–Ω–∏–∑
            { dr: 0, dc: -1 },  // –≤–ª–µ–≤–æ
            { dr: 0, dc: 1 }    // –≤–ø—Ä–∞–≤–æ
        ];
        
        for (const { dr, dc } of directions) {
            const newRow = cell.row + dr;
            const newCol = cell.col + dc;
            
            if (newRow >= 0 && newRow < this.gridSize && 
                newCol >= 0 && newCol < this.gridSize) {
                neighbors.push(this.grid[newRow][newCol]);
            }
        }
        
        return neighbors;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è "–∑–º–µ–∏–Ω–æ–≥–æ" –ø—É—Ç–∏ - –∏–∑–≤–∏–ª–∏—Å—Ç—ã–π –ø—É—Ç—å, –∑–∞–ø–æ–ª–Ω—è—é—â–∏–π –º–∞–∫—Å–∏–º—É–º –∫–ª–µ—Ç–æ–∫
     */
    generateSnakePath(startCell, targetLength, availableCells) {
        const path = [startCell];
        let currentCell = startCell;
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–µ—Ç–∫—É –∫–∞–∫ –∑–∞–Ω—è—Ç—É—é
        startCell.occupied = true;
        
        for (let step = 0; step < targetLength * 2; step++) { // *2 –¥–ª—è –±–æ–ª—å—à–µ–π –ø–æ–ø—ã—Ç–∫–∏
            const neighbors = this.getUnoccupiedNeighbors(currentCell, path);
            
            if (neighbors.length === 0) {
                break; // –¢—É–ø–∏–∫ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –ø—É—Ç—å –±—ã–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π
            }
            
            // –í—ã–±–∏—Ä–∞–µ–º —Å–æ—Å–µ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥—ë—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
            let bestNeighbor = null;
            let maxFreedom = -1;
            
            for (const neighbor of neighbors) {
                const freedom = this.countFreeNeighbors(neighbor, path);
                if (freedom > maxFreedom) {
                    maxFreedom = freedom;
                    bestNeighbor = neighbor;
                }
            }
            
            if (!bestNeighbor) {
                bestNeighbor = Phaser.Utils.Array.GetRandom(neighbors);
            }
            
            path.push(bestNeighbor);
            currentCell = bestNeighbor;
            
            if (path.length >= targetLength) {
                break; // –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–µ–≤–æ–π –¥–ª–∏–Ω—ã
            }
        }
        
        // –°–Ω–∏–º–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –æ—Ç–º–µ—Ç–∫—É
        startCell.occupied = false;
        
        return path.length >= 2 ? path : null;
    }
    
    /**
     * –ü–æ–¥—Å—á—ë—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π (–¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏)
     */
    countFreeNeighbors(cell, excludePath) {
        return this.getUnoccupiedNeighbors(cell, excludePath).length;
    }
    
    /**
     * –í—ã–±–æ—Ä —Å–∞–º–æ–π –¥–∞–ª—ë–∫–æ–π –∫–ª–µ—Ç–∫–∏ –æ—Ç –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω–µ—á–Ω—ã—Ö —Ç–æ—á–µ–∫
     * @param {Array} existingPathsOrPoints - –º–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π {path} –∏–ª–∏ –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ (–∫–ª–µ—Ç–æ–∫)
     */
    selectFarthestCell(availableCells, existingPathsOrPoints) {
        if (!existingPathsOrPoints || existingPathsOrPoints.length === 0) {
            return Phaser.Utils.Array.GetRandom(availableCells);
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ: –ø—É—Ç–∏ –∏–ª–∏ —Ç–æ—á–∫–∏
        let endpoints = [];
        if (existingPathsOrPoints[0] && existingPathsOrPoints[0].path) {
            // –≠—Ç–æ –º–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π {path}
            existingPathsOrPoints.forEach(({ path }) => {
                endpoints.push(path[0], path[path.length - 1]);
            });
        } else {
            // –≠—Ç–æ –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ (–∫–ª–µ—Ç–æ–∫)
            endpoints = existingPathsOrPoints;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–ª–µ—Ç–∫—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –¥–æ –≤—Å–µ—Ö –∫–æ–Ω–µ—á–Ω—ã—Ö —Ç–æ—á–µ–∫
        let bestCell = null;
        let maxTotalDistance = 0;
        
        availableCells.forEach(cell => {
            const totalDistance = endpoints.reduce((sum, endpoint) => {
                return sum + this.getDistance(cell, endpoint);
            }, 0);
            
            if (totalDistance > maxTotalDistance) {
                maxTotalDistance = totalDistance;
                bestCell = cell;
            }
        });
        
        return bestCell || Phaser.Utils.Array.GetRandom(availableCells);
    }
    
    /**
     * –í—ã–±—Ä–∞—Ç—å –∫–ª–µ—Ç–∫—É —Å —É—á—ë—Ç–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–ø–æ–¥–∞–ª—å—à–µ –æ—Ç —É–∂–µ —Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫)
     */
    selectDistributedCell(availableCells, existingPaths) {
        if (existingPaths.length === 0) {
            // –ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞ - –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ –∏–∑ —É–≥–ª–æ–≤—ã—Ö/–∫—Ä–∞–π–Ω–∏—Ö –ø–æ–∑–∏—Ü–∏–π
            const cornerCells = availableCells.filter(cell => {
                const isCorner = (cell.row === 0 || cell.row === this.gridSize - 1) &&
                                 (cell.col === 0 || cell.col === this.gridSize - 1);
                const isEdge = cell.row === 0 || cell.row === this.gridSize - 1 ||
                               cell.col === 0 || cell.col === this.gridSize - 1;
                return isCorner || isEdge;
            });
            
            return cornerCells.length > 0 ? 
                   Phaser.Utils.Array.GetRandom(cornerCells) : 
                   Phaser.Utils.Array.GetRandom(availableCells);
        }
        
        // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä –≤—ã–±–∏—Ä–∞–µ–º –∫–ª–µ—Ç–∫—É, –∫–æ—Ç–æ—Ä–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–∞–ª–µ–∫–∞ –æ—Ç –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω–µ—á–Ω—ã—Ö —Ç–æ—á–µ–∫
        let bestCell = null;
        let maxMinDistance = 0;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏
        const existingEndpoints = [];
        existingPaths.forEach(({ path }) => {
            existingEndpoints.push(path[0], path[path.length - 1]);
        });
        
        // –î–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –≤—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ—á–µ–∫
        availableCells.forEach(cell => {
            let minDistance = Infinity;
            
            existingEndpoints.forEach(endpoint => {
                const distance = this.getDistance(cell, endpoint);
                if (distance < minDistance) {
                    minDistance = distance;
                }
            });
            
            // –í—ã–±–∏—Ä–∞–µ–º –∫–ª–µ—Ç–∫—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º "–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º"
            if (minDistance > maxMinDistance) {
                maxMinDistance = minDistance;
                bestCell = cell;
            }
        });
        
        return bestCell;
    }
    
    /**
     * –í—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –∫–ª–µ—Ç–∫–∞–º–∏ (–ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ)
     */
    getDistance(cell1, cell2) {
        return Math.abs(cell1.row - cell2.row) + Math.abs(cell1.col - cell2.col);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–∫–∏
     */
    getCellPosition(row, col) {
        return {
            x: this.startX + col * this.cellSize,
            y: this.startY + row * this.cellSize
        };
    }
    
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π –∫–ª–µ—Ç–∫–∏
     */
    getUnoccupiedNeighbors(cell, excludePath = []) {
        const neighbors = [];
        const directions = [
            [-1, -1], [-1, 0], [-1, 1],
            [0, -1],           [0, 1],
            [1, -1],  [1, 0],  [1, 1]
        ];
        
        for (const [dr, dc] of directions) {
            const newRow = cell.row + dr;
            const newCol = cell.col + dc;
            
            if (newRow >= 0 && newRow < this.gridSize && newCol >= 0 && newCol < this.gridSize) {
                const neighbor = this.grid[newRow][newCol];
                
                if (!neighbor.occupied && !excludePath.includes(neighbor)) {
                    neighbors.push(neighbor);
                }
            }
        }
        
        return neighbors;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
     */
    getAvailableCells() {
        const available = [];
        
        for (let row = 0; row < this.gridSize; row++) {
            for (let col = 0; col < this.gridSize; col++) {
                const cell = this.grid[row][col];
                if (!cell.occupied && cell.color === null) {
                    available.push(cell);
                }
            }
        }
        
        return available;
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ç–∫–∏ (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
     */
    clearGrid() {
        for (let row = 0; row < this.gridSize; row++) {
            for (let col = 0; col < this.gridSize; col++) {
                const cell = this.grid[row][col];
                cell.color = null;
                cell.pairIndex = null;
                cell.occupied = false;
                
                if (cell.circle) {
                    cell.circle.destroy();
                    cell.circle = null;
                }
            }
        }
    }
    
    /**
     * –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (fallback)
     */
    generateSimplePairs(pairCount, colors) {
        const allCells = this.getAvailableCells();
        Phaser.Utils.Array.Shuffle(allCells);
        
        for (let i = 0; i < pairCount && allCells.length >= 2; i++) {
            const start = allCells.pop();
            const end = allCells.pop();
            const color = colors[i % colors.length];
            
            start.color = color;
            start.pairIndex = i;
            end.color = color;
            end.pairIndex = i;
            
            this.createColoredCircle(start);
            this.createColoredCircle(end);
            
            this.coloredPairs.push({
                index: i,
                color: color,
                start: start,
                end: end,
                connected: false
            });
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ –∫—Ä—É–≥–∞
     */
    createColoredCircle(cell) {
        const circle = this.add.circle(cell.x, cell.y, 16, cell.color);
        circle.setStrokeStyle(3, 0xffffff);
        circle.setDepth(10);
        cell.circle = circle;
        cell.occupied = true; // –ö–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Å–µ–≥–¥–∞ –∑–∞–Ω—è—Ç—ã
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Å–≤–∞–π–ø—ã)
     */
    setupInput() {
        // –°–æ–∑–¥–∞—ë–º –±–æ–ª—å—à—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        const { width, height } = this.scale;
        const gameArea = this.add.rectangle(width / 2, height / 2, width, height, 0x000000, 0.01);
        gameArea.setInteractive();
        gameArea.setDepth(2);
        
        gameArea.on('pointerdown', (pointer) => {
            this.onPointerDown(pointer);
        });
        
        gameArea.on('pointermove', (pointer) => {
            this.onPointerMove(pointer);
        });
        
        gameArea.on('pointerup', () => {
            this.onPointerUp();
        });
    }
    
    /**
     * –ù–∞—á–∞–ª–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è (—Å–≤–∞–π–ø)
     */
    onPointerDown(pointer) {
        if (!this.isGameActive) return;
        
        const cell = this.getCellAtPosition(pointer.x, pointer.y);
        if (!cell) return;
        
        // –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ü–≤–µ—Ç–Ω–æ–π —Ç–æ—á–∫–∏
        if (cell.color === null) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–∏–Ω–∏—è —ç—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞
        const existingLine = this.lines.find(line => line.pairIndex === cell.pairIndex);
        
        if (existingLine) {
            // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –Ω–∞—á–∞–ª–æ –∏–ª–∏ –∫–æ–Ω–µ—Ü —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–∏–Ω–∏–∏ - —É–¥–∞–ª—è–µ–º –µ—ë
            if (cell === existingLine.start || cell === existingLine.end) {
                this.removeLine(existingLine);
            } else {
                return; // –ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Å —Å–µ—Ä–µ–¥–∏–Ω—ã
            }
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ª–∏–Ω–∏—é
        this.isDrawing = true;
        this.currentLine = {
            pairIndex: cell.pairIndex,
            color: cell.color,
            start: cell,
            path: [cell],
            graphics: this.add.graphics(),
            isComplete: false
        };
        
        this.currentLine.graphics.setDepth(5);
        
        // –†–∏—Å—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
        this.drawCurrentLine();
        
        console.log('üéØ [PatternLockScene] –ù–∞—á–∞–ª–æ –ª–∏–Ω–∏–∏ –æ—Ç:', cell.row, cell.col);
    }
    
    /**
     * –î–≤–∏–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
     */
    onPointerMove(pointer) {
        if (!this.isDrawing || !this.currentLine) return;
        
        const cell = this.getCellAtPosition(pointer.x, pointer.y);
        if (!cell) return;
        
        const lastCell = this.currentLine.path[this.currentLine.path.length - 1];
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞ –∂–µ –∫–ª–µ—Ç–∫–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if (cell === lastCell) return;
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∫–ª–µ—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ (–≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥)
        if (this.currentLine.path.length > 1 && cell === this.currentLine.path[this.currentLine.path.length - 2]) {
            this.currentLine.path.pop();
            lastCell.occupied = false;
            this.drawCurrentLine();
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∫–ª–µ—Ç–∫—É
        if (!this.canAddCell(cell, lastCell)) return;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–µ—Ç–∫—É –≤ –ø—É—Ç—å
        this.currentLine.path.push(cell);
        cell.occupied = true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ –ø–∞—Ä—ã
        const pair = this.coloredPairs.find(p => p.index === this.currentLine.pairIndex);
        if (cell === pair.end || cell === pair.start) {
            if (cell !== this.currentLine.start) {
                this.currentLine.isComplete = true;
                this.finishLine();
                return; // finishLine —É–∂–µ —Ä–∏—Å—É–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –ª–∏–Ω–∏—é
            }
        }
        
        this.drawCurrentLine();
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
     */
    onPointerUp() {
        if (!this.isDrawing) return;
        
        if (this.currentLine && !this.currentLine.isComplete) {
            // –õ–∏–Ω–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - —É–¥–∞–ª—è–µ–º
            this.cancelCurrentLine();
        }
        
        this.isDrawing = false;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–µ—Ç–∫—É
     */
    canAddCell(cell, lastCell) {
        // –ö–ª–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Å–µ–¥–Ω–∏–º–∏
        const dx = Math.abs(cell.col - lastCell.col);
        const dy = Math.abs(cell.row - lastCell.row);
        
        if (dx > 1 || dy > 1 || (dx === 0 && dy === 0)) {
            console.log(`‚ùå –ù–µ —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏: (${lastCell.row},${lastCell.col}) ‚Üí (${cell.row},${cell.col}), dx=${dx}, dy=${dy}`);
            return false;
        }
        
        // –ö–ª–µ—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∂–µ –≤ –ø—É—Ç–∏
        if (this.currentLine.path.includes(cell)) {
            console.log(`‚ùå –ö–ª–µ—Ç–∫–∞ —É–∂–µ –≤ –ø—É—Ç–∏: (${cell.row},${cell.col})`);
            return false;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ü–≤–µ—Ç–Ω–∞—è –∫–ª–µ—Ç–∫–∞ –¥—Ä—É–≥–æ–π –ø–∞—Ä—ã - –Ω–µ–ª—å–∑—è
        if (cell.color !== null && cell.pairIndex !== this.currentLine.pairIndex) {
            console.log(`‚ùå –¶–≤–µ—Ç–Ω–∞—è –∫–ª–µ—Ç–∫–∞ –¥—Ä—É–≥–æ–π –ø–∞—Ä—ã: (${cell.row},${cell.col}), —Ü–≤–µ—Ç: ${cell.color}, —Ç–µ–∫—É—â–∞—è –ø–∞—Ä–∞: ${this.currentLine.pairIndex}, –ø–∞—Ä–∞ –∫–ª–µ—Ç–∫–∏: ${cell.pairIndex}`);
            return false;
        }
        
        // –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–æ–π –ª–∏–Ω–∏–µ–π - –Ω–µ–ª—å–∑—è
        if (cell.occupied && cell.color === null) {
            console.log(`‚ùå –ö–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–æ–π –ª–∏–Ω–∏–µ–π: (${cell.row},${cell.col})`);
            return false;
        }
        
        console.log(`‚úÖ –ö–ª–µ—Ç–∫—É –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: (${cell.row},${cell.col})`);
        return true;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–ª–µ—Ç–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
     */
    getCellAtPosition(x, y) {
        for (let row = 0; row < this.gridSize; row++) {
            for (let col = 0; col < this.gridSize; col++) {
                const cell = this.grid[row][col];
                const distance = Phaser.Math.Distance.Between(x, y, cell.x, cell.y);
                if (distance < this.cellSize / 2) {
                    return cell;
                }
            }
        }
        return null;
    }
    
    /**
     * –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ª–∏–Ω–∏–∏
     */
    drawCurrentLine() {
        if (!this.currentLine) return;
        
        const graphics = this.currentLine.graphics;
        graphics.clear();
        
        const path = this.currentLine.path;
        
        // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞ - —Ä–∏—Å—É–µ–º —Ç–æ—á–∫—É
        if (path.length === 1) {
            graphics.fillStyle(this.currentLine.color, 0.3);
            graphics.fillCircle(path[0].x, path[0].y, 8);
            return;
        }
        
        // –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é
        graphics.lineStyle(10, this.currentLine.color, 0.7);
        graphics.beginPath();
        graphics.moveTo(path[0].x, path[0].y);
        
        for (let i = 1; i < path.length; i++) {
            graphics.lineTo(path[i].x, path[i].y);
        }
        
        graphics.strokePath();
        
        console.log('üé® [PatternLockScene] –õ–∏–Ω–∏—è –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–∞, —Ç–æ—á–µ–∫:', path.length);
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ª–∏–Ω–∏–∏
     */
    finishLine() {
        if (!this.currentLine) return;
        
        console.log('‚úÖ [PatternLockScene] –õ–∏–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—É—Ç—å:', this.currentLine.path.map(c => `${c.row},${c.col}`).join(' ‚Üí '));
        
        // –í–ê–ñ–ù–û: –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ª–∏–Ω–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        this.drawCompletedLine(this.currentLine);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–Ω–∏—é
        this.lines.push(this.currentLine);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—ã
        const pair = this.coloredPairs.find(p => p.index === this.currentLine.pairIndex);
        if (pair) {
            pair.connected = true;
        }
        
        this.currentLine = null;
        this.isDrawing = false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        this.checkCompletion();
    }
    
    /**
     * –†–∏—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ (—Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å—Ç–∏–ª–µ–º)
     */
    drawCompletedLine(line) {
        const graphics = line.graphics;
        graphics.clear();
        
        const path = line.path;
        
        if (path.length < 2) {
            console.warn('‚ö†Ô∏è –õ–∏–Ω–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏');
            return;
        }
        
        // –†–∏—Å—É–µ–º —Ç–æ–ª—Å—Ç—É—é –ª–∏–Ω–∏—é
        graphics.lineStyle(10, line.color, 0.8);
        graphics.beginPath();
        graphics.moveTo(path[0].x, path[0].y);
        
        for (let i = 1; i < path.length; i++) {
            graphics.lineTo(path[i].x, path[i].y);
        }
        
        graphics.strokePath();
        
        console.log('üé® [PatternLockScene] –ó–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –ª–∏–Ω–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞, —Ç–æ—á–µ–∫:', path.length);
    }
    
    /**
     * –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –ª–∏–Ω–∏–∏
     */
    cancelCurrentLine() {
        if (!this.currentLine) return;
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ (–∫—Ä–æ–º–µ –Ω–∞—á–∞–ª—å–Ω–æ–π)
        this.currentLine.path.forEach((cell, index) => {
            if (index > 0 && cell.color === null) {
                cell.occupied = false;
            }
        });
        
        this.currentLine.graphics.destroy();
        this.currentLine = null;
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏
     */
    removeLine(line) {
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–ª–µ—Ç–∫–∏
        line.path.forEach((cell, index) => {
            if (cell.color === null) {
                cell.occupied = false;
            }
        });
        
        // –£–¥–∞–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫—É
        line.graphics.destroy();
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞
        const index = this.lines.indexOf(line);
        if (index > -1) {
            this.lines.splice(index, 1);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—ã
        const pair = this.coloredPairs.find(p => p.index === line.pairIndex);
        if (pair) {
            pair.connected = false;
        }
        
        console.log('üóëÔ∏è [PatternLockScene] –õ–∏–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞');
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏
     */
    checkCompletion() {
        const allConnected = this.coloredPairs.every(pair => pair.connected);
        
        if (!allConnected) return;
        
        console.log('üéØ [PatternLockScene] –í—Å–µ –ø–∞—Ä—ã —Å–æ–µ–¥–∏–Ω–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–Ω—è—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
        // –í –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π Flow Free —ç—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        
        // –£—Å–ø–µ—Ö!
        this.time.delayedCall(300, () => {
            this.onSuccess();
        });
    }
    
    /**
     * DEBUG: –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
     */
    showSolution() {
        console.log('üîç [DEBUG] –ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ—à–µ–Ω–∏–µ...');
        
        // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å—ë
        this.resetAllLines();
        
        // –†–∏—Å—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
        this.coloredPairs.forEach(pair => {
            if (!pair.solutionPath || pair.solutionPath.length < 2) {
                console.warn('‚ö†Ô∏è –£ –ø–∞—Ä—ã –Ω–µ—Ç —Ä–µ—à–µ–Ω–∏—è!', pair);
                return;
            }
            
            const path = pair.solutionPath.map(cell => ({
                row: cell.row,
                col: cell.col
            }));
            
            const graphics = this.add.graphics();
            graphics.lineStyle(8, pair.color, 0.7);
            graphics.setDepth(1);
            
            // –†–∏—Å—É–µ–º –ø—É—Ç—å
            const startPos = this.getCellPosition(path[0].row, path[0].col);
            graphics.beginPath();
            graphics.moveTo(startPos.x, startPos.y);
            
            for (let i = 1; i < path.length; i++) {
                const pos = this.getCellPosition(path[i].row, path[i].col);
                graphics.lineTo(pos.x, pos.y);
            }
            
            graphics.strokePath();
            
            this.lines.push({
                pairIndex: pair.index,
                path: path.map(p => this.grid[p.row][p.col]),
                graphics: graphics
            });
            
            pair.connected = true;
            
            console.log(`‚úÖ –ü–∞—Ä–∞ ${pair.index}: —Ä–µ—à–µ–Ω–∏–µ –∏–∑ ${path.length} –∫–ª–µ—Ç–æ–∫`);
        });
        
        console.log('‚ú® [DEBUG] –†–µ—à–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ!');
        this.checkCompletion();
    }
    
    /**
     * –°–±—Ä–æ—Å –≤—Å–µ—Ö –ª–∏–Ω–∏–π
     */
    resetAllLines() {
        console.log('üîÑ [PatternLockScene] –°–±—Ä–æ—Å –≤—Å–µ—Ö –ª–∏–Ω–∏–π');
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–∏–Ω–∏–∏
        [...this.lines].forEach(line => {
            this.removeLine(line);
        });
        
        // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ª–∏–Ω–∏—é
        if (this.currentLine) {
            this.cancelCurrentLine();
        }
        
        this.isDrawing = false;
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ü–µ–Ω—ã
     */
    shutdown() {
        super.shutdown();
        
        console.log('üßπ [PatternLockScene] –û—á–∏—Å—Ç–∫–∞ —Å—Ü–µ–Ω—ã...');
        
        // –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏
        if (this.lines) {
            this.lines.forEach(line => {
                if (line.graphics) {
                    line.graphics.destroy();
                }
            });
            this.lines = [];
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–∏–Ω–∏—é –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        if (this.currentLine) {
            if (this.currentLine.graphics) {
                this.currentLine.graphics.destroy();
            }
            this.currentLine = null;
        }
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
        if (this.gridGraphics) {
            this.gridGraphics.destroy();
            this.gridGraphics = null;
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–æ—á–∫–∏ —Å–µ—Ç–∫–∏
        if (this.grid) {
            for (let row = 0; row < this.gridSize; row++) {
                for (let col = 0; col < this.gridSize; col++) {
                    const cell = this.grid[row][col];
                    if (cell && cell.circle) {
                        cell.circle.destroy();
                        cell.circle = null;
                    }
                }
            }
            this.grid = [];
        }
        
        // –û—á–∏—â–∞–µ–º –ø–∞—Ä—ã
        if (this.coloredPairs) {
            this.coloredPairs = [];
        }
        
        // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤
        this.isDrawing = false;
        this.selectedPoint = null;
        
        console.log('‚úÖ [PatternLockScene] –°—Ü–µ–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
    }
}
