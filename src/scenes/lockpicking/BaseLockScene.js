/**
 * –ë–∞–∑–æ–≤–∞—è —Å—Ü–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–∑–ª–æ–º–∞ –∑–∞–º–∫–æ–≤
 * –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â—É—é –ª–æ–≥–∏–∫—É: UI, —Ç–∞–π–º–µ—Ä, –ø–æ–ø—ã—Ç–∫–∏, —Ä–∞–±–æ—Ç–∞ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
 */

export class BaseLockScene extends Phaser.Scene {
    constructor(key) {
        super({ key });
        
        // –î–∞–Ω–Ω—ã–µ –∑–∞–º–∫–∞ –∏ –ø–∏—Ç–æ–º—Ü–∞
        this.lock = null;
        this.pet = null;
        this.lockType = null;
        this.lockLevel = 1;
        this.config = null;
        this.cost = 1;
        
        // –ò–≥—Ä–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        this.attempts = 0;
        this.maxAttempts = 3;
        this.timeLeft = 0;
        this.timer = null;
        this.isGameActive = false;
        
        // UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.timerText = null;
        this.attemptsText = null;
        this.infoText = null;
        this.cancelButton = null;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
     */
    init(data) {
        console.log(`üîì [${this.scene.key}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:`, data);
        
        this.lock = data.lock;
        this.pet = data.pet;
        this.lockType = data.lockType;
        this.lockLevel = data.lockLevel || 1;
        this.config = data.config || {};
        this.cost = data.cost || 1;
        
        this.attempts = 0;
        this.maxAttempts = this.config.maxAttempts || 3;
        this.timeLeft = this.config.timeLimit || 0;
        this.isGameActive = false;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ü–µ–Ω—ã
     */
    create() {
        const { width, height } = this.scale;
        
        // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
        this.add.rectangle(width / 2, height / 2, width, height, 0x000000, 0.8).setDepth(0);
        
        console.log(`üîì [${this.scene.key}] –ë–∞–∑–æ–≤–∞—è —Å—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞`);
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ Phaser Graphics –∏ Text
     */
    createButton(x, y, width, height, text, style = {}) {
        // –§–æ–Ω –∫–Ω–æ–ø–∫–∏ - Graphics —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        const bg = this.add.graphics();
        bg.fillStyle(style.backgroundColor || 0x333333, 1);
        bg.fillRoundedRect(x - width/2, y - height/2, width, height, 8);
        bg.lineStyle(2, style.borderColor || 0x666666, 1);
        bg.strokeRoundedRect(x - width/2, y - height/2, width, height, 8);
        bg.setDepth(10);
        
        // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        const label = this.add.text(x, y, text, {
            fontSize: style.fontSize || '16px',
            fontFamily: 'Arial',
            color: style.color || '#ffffff',
            fontStyle: style.fontWeight || 'normal'
        }).setOrigin(0.5).setDepth(11);
        
        // –î–µ–ª–∞–µ–º Graphics –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –Ω–∞–ø—Ä—è–º—É—é
        bg.setInteractive(
            new Phaser.Geom.Rectangle(x - width/2, y - height/2, width, height), 
            Phaser.Geom.Rectangle.Contains
        );
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–≤–µ–¥–µ–Ω–∏—è
        bg.on('pointerover', () => {
            bg.clear();
            bg.fillStyle(style.hoverColor || 0x555555, 1);
            bg.fillRoundedRect(x - width/2, y - height/2, width, height, 8);
            bg.lineStyle(2, style.borderColor || 0x666666, 1);
            bg.strokeRoundedRect(x - width/2, y - height/2, width, height, 8);
        });
        
        bg.on('pointerout', () => {
            bg.clear();
            bg.fillStyle(style.backgroundColor || 0x333333, 1);
            bg.fillRoundedRect(x - width/2, y - height/2, width, height, 8);
            bg.lineStyle(2, style.borderColor || 0x666666, 1);
            bg.strokeRoundedRect(x - width/2, y - height/2, width, height, 8);
        });
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å bg –∫–∞–∫ container –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return { container: bg, bg, label, x, y, width, height };
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ UI (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ—á–µ—Ä–Ω–∏–º–∏ –∫–ª–∞—Å—Å–∞–º–∏)
     */
    createBaseUI(title) {
        const { width, height } = this.scale;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        this.add.text(width / 2, 80, title, {
            fontSize: '28px',
            fontFamily: 'Arial',
            color: '#ffffff',
            stroke: '#000000',
            strokeThickness: 4,
            fontStyle: 'bold'
        }).setOrigin(0.5).setDepth(10);
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        const infoY = 120;
        this.infoText = this.add.text(width / 2, infoY, `–£—Ä–æ–≤–µ–Ω—å: ${this.lockLevel} | –°—Ç–æ–∏–º–æ—Å—Ç—å: ${this.cost} –æ—Ç–º—ã—á–µ–∫`, {
            fontSize: '16px',
            fontFamily: 'Arial',
            color: '#ffff00',
            stroke: '#000000',
            strokeThickness: 2
        }).setOrigin(0.5).setDepth(10);
        
        // –ü–æ–ø—ã—Ç–∫–∏
        const attemptsY = infoY + 30;
        this.attemptsText = this.add.text(width / 2, attemptsY, `–ü–æ–ø—ã—Ç–∫–∏: ${this.maxAttempts - this.attempts}/${this.maxAttempts}`, {
            fontSize: '18px',
            fontFamily: 'Arial',
            color: '#00ff00',
            stroke: '#000000',
            strokeThickness: 2
        }).setOrigin(0.5).setDepth(10);
        
        // –¢–∞–π–º–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏)
        if (this.timeLeft > 0) {
            const timerY = attemptsY + 30;
            this.timerText = this.add.text(width / 2, timerY, `‚è±Ô∏è –í—Ä–µ–º—è: ${this.timeLeft}—Å`, {
                fontSize: '18px',
                fontFamily: 'Arial',
                color: '#00ffff',
                stroke: '#000000',
                strokeThickness: 2
            }).setOrigin(0.5).setDepth(10);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            this.startTimer();
        }
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã (—É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
        this.cancelButton = this.createButton(width / 2, height - 50, 180, 50, '‚ùå –û—Ç–º–µ–Ω–∞', {
            fontSize: '18px',
            backgroundColor: 0xf44336,
            borderColor: 0xda190b,
            hoverColor: 0xda190b
        });
        this.cancelButton.container.on('pointerdown', () => this.cancel());
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
     */
    startTimer() {
        if (this.timeLeft <= 0) return;
        
        this.timer = this.time.addEvent({
            delay: 1000,
            callback: () => {
                this.timeLeft--;
                
                if (this.timerText) {
                    this.timerText.setText(`‚è±Ô∏è –í—Ä–µ–º—è: ${this.timeLeft}—Å`);
                    
                    // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –∫–æ–≥–¥–∞ –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏
                    if (this.timeLeft <= 10) {
                        this.timerText.setColor('#ff0000');
                    }
                }
                
                // –í—Ä–µ–º—è –≤—ã—à–ª–æ
                if (this.timeLeft <= 0) {
                    this.onTimeOut();
                }
            },
            loop: true
        });
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
     */
    stopTimer() {
        if (this.timer) {
            this.timer.destroy();
            this.timer = null;
        }
    }
    
    /**
     * –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
     */
    incrementAttempts() {
        this.attempts++;
        
        if (this.attemptsText) {
            this.attemptsText.setText(`–ü–æ–ø—ã—Ç–∫–∏: ${this.maxAttempts - this.attempts}/${this.maxAttempts}`);
            
            // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
            if (this.attempts >= this.maxAttempts - 1) {
                this.attemptsText.setColor('#ff0000');
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫
        if (this.attempts >= this.maxAttempts) {
            this.onFailure();
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    showMessage(text, color = '#ffffff', duration = 2000) {
        const { width, height } = this.scale;
        
        const message = this.add.text(width / 2, height / 2, text, {
            fontSize: '24px',
            fontFamily: 'Arial',
            color: color,
            stroke: '#000000',
            strokeThickness: 4,
            align: 'center',
            fontStyle: 'bold'
        }).setOrigin(0.5).setDepth(1000);
        
        this.time.delayedCall(duration, () => {
            message.destroy();
        });
    }
    
    /**
     * –≠—Ñ—Ñ–µ–∫—Ç —É—Å–ø–µ—Ö–∞
     */
    successEffect() {
        const { width, height } = this.scale;
        
        // –ó–µ–ª–µ–Ω–∞—è –≤—Å–ø—ã—à–∫–∞
        const flash = this.add.rectangle(width / 2, height / 2, width, height, 0x00ff00, 0.3);
        flash.setDepth(999);
        
        this.tweens.add({
            targets: flash,
            alpha: 0,
            duration: 500,
            onComplete: () => flash.destroy()
        });
        
        // –°–æ–æ–±—â–µ–Ω–∏–µ
        this.showMessage('‚úÖ –ó–ê–ú–û–ö –í–ó–õ–û–ú–ê–ù!', '#00ff00', 1500);
    }
    
    /**
     * –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–≤–∞–ª–∞
     */
    failureEffect() {
        // –ö—Ä–∞—Å–Ω–∞—è –≤—Å–ø—ã—à–∫–∞
        const { width, height } = this.scale;
        const flash = this.add.rectangle(width / 2, height / 2, width, height, 0xff0000, 0.3);
        flash.setDepth(999);
        
        this.tweens.add({
            targets: flash,
            alpha: 0,
            duration: 500,
            onComplete: () => flash.destroy()
        });
        
        // –¢—Ä—è—Å–∫–∞ —ç–∫—Ä–∞–Ω–∞
        this.cameras.main.shake(200, 0.01);
        
        // –°–æ–æ–±—â–µ–Ω–∏–µ
        this.showMessage('‚ùå –û–¢–ú–´–ß–ö–ê –°–õ–û–ú–ê–õ–ê–°–¨!', '#ff0000', 1500);
    }
    
    /**
     * –£—Å–ø–µ—à–Ω—ã–π –≤–∑–ª–æ–º
     */
    onSuccess() {
        if (!this.isGameActive) return;
        
        console.log(`‚úÖ [${this.scene.key}] –£—Å–ø–µ—à–Ω—ã–π –≤–∑–ª–æ–º!`);
        
        this.isGameActive = false;
        this.stopTimer();
        
        // –≠—Ñ—Ñ–µ–∫—Ç —É—Å–ø–µ—Ö–∞
        this.successEffect();
        
        // –í—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
        this.time.delayedCall(1500, () => {
            this.exitLockpicking(true);
        });
    }
    
    /**
     * –ü—Ä–æ–≤–∞–ª –≤–∑–ª–æ–º–∞
     */
    onFailure() {
        if (!this.isGameActive) return;
        
        console.log(`‚ùå [${this.scene.key}] –ü—Ä–æ–≤–∞–ª –≤–∑–ª–æ–º–∞!`);
        
        this.isGameActive = false;
        this.stopTimer();
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–≤–∞–ª–∞
        this.failureEffect();
        
        // –í—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
        this.time.delayedCall(1500, () => {
            this.exitLockpicking(false);
        });
    }
    
    /**
     * –í—Ä–µ–º—è –≤—ã—à–ª–æ
     */
    onTimeOut() {
        console.log(`‚è∞ [${this.scene.key}] –í—Ä–µ–º—è –≤—ã—à–ª–æ!`);
        this.showMessage('‚è∞ –í–†–ï–ú–Ø –í–´–®–õ–û!', '#ff0000');
        this.time.delayedCall(1000, () => {
            this.onFailure();
        });
    }
    
    /**
     * –û—Ç–º–µ–Ω–∞ –≤–∑–ª–æ–º–∞
     */
    cancel() {
        console.log(`üö´ [${this.scene.key}] –û—Ç–º–µ–Ω–∞ –≤–∑–ª–æ–º–∞`);
        this.exitLockpicking(false);
    }
    
    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã –≤–∑–ª–æ–º–∞
     */
    exitLockpicking(success) {
        console.log(`üö™ [${this.scene.key}] –í—ã—Ö–æ–¥. –£—Å–ø–µ—Ö:`, success);
        
        this.stopTimer();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        if (this.cancelButton) {
            if (this.cancelButton.element) {
                this.cancelButton.element.style.display = 'none';
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–º—ã—á–∫–∏
        if (this.pet && this.pet.inventory) {
            const currentLockpicks = this.pet.inventory.get('lockpicks');
            this.pet.inventory.set('lockpicks', currentLockpicks - this.cost);
        }
        
        // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫–∏ –∑–∞–º–∫–∞
        if (this.lock) {
            if (success && this.lock.onPickSuccess) {
                this.lock.onPickSuccess();
            } else if (!success && this.lock.onPickFailed) {
                this.lock.onPickFailed();
            }
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ü–µ–Ω—É
        this.scene.stop();
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ü–µ–Ω—ã
     */
    shutdown() {
        this.stopTimer();
        
        // –£–¥–∞–ª—è–µ–º HTML –∫–Ω–æ–ø–∫—É
        if (this.cancelButton) {
            this.cancelButton.destroy();
            this.cancelButton = null;
        }
    }
}

