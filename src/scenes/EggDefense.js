import Phaser from 'phaser';
import { Egg } from '../objects/Egg.js';
import { Enemy } from '../objects/Enemy.js';
import { WaveSystem } from '../systems/WaveSystem.js';
import { GestureSystem } from '../systems/GestureSystem.js';
import { GestureActionSystem } from '../systems/GestureActionSystem.js';
import { ProbabilitySystem } from '../systems/ProbabilitySystem.js';
import { EffectSystem } from '../systems/EffectSystem.js';
import { EventSystem } from '../systems/EventSystem.js';
import { AbilitySystem } from '../systems/AbilitySystem.js';
import { EffectHandler } from '../handlers/EffectHandler.js';
import { EnemyEffectSystem } from '../systems/EnemyEffectSystem.js';
import { EVENT_TYPES } from '../types/EventTypes.js';
import { BACKGROUND_SETTINGS, DEPTH_CONSTANTS } from '../settings/GameSettings.js';
import { ABILITIES } from '../types/abilityTypes.js';
import { BackgroundUtils } from '../utils/BackgroundUtils.js';
import { SafeAreaUtils } from '../utils/SafeAreaUtils.js';
import { TelegramTimer } from '../components/TelegramTimer.js';
import { HTMLResultsTable } from '../components/HTMLResultsTable.js';
import { AbilitiesDisplay } from '../components/AbilitiesDisplay.js';

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è —Å—Ü–µ–Ω–∞ EggDefense
 * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
export class EggDefense extends Phaser.Scene {
    constructor() {
        super({ key: 'EggDefense' });
        this.isGameEnded = false;
        this.isGameStarted = false;
        this.isPaused = false;
        this.focusChangeTimeout = null;
        this.resultsTable = null;
        this.resultsTableRestartHandler = null;
        this.resultsTableMenuHandler = null;
        this.gameStartTime = null;
        
    }

    create() {
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
        this.isGameEnded = false;
        this.isPaused = false;
        this.gameStartTime = null;
        this.isGameStarted = false; // –í–∞–∂–Ω–æ! –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        this.createGameObjects();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
        this.initGameSystems();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI (–±–µ–∑ —Ç–∞–π–º–µ—Ä–∞)
        this.setupUI();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∞–≤–∏—à
        this.setupKeyboardHandlers();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
        this.setupResizeHandler();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –ø–∞—É–∑—ã
        this.setupFocusHandlers();
        
        // HTML –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —É–¥–∞–ª–µ–Ω–æ
        
        // –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º–µ—Ç "–ò–ì–†–ê–¢–¨"
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
     */
    initGameSystems() {
        // –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è)
        this.eventSystem = new EventSystem();
        
        // –°–∏—Å—Ç–µ–º–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        this.abilitySystem = new AbilitySystem(this);
        
        // –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)
        this.probabilitySystem = new ProbabilitySystem(this);
        this.probabilitySystem.init();
        
        // –°–∏—Å—Ç–µ–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        this.effectSystem = new EffectSystem(this);
        
        // –ú–∞—Å—Å–∏–≤ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (—è–º)
        this.defenses = [];
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (Event-Driven Architecture)
        this.effectHandler = new EffectHandler(this, this.eventSystem);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –≤ –∫–ª–∞—Å—Å–µ Enemy
        Enemy.initDropSystems(this, this.egg, this.probabilitySystem, this.abilitySystem);
        Enemy.initEventSystem(this.eventSystem);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –≤—Ä–∞–≥–æ–≤
        this.enemyEffectSystem = new EnemyEffectSystem(this);
        Enemy.initEffectSystem(this.enemyEffectSystem);
        
        // –°–∏—Å—Ç–µ–º–∞ –≤–æ–ª–Ω –¥–ª—è —Å–ø–∞–≤–Ω–∞ –≤—Ä–∞–≥–æ–≤
        this.waveSystem = new WaveSystem(this, this.probabilitySystem);
        
        // –°–∏—Å—Ç–µ–º–∞ –∂–µ—Å—Ç–æ–≤
        this.gestureSystem = new GestureSystem(this, {
            onTap: (gesture) => this.handleGesture(gesture),
            onLongTap: (gesture) => this.handleGesture(gesture),
            onLine: (gesture) => this.handleGesture(gesture),
            onCircle: (gesture) => this.handleGesture(gesture),
            onTriangle: (gesture) => this.handleGesture(gesture)
        });
        
        // –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–µ—Å—Ç–æ–≤
        this.gestureActionSystem = new GestureActionSystem(
            this, 
            this.waveSystem.enemies, 
            this.defenses, // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            this.egg,
            Enemy.itemDropSystem, // –ü–µ—Ä–µ–¥–∞–µ–º ItemDropSystem –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            this.abilitySystem // –ü–µ—Ä–µ–¥–∞–µ–º AbilitySystem –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        );
        
        // –ü–µ—Ä–µ–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —è–π—Ü—É
        if (this.egg && this.abilitySystem) {
            this.egg.abilitySystem = this.abilitySystem;
            this.egg.scene.events.on('ability:upgraded', this.egg.onAbilityUpgraded, this.egg);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
            this.egg.updateAura();
            this.egg.updateEggExplosion();
            
            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ–º –≤–∑—Ä—ã–≤ —è–π—Ü–∞
            if (this.egg.eggExplosion <= 0) {
                this.abilitySystem.upgradeAbility('EGG_EXPLOSION');
                this.egg.updateEggExplosion();
            }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–π—Ü–æ –∫–∞–∫ —Ü–µ–ª—å –¥–ª—è –≤–æ–ª–Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        this.waveSystem.setTarget(this.egg);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∞–≤–Ω–∞ –≤—Ä–∞–≥–æ–≤ –æ—Ç –æ—Å—ã –∏ –¥—Ä—É–≥–∏—Ö —Å–ø–∞–≤–Ω–µ—Ä–æ–≤
        this.events.on('enemy:spawn', (spawnData) => {
            if (this.gameObject?.enemyType === 'wasp') {
            }
            
            if (spawnData.enemyType && spawnData.x && spawnData.y) {
                // –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–∞ –Ω–∞–ø—Ä—è–º—É—é, –∫–∞–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ü–µ–Ω–µ
                const enemy = this.createEnemy(spawnData.enemyType, spawnData.x, spawnData.y);
                
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–ª–µ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å launchEffect
                if (spawnData.launchEffect && spawnData.launchEffect.enabled && enemy && this.effectSystem) {
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–ª–µ—Ç–∞
                    this.effectSystem.applyEffect('launchEffect', enemy, 1.0, {
                        duration: spawnData.launchEffect.duration || 1000
                    });
                    
                }
                
                // –ï—Å–ª–∏ —Å–ø–∞–≤–Ω–∏–º—ã–π –≤—Ä–∞–≥ - —Å–Ω–∞—Ä—è–¥, –∏ –µ—Å—Ç—å —Ü–µ–ª—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
                if (spawnData.enemyType === 'projectile' && spawnData.target && enemy && enemy.aiCoordinator) {
                    if (this.gameObject?.enemyType === 'wasp') {
                    }
                    enemy.aiCoordinator.setTarget(spawnData.target);
                }
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∞ –º—ë–¥–∞ - –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–¥–Ω—è—Ç–∏–∏ –ª–æ–ø–∞—Ç—ã)
        this.events.on('ability:upgraded', () => {
            if (this.abilitiesDisplay) {
                this.abilitiesDisplay.updateValues();
            }
        });
        this.events.on('abilities:reset', () => {
            if (this.abilitiesDisplay) {
                this.abilitiesDisplay.updateValues();
            }
        });
        
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
     */
    createGameObjects() {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–≤—è–Ω–æ–≥–æ —Ñ–æ–Ω–∞
        this.grassBackground = BackgroundUtils.createAnimatedGrassBackground(this, BACKGROUND_SETTINGS);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –Ω–∞ —Å–∞–º—ã–π –Ω–∏–∂–Ω–∏–π —Å–ª–æ–π
        this.grassBackground.setDepth(DEPTH_CONSTANTS.BACKGROUND);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —è–π—Ü–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞ (abilitySystem –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–∑–∂–µ)
        this.egg = Egg.CreateEgg(
            this, 
            this.scale.width / 2, 
            this.scale.height / 2,
            {
                health: ABILITIES.EGG_HEALTH.baseValue,
                texture: 'ü•ö',
                spriteKey: 'egg',
                size: 2
            }
        );
        
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∞–≤–∏—à
     */
    setupKeyboardHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Space –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–∞–±–ª–∏—Ü—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        this.input.keyboard?.on('keydown-SPACE', () => {
            this.toggleAbilitiesTable();
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
     */
    toggleAbilitiesTable() {
        if (!this.abilitySystem) return;
        
        if (this.abilitiesDisplay) {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
            this.abilitiesDisplay.setVisible(!this.abilitiesDisplay.visible);
        } else {
            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            this.createAbilitiesDisplay();
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
     */
    createAbilitiesDisplay() {
        if (!this.abilitySystem) return;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º safe-area
        const abilitiesX = SafeAreaUtils.getSafeRightPosition(this.scale.width, this.scale.width - 100, 200);
        const abilitiesY = SafeAreaUtils.getSafeTopPosition(100, 100);
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–ª–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        this.abilitiesDisplay = new AbilitiesDisplay(
            this,
            abilitiesX,
            abilitiesY,
            this.abilitySystem,
            {
                width: 180,
                height: 250,
                backgroundColor: 0x000000,
                backgroundAlpha: 0.9,
                borderColor: 0x00ff00,
                borderWidth: 2,
                textColor: '#ffffff',
                fontSize: '10px',
                padding: 8,
                lineHeight: 12
            }
        );
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.abilitiesDisplay.setDepth(1000);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
     */
    setupResizeHandler() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.scale.on('resize', () => {
            this.updateUIPositions();
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
     */
    setupUI() {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–ª–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —Å —É—á–µ—Ç–æ–º safe-area
        const safeAreaRight = SafeAreaUtils.getSafeAreaRight();
        const safeAreaTop = SafeAreaUtils.getSafeAreaTop();
        const abilitiesX = SafeAreaUtils.getSafeRightPosition(this.scale.width, this.scale.width - 100, 200);
        const abilitiesY = SafeAreaUtils.getSafeTopPosition(100, 100);
        
        // HTML –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –≤ –∫–æ–Ω—Ü–µ create()
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∏–≥—Ä—ã
     */
    createTimer() {
        // –í—ã—á–∏—Å–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º safe-area
        const safeAreaTop = SafeAreaUtils.getSafeAreaTop();
        const timerY = SafeAreaUtils.getSafeTopPosition(30, 40);
        
        // –°–æ–∑–¥–∞–µ–º Telegram WebApp-—Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä —Å —Ç–æ—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        this.telegramTimer = new TelegramTimer(
            this,
            this.scale.width / 2,
            timerY,
            70,  // –®–∏—Ä–∏–Ω–∞ (—Ç–æ—á–Ω–∞—è –∫–∞–∫ —É –∫–Ω–æ–ø–æ–∫ WebApp)
            36   // –í—ã—Å–æ—Ç–∞ (—Ç–æ—á–Ω–∞—è –∫–∞–∫ —É –∫–Ω–æ–ø–æ–∫ WebApp)
        );
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
     */
    updateTimer() {
        if (!this.telegramTimer || !this.waveSystem || !this.isGameStarted) {
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if (this.waveSystem.isGameActive) {
            this.telegramTimer.setVisible(true);
            
            const remainingTime = this.waveSystem.getRemainingTime();
            const minutes = Math.floor(remainingTime / 60000);
            const seconds = Math.floor((remainingTime % 60000) / 1000);
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
            const timeString = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            this.telegramTimer.setText(timeString);
            
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
            if (remainingTime <= 60000) { // –ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–Ω—É—Ç–∞ - –∫—Ä–∞—Å–Ω—ã–π
                this.telegramTimer.setColor('#ff3b30'); // iOS red
            } else if (remainingTime <= 180000) { // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–∏–Ω—É—Ç—ã - –∂–µ–ª—Ç—ã–π
                this.telegramTimer.setColor('#ffcc00'); // iOS yellow
            } else { // –û–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è - –±–µ–ª—ã–π
                this.telegramTimer.setColor('#ffffff'); // –ë–µ–ª—ã–π
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ canvas (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if (this.game && this.game.canvas) {
                this.telegramTimer.updatePosition();
            }
        } else {
            // –°–∫—Ä—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
            this.telegramTimer.setVisible(false);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
     */
    updateTimerPosition() {
        if (!this.telegramTimer || !this.isGameStarted) return;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        const timerY = SafeAreaUtils.getSafeTopPosition(30, 40);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–∞–π–º–µ—Ä–∞
        this.telegramTimer.setPosition(this.scale.width / 2, timerY);
        this.telegramTimer.updatePosition();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
     */
    updateUIPositions() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–∞–π–º–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
        if (this.isGameStarted) {
            this.updateTimerPosition();
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –∏–∑ –º–µ–Ω—é
     */
    startGameFromMenu() {
        
        this.isGameStarted = true;
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        if (this.scene?.time?.now !== undefined) {
            this.gameStartTime = this.scene.time.now;
        } else {
            this.gameStartTime = Date.now();
        }
        
        this.startGame();
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
     */
    startGame() {
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
        this.createTimer();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        this.eventSystem.emit(EVENT_TYPES.GAME_START, {
            scene: this
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ–ª–Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        this.waveSystem.startGame();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–µ—Å—Ç–æ–≤
     */
    handleGesture(gesture) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –¥–µ–π—Å—Ç–≤–∏–π
        this.gestureActionSystem.updateObjects(
            this.waveSystem.enemies, 
            this.defenses // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        );
        
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–µ—Å—Ç
        const success = this.gestureActionSystem.handleGesture(gesture);
        
        if (success) {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —á–µ—Ä–µ–∑ EffectSystem
        }
        
        return success;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
     */
    checkGameEnd() {
        if (this.isGameEnded || !this.isGameStarted) return;
        
        const timeUp = this.waveSystem.getRemainingTime() <= 0;
        const eggDestroyed = !this.egg || this.egg.health <= 0;
        
        if (timeUp || eggDestroyed) {
            this.gameOver(timeUp && !eggDestroyed);
        }
    }
    
    /**
     * –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    gameOver(won = false) {
        this.isGameEnded = true;
        
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        this.eventSystem.emit(EVENT_TYPES.GAME_END, {
            scene: this,
            won: won,
            stats: this.getGameStats()
        });
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
        this.waveSystem.stopGame();
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å —ç–∫—Ä–∞–Ω–∞
        if (Enemy.itemDropSystem) {
            Enemy.itemDropSystem.clearAllItems();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.showGameResult(won);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        // this.time.delayedCall(GAME_SETTINGS.endGameDelay, () => {
        //     this.scene.start('MenuScene');
        // });
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
     */
    showGameResult(won) {
        // –°–∫—Ä—ã–≤–∞–µ–º HUD –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (this.abilitiesDisplay) {
            this.abilitiesDisplay.setVisible(false);
        }
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (this.resultsTable) {
            this.resultsTable.destroy();
            this.resultsTable = null;
        }
        
        const stats = this.getGameStats();
        const resultText = won ? '–ü–û–ë–ï–î–ê!' : '–ü–û–†–ê–ñ–ï–ù–ò–ï!';
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π HTML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        this.resultsTable = new HTMLResultsTable(
            this,
            this.scale.width / 2, 
            this.scale.height / 2, 
            {
                title: resultText,
                data: {
                    enemiesKilled: stats.enemiesKilled,
                    time: stats.gameTimeText
                }
            }
        );
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (this.resultsTableRestartHandler) {
            document.removeEventListener('resultsTable:restart', this.resultsTableRestartHandler);
        }
        if (this.resultsTableMenuHandler) {
            document.removeEventListener('resultsTable:menu', this.resultsTableMenuHandler);
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.resultsTableRestartHandler = () => {
            console.log('üéÆ [EggDefense] –†–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
            console.log('üéÆ [EggDefense] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–º:');
            console.log('üéÆ [EggDefense] - isGameStarted:', this.isGameStarted);
            console.log('üéÆ [EggDefense] - isGameEnded:', this.isGameEnded);
            console.log('üéÆ [EggDefense] - waveSystem —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!this.waveSystem);
            console.log('üéÆ [EggDefense] - waveSystem.gameStartTime:', this.waveSystem?.gameStartTime);
            
            // –£–¥–∞–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–º
            if (this.resultsTable) {
                this.resultsTable.destroy();
                this.resultsTable = null;
            }
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            setTimeout(() => {
                console.log('üéÆ [EggDefense] –í—ã–ø–æ–ª–Ω—è–µ–º scene.restart()...');
                this.scene.restart();
            }, 50);
        };
        
        this.resultsTableMenuHandler = () => {
            console.log('üéÆ [EggDefense] –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
            // –£–¥–∞–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –º–µ–Ω—é
            if (this.resultsTable) {
                this.resultsTable.destroy();
                this.resultsTable = null;
            }
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            setTimeout(() => {
            this.scene.start('MenuScene');
            }, 50);
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.addEventListener('resultsTable:restart', this.resultsTableRestartHandler);
        document.addEventListener('resultsTable:menu', this.resultsTableMenuHandler);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã
     */
    getGameStats() {
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('üéÆ [GameStats] scene.time.now:', this.scene?.time?.now);
        console.log('üéÆ [GameStats] waveSystem exists:', !!this.waveSystem);
        console.log('üéÆ [GameStats] waveSystem.gameStartTime:', this.waveSystem?.gameStartTime);
        console.log('üéÆ [GameStats] waveSystem.duration:', this.waveSystem?.waveSettings?.duration);
        console.log('üéÆ [GameStats] waveSystem.remainingTime:', this.waveSystem?.getRemainingTime?.());
        
        let gameTime = 0;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ WaveSystem (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ)
        if (this.waveSystem && this.waveSystem.gameStartTime > 0) {
            // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è: –æ–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            const totalDuration = this.waveSystem.waveSettings.duration; // –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –≤ –º—Å
            const remainingTime = this.waveSystem.getRemainingTime(); // –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ –º—Å
            gameTime = Math.max(0, totalDuration - remainingTime); // –ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
            
            console.log('üéÆ [GameStats] totalDuration:', totalDuration);
            console.log('üéÆ [GameStats] remainingTime:', remainingTime);
            console.log('üéÆ [GameStats] calculated gameTime:', gameTime);
        } else {
            // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –µ—Å–ª–∏ WaveSystem –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            console.warn('üéÆ [GameStats] WaveSystem –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            gameTime = this.scene?.time?.now || 0;
        }
        
        const minutes = Math.floor(gameTime / 60000);
        const seconds = Math.floor((gameTime % 60000) / 1000);
        
        console.log('üéÆ [GameStats] Final gameTime:', gameTime, 'Formatted:', `${minutes}:${seconds.toString().padStart(2, '0')}`);
        
        return {
            enemiesKilled: this.waveSystem?.totalEnemiesKilled || 0,
            gameTime: gameTime,
            gameTimeText: `${minutes}:${seconds.toString().padStart(2, '0')}`,
            survived: this.egg && this.egg.health > 0
        };
    }
    
    /**
     * –ü–∞—É–∑–∞ –∏–≥—Ä—ã
     */
    pauseGame() {
        if (this.isPaused || this.isGameEnded) return;
        
        this.isPaused = true;
        this.scene.pause();
        
        console.log('üéÆ [Game] –ò–≥—Ä–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É');
    }
    
    /**
     * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
     */
    restartGame() {
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
        this.scene.restart();
    }
    
    /**
     * –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    endGame() {
        this.gameOver(false);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã
     */
    update(time, delta) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        if (this.probabilitySystem) {
            this.probabilitySystem.update(time, delta);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ª–Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        if (this.waveSystem) {
            this.waveSystem.update(time, delta);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ —á–µ—Ä–µ–∑ WaveSystem
        if (this.waveSystem) {
            this.waveSystem.updateEnemies(time, delta);
        }
        
        // –î–∏—Å–ø–ª–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —É–¥–∞–ª–µ–Ω
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å - –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û
        if (this.isGameStarted) {
            this.updateTimer();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        this.checkGameEnd();
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞—â–∏—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (—è–º—ã)
     */
    clearDefenses() {
        if (this.defenses && this.defenses.length > 0) {
            console.log(`üßπ –û—á–∏—â–∞–µ–º ${this.defenses.length} –∑–∞—â–∏—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤`);
            this.defenses.forEach(defense => {
                if (defense && defense.destroy) {
                    defense.destroy();
                }
            });
            this.defenses = [];
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–∞–≥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
     */
    createEnemy(enemyType, x, y) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–∞
        const enemy = Enemy.CreateEnemy(this, enemyType, x, y);
        
        if (enemy) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–ª—å (—è–π—Ü–æ), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
            if (this.egg) {
                enemy.setTarget(this.egg);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤ WaveSystem –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            if (this.waveSystem && this.waveSystem.enemies) {
                this.waveSystem.enemies.push(enemy);
            }
            
            if (enemyType === 'wasp' || enemyType === 'projectile') {
                console.log(`üêù [EggDefense] –û–°–ê: –°–æ–∑–¥–∞–Ω –≤—Ä–∞–≥ ${enemyType} –≤ –ø–æ–∑–∏—Ü–∏–∏ (${x}, ${y})`);
            }
        }
        
        return enemy;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —Å—Ü–µ–Ω—ã
     */
    destroy() {
        // –û—á–∏—â–∞–µ–º timeout –¥–ª—è —Ñ–æ–∫—É—Å–∞
        if (this.focusChangeTimeout) {
            clearTimeout(this.focusChangeTimeout);
            this.focusChangeTimeout = null;
        }
        
        // –û—á–∏—â–∞–µ–º EventSystem
        if (this.eventSystem) {
            this.eventSystem.clear();
        }
        
        // –û—á–∏—â–∞–µ–º EffectHandler
        if (this.effectHandler) {
            this.effectHandler.destroy();
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
        if (this.abilitySystem) {
            this.abilitySystem.destroy();
        }
        
        if (this.waveSystem) {
            this.waveSystem.destroy();
        }
        
        if (this.gestureSystem) {
            this.gestureSystem.destroy();
        }
        
        if (this.itemDropSystem) {
            this.itemDropSystem.destroy();
        }
        
        // –û—á–∏—â–∞–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (—è–º—ã)
        this.clearDefenses();
        
        if (this.effectSystem) {
            this.effectSystem.clearAllEffects();
        }
        
        // HTML –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —É–¥–∞–ª–µ–Ω–æ
        
        if (this.enemyEffectSystem) {
            this.enemyEffectSystem.destroy();
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (this.telegramTimer) {
            this.telegramTimer.destroy();
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–∞–±–ª–∏—Ü—É
        if (this.resultsTable) {
            this.resultsTable.destroy();
        }
        
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
        if (this.resultsTableRestartHandler) {
            document.removeEventListener('resultsTable:restart', this.resultsTableRestartHandler);
            this.resultsTableRestartHandler = null;
        }
        
        if (this.resultsTableMenuHandler) {
            document.removeEventListener('resultsTable:menu', this.resultsTableMenuHandler);
            this.resultsTableMenuHandler = null;
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –ø–∞—É–∑—ã –∏–≥—Ä—ã
     */
    setupFocusHandlers() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ window events –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        if (typeof window !== 'undefined') {
            window.addEventListener('blur', () => {
                console.log('üéÆ [Focus] Window blur event triggered');
                
                // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout
                if (this.focusChangeTimeout) {
                    clearTimeout(this.focusChangeTimeout);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
                this.focusChangeTimeout = setTimeout(() => {
                    if (this.isGameStarted && !this.isGameEnded && !this.isPaused) {
                        console.log('üéÆ [Focus] Pausing game due to window blur');
                        this.pauseGame();
                    }
                }, 100);
            });
            
            window.addEventListener('focus', () => {
                console.log('üéÆ [Focus] Window focus event triggered');
                console.log('üéÆ [Focus] Debug - isGameStarted:', this.isGameStarted);
                console.log('üéÆ [Focus] Debug - isGameEnded:', this.isGameEnded);
                console.log('üéÆ [Focus] Debug - isPaused:', this.isPaused);
                
                // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout
                if (this.focusChangeTimeout) {
                    clearTimeout(this.focusChangeTimeout);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
                this.focusChangeTimeout = setTimeout(() => {
                    if (this.isGameStarted && !this.isGameEnded && this.isPaused) {
                        console.log('üéÆ [Focus] Resuming game due to window focus');
                        this.resumeGame();
                    } else {
                        console.log('üéÆ [Focus] Cannot resume - conditions not met');
                    }
                }, 100);
            });
        }
    }
    
    
    
    /**
     * –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
     */
    resumeGame() {
        if (!this.isPaused || this.isGameEnded) return;
        
        this.isPaused = false;
        
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º Phaser —Å—Ü–µ–Ω—É
        this.scene.resume();
        
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ª–Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        if (this.waveSystem) {
            this.waveSystem.resumeGame();
        }
        
        console.log('üéÆ [Game] –ò–≥—Ä–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
}
