import Phaser from 'phaser';
import { Egg } from '../objects/Egg';
import { Enemy } from '../objects/Enemy';
import { WaveSystem } from '../systems/WaveSystem';
import { GestureSystem } from '../systems/GestureSystem';
import { GestureActionSystem } from '../systems/GestureActionSystem';
import { ProbabilitySystem } from '../systems/ProbabilitySystem';
import { EffectSystem } from '../systems/EffectSystem';
import { EventSystem } from '../systems/EventSystem.js';
import { EffectHandler } from '../handlers/EffectHandler.js';
import { EVENT_TYPES } from '../types/EventTypes.js';
import { settings } from '../../config/settings.js';
import { BackgroundUtils } from '../utils/BackgroundUtils.js';

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è —Å—Ü–µ–Ω–∞ EggDefense
 * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
export class EggDefense extends Phaser.Scene {
    constructor() {
        super({ key: 'EggDefense' });
    }

    create() {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        this.createGameObjects();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
        this.initGameSystems();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        this.setupUI();
        
        // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
        this.startGame();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
     */
    initGameSystems() {
        // –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è)
        this.eventSystem = new EventSystem();
        
        // –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)
        this.probabilitySystem = new ProbabilitySystem(this);
        this.probabilitySystem.init();
        
        // –°–∏—Å—Ç–µ–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        this.effectSystem = new EffectSystem(this);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (Event-Driven Architecture)
        this.effectHandler = new EffectHandler(this, this.eventSystem);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –≤ –∫–ª–∞—Å—Å–µ Enemy
        Enemy.initDropSystems(this, this.egg, this.probabilitySystem);
        Enemy.initEventSystem(this.eventSystem);
        
        // –°–∏—Å—Ç–µ–º–∞ –≤–æ–ª–Ω –¥–ª—è —Å–ø–∞–≤–Ω–∞ –≤—Ä–∞–≥–æ–≤
        this.waveSystem = new WaveSystem(this, this.probabilitySystem);
        
        // –°–∏—Å—Ç–µ–º–∞ –∂–µ—Å—Ç–æ–≤
        this.gestureSystem = new GestureSystem(this, {
            onTap: (gesture) => this.handleGesture(gesture),
            onDoubleTap: (gesture) => this.handleGesture(gesture),
            onLongTap: (gesture) => this.handleGesture(gesture),
            onSwipe: (gesture) => this.handleGesture(gesture)
        });
        
        // –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–µ—Å—Ç–æ–≤
        this.gestureActionSystem = new GestureActionSystem(
            this, 
            this.waveSystem.enemies, 
            [], // defenses - –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π
            this.egg
        );
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–π—Ü–æ –∫–∞–∫ —Ü–µ–ª—å –¥–ª—è –≤–æ–ª–Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        this.waveSystem.setTarget(this.egg);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
     */
    createGameObjects() {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–≤—è–Ω–æ–≥–æ —Ñ–æ–Ω–∞
        this.grassBackground = BackgroundUtils.createAnimatedGrassBackground(this, {
            tileSize: 64, // –†–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞ —Ç—Ä–∞–≤—ã
            animate: true, // –í–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤–µ—Ç—Ä–∞
            animation: {
                speedX: 8,   // –õ–µ–≥–∫–æ–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                speedY: 4,   // –õ–µ–≥–∫–æ–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                duration: 20000 // 20 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ü–∏–∫–ª
            }
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –Ω–∞ —Å–∞–º—ã–π –Ω–∏–∂–Ω–∏–π —Å–ª–æ–π
        this.grassBackground.setDepth(-100);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —è–π—Ü–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞
        this.egg = Egg.CreateEgg(
            this, 
            this.scale.width / 2, 
            this.scale.height / 2,
            {
                health: 100,
                texture: 'ü•ö'
            }
        );
        
        console.log('–¢—Ä–∞–≤—è–Ω–æ–π —Ñ–æ–Ω —Å–æ–∑–¥–∞–Ω:', this.grassBackground);
        console.log('–Ø–π—Ü–æ —Å–æ–∑–¥–∞–Ω–æ:', this.egg);
        console.log('–ü–æ–∑–∏—Ü–∏—è —è–π—Ü–∞:', this.egg.x, this.egg.y);
        console.log('–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ Phaser:', this.scale.width, this.scale.height);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
     */
    setupUI() {
        // UI —É–¥–∞–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
     */
    startGame() {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        this.eventSystem.emit(EVENT_TYPES.GAME_START, {
            scene: this
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ–ª–Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        this.waveSystem.startGame();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–µ—Å—Ç–æ–≤
     */
    handleGesture(gesture) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –¥–µ–π—Å—Ç–≤–∏–π
        this.gestureActionSystem.updateObjects(
            this.waveSystem.enemies, 
            [] // defenses - –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π
        );
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–µ—Å—Ç
        const success = this.gestureActionSystem.handleGesture(gesture);
        
        if (success) {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —á–µ—Ä–µ–∑ EffectSystem
            console.log(`–ñ–µ—Å—Ç ${gesture.type} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        }
    }

    /**
     * –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
     */
    endGame() {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        const won = this.egg && this.egg.health > 0;
        this.eventSystem.emit(EVENT_TYPES.GAME_END, {
            scene: this,
            won: won
        });
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
        this.waveSystem.endGame();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!');
        console.log(`–£–±–∏—Ç–æ –≤—Ä–∞–≥–æ–≤: ${this.waveSystem.totalEnemiesKilled}`);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        this.time.delayedCall(3000, () => {
            this.scene.start('MenuScene');
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã
     */
    update(time, delta) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        if (this.probabilitySystem) {
            this.probabilitySystem.update(time, delta);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ª–Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        if (this.waveSystem) {
            this.waveSystem.update(time, delta);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ (–¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ü–µ–ª–∏)
        if (this.waveSystem && this.waveSystem.enemies) {
            this.waveSystem.enemies.forEach(enemy => {
                if (enemy && enemy.isAlive && enemy.update) {
                    enemy.update(time, delta);
                }
            });
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —Å—Ü–µ–Ω—ã
     */
    destroy() {
        // –û—á–∏—â–∞–µ–º EventSystem
        if (this.eventSystem) {
            this.eventSystem.clear();
        }
        
        // –û—á–∏—â–∞–µ–º EffectHandler
        if (this.effectHandler) {
            this.effectHandler.destroy();
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
        if (this.waveSystem) {
            this.waveSystem.destroy();
        }
        
        if (this.gestureSystem) {
            this.gestureSystem.destroy();
        }
        
        if (this.itemDropSystem) {
            this.itemDropSystem.destroy();
        }
        
        if (this.effectSystem) {
            this.effectSystem.clearAllEffects();
        }
    }
}
