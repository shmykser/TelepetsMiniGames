import Phaser from 'phaser';
import { Egg } from '../objects/Egg.js';
import { Enemy } from '../objects/Enemy.js';
import { WaveSystem } from '../systems/WaveSystem.js';
import { GestureSystem } from '../systems/GestureSystem.js';
import { GestureActionSystem } from '../systems/GestureActionSystem.js';
import { ProbabilitySystem } from '../systems/ProbabilitySystem.js';
import { EffectSystem } from '../systems/EffectSystem.js';
import { EventSystem } from '../systems/EventSystem.js';
import { AbilitySystem } from '../systems/AbilitySystem.js';
import { EffectHandler } from '../handlers/EffectHandler.js';
import { EnemyEffectSystem } from '../systems/EnemyEffectSystem.js';
import { EVENT_TYPES } from '../types/EventTypes.js';
import { BACKGROUND_SETTINGS, DEPTH_CONSTANTS } from '../settings/GameSettings.js';
import { ABILITIES } from '../types/abilityTypes.js';
import { BackgroundUtils } from '../utils/BackgroundUtils.js';
import { AbilitiesDisplay } from '../components/AbilitiesDisplay.js';

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è —Å—Ü–µ–Ω–∞ EggDefense
 * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
export class EggDefense extends Phaser.Scene {
    constructor() {
        super({ key: 'EggDefense' });
        this.isGameEnded = false;
    }

    create() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
        this.isGameEnded = false;
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        this.createGameObjects();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
        this.initGameSystems();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        this.setupUI();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∞–≤–∏—à
        this.setupKeyboardHandlers();
        
        // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
        this.startGame();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
     */
    initGameSystems() {
        // –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è)
        this.eventSystem = new EventSystem();
        
        // –°–∏—Å—Ç–µ–º–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        this.abilitySystem = new AbilitySystem(this);
        
        // –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)
        this.probabilitySystem = new ProbabilitySystem(this);
        this.probabilitySystem.init();
        
        // –°–∏—Å—Ç–µ–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        this.effectSystem = new EffectSystem(this);
        
        // –ú–∞—Å—Å–∏–≤ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (—è–º)
        this.defenses = [];
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (Event-Driven Architecture)
        this.effectHandler = new EffectHandler(this, this.eventSystem);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –≤ –∫–ª–∞—Å—Å–µ Enemy
        Enemy.initDropSystems(this, this.egg, this.probabilitySystem, this.abilitySystem);
        Enemy.initEventSystem(this.eventSystem);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –≤—Ä–∞–≥–æ–≤
        this.enemyEffectSystem = new EnemyEffectSystem(this);
        Enemy.initEffectSystem(this.enemyEffectSystem);
        
        // –°–∏—Å—Ç–µ–º–∞ –≤–æ–ª–Ω –¥–ª—è —Å–ø–∞–≤–Ω–∞ –≤—Ä–∞–≥–æ–≤
        this.waveSystem = new WaveSystem(this, this.probabilitySystem);
        
        // –°–∏—Å—Ç–µ–º–∞ –∂–µ—Å—Ç–æ–≤
        this.gestureSystem = new GestureSystem(this, {
            onTap: (gesture) => this.handleGesture(gesture),
            onLongTap: (gesture) => this.handleGesture(gesture),
            onLine: (gesture) => this.handleGesture(gesture),
            onCircle: (gesture) => this.handleGesture(gesture),
            onTriangle: (gesture) => this.handleGesture(gesture)
        });
        
        // –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–µ—Å—Ç–æ–≤
        this.gestureActionSystem = new GestureActionSystem(
            this, 
            this.waveSystem.enemies, 
            this.defenses, // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            this.egg,
            Enemy.itemDropSystem, // –ü–µ—Ä–µ–¥–∞–µ–º ItemDropSystem –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            this.abilitySystem // –ü–µ—Ä–µ–¥–∞–µ–º AbilitySystem –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        );
        
        // –ü–µ—Ä–µ–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —è–π—Ü—É
        if (this.egg && this.abilitySystem) {
            this.egg.abilitySystem = this.abilitySystem;
            this.egg.scene.events.on('ability:upgraded', this.egg.onAbilityUpgraded, this.egg);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
            this.egg.updateAura();
            this.egg.updateEggExplosion();
            
            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ–º –≤–∑—Ä—ã–≤ —è–π—Ü–∞
            if (this.egg.eggExplosion <= 0) {
                this.abilitySystem.upgradeAbility('EGG_EXPLOSION');
                this.egg.updateEggExplosion();
            }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–π—Ü–æ –∫–∞–∫ —Ü–µ–ª—å –¥–ª—è –≤–æ–ª–Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        this.waveSystem.setTarget(this.egg);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∞–≤–Ω–∞ –≤—Ä–∞–≥–æ–≤ –æ—Ç –æ—Å—ã –∏ –¥—Ä—É–≥–∏—Ö —Å–ø–∞–≤–Ω–µ—Ä–æ–≤
        this.events.on('enemy:spawn', (spawnData) => {
            if (this.gameObject?.enemyType === 'wasp') {
                console.log('üêù [EggDefense] –û–°–ê: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–ø–∞–≤–Ω–∞:', spawnData);
            }
            
            if (spawnData.enemyType && spawnData.x && spawnData.y) {
                // –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–∞ –Ω–∞–ø—Ä—è–º—É—é, –∫–∞–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ü–µ–Ω–µ
                const enemy = this.createEnemy(spawnData.enemyType, spawnData.x, spawnData.y);
                
                // –ï—Å–ª–∏ —Å–ø–∞–≤–Ω–∏–º—ã–π –≤—Ä–∞–≥ - —Å–Ω–∞—Ä—è–¥, –∏ –µ—Å—Ç—å —Ü–µ–ª—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
                if (spawnData.enemyType === 'projectile' && spawnData.target && enemy && enemy.aiCoordinator) {
                    if (this.gameObject?.enemyType === 'wasp') {
                        console.log('üêù [EggDefense] –û–°–ê: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –¥–ª—è —Å–ø–∞–≤–Ω–µ–Ω–Ω–æ–≥–æ —Å–Ω–∞—Ä—è–¥–∞');
                    }
                    enemy.aiCoordinator.setTarget(spawnData.target);
                }
            }
        });
        
        console.log('üéÆ [EggDefense] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
     */
    createGameObjects() {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–≤—è–Ω–æ–≥–æ —Ñ–æ–Ω–∞
        this.grassBackground = BackgroundUtils.createAnimatedGrassBackground(this, BACKGROUND_SETTINGS);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –Ω–∞ —Å–∞–º—ã–π –Ω–∏–∂–Ω–∏–π —Å–ª–æ–π
        this.grassBackground.setDepth(DEPTH_CONSTANTS.BACKGROUND);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —è–π—Ü–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞ (abilitySystem –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–∑–∂–µ)
        this.egg = Egg.CreateEgg(
            this, 
            this.scale.width / 2, 
            this.scale.height / 2,
            {
                health: ABILITIES.EGG_HEALTH.baseValue,
                texture: 'ü•ö',
                spriteKey: 'egg',
                size: 2
            }
        );
        
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∞–≤–∏—à
     */
    setupKeyboardHandlers() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ Tab
        this.input.keyboard.on('keydown-TAB', () => {
            if (this.abilitiesDisplay) {
                this.abilitiesDisplay.toggle();
            }
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
     */
    setupUI() {
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        this.createTimer();
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–ª–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        this.abilitiesDisplay = new AbilitiesDisplay(
            this,
            this.scale.width - 100, // –°–¥–≤–∏–Ω—É–ª–∏ –ª–µ–≤–µ–µ –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
            100, // –û—Ç—Å—Ç—É–ø –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è
            this.abilitySystem // –ü–µ—Ä–µ–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        );
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫—É—é –≥–ª—É–±–∏–Ω—É, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–≤–µ—Ä—Ö –∏–≥—Ä—ã
        this.abilitiesDisplay.setDepth(DEPTH_CONSTANTS.UI_ELEMENTS);
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.abilitiesDisplay.hide();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∏–≥—Ä—ã
     */
    createTimer() {
        // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
        this.timerBackground = this.add.rectangle(
            this.scale.width / 2,
            50,
            80,
            32,
            0x000000,
            0.7
        );
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–∞–π–º–µ—Ä–∞
        this.timerText = this.add.text(
            this.scale.width / 2,
            50,
            '10:00',
            {
                fontSize: '24px',
                fill: '#ffffff',
                fontStyle: 'bold',
                stroke: '#000000',
                strokeThickness: 2
            }
        ).setOrigin(0.5);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫—É—é –≥–ª—É–±–∏–Ω—É, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–≤–µ—Ä—Ö –∏–≥—Ä—ã
        this.timerBackground.setDepth(DEPTH_CONSTANTS.UI_ELEMENTS);
        this.timerText.setDepth(DEPTH_CONSTANTS.TIMER);
        
        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–æ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
        this.timerBackground.setVisible(false);
        this.timerText.setVisible(false);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
     */
    updateTimer() {
        if (!this.timerText || !this.waveSystem) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if (this.waveSystem.isGameActive) {
            this.timerBackground.setVisible(true);
            this.timerText.setVisible(true);
            
            const remainingTime = this.waveSystem.getRemainingTime();
            const minutes = Math.floor(remainingTime / 60000);
            const seconds = Math.floor((remainingTime % 60000) / 1000);
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
            const timeString = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            this.timerText.setText(timeString);
            
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
            if (remainingTime <= 60000) { // –ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–Ω—É—Ç–∞ - –∫—Ä–∞—Å–Ω—ã–π
                this.timerText.setFill('#ff0000');
            } else if (remainingTime <= 180000) { // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–∏–Ω—É—Ç—ã - –∂–µ–ª—Ç—ã–π
                this.timerText.setFill('#ffff00');
            } else { // –û–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è - –±–µ–ª—ã–π
                this.timerText.setFill('#ffffff');
            }
        } else {
            // –°–∫—Ä—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
            this.timerBackground.setVisible(false);
            this.timerText.setVisible(false);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
     */
    startGame() {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        this.eventSystem.emit(EVENT_TYPES.GAME_START, {
            scene: this
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ–ª–Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        this.waveSystem.startGame();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–µ—Å—Ç–æ–≤
     */
    handleGesture(gesture) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –¥–µ–π—Å—Ç–≤–∏–π
        this.gestureActionSystem.updateObjects(
            this.waveSystem.enemies, 
            this.defenses // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        );
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–µ—Å—Ç
        const success = this.gestureActionSystem.handleGesture(gesture);
        
        if (success) {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —á–µ—Ä–µ–∑ EffectSystem
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
     */
    checkGameEnd() {
        if (this.isGameEnded) return;
        
        const timeUp = this.waveSystem.getRemainingTime() <= 0;
        const eggDestroyed = !this.egg || this.egg.health <= 0;
        
        if (timeUp || eggDestroyed) {
            this.gameOver(timeUp && !eggDestroyed);
        }
    }
    
    /**
     * –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    gameOver(won = false) {
        this.isGameEnded = true;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        this.eventSystem.emit(EVENT_TYPES.GAME_END, {
            scene: this,
            won: won,
            stats: this.getGameStats()
        });
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
        this.waveSystem.stopGame();
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å —ç–∫—Ä–∞–Ω–∞
        if (Enemy.itemDropSystem) {
            Enemy.itemDropSystem.clearAllItems();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.showGameResult(won);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        // this.time.delayedCall(GAME_SETTINGS.endGameDelay, () => {
        //     this.scene.start('MenuScene');
        // });
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
     */
    showGameResult(won) {
        // –°–∫—Ä—ã–≤–∞–µ–º HUD –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (this.abilitiesDisplay) {
            this.abilitiesDisplay.setVisible(false);
        }
        
        const stats = this.getGameStats();
        const resultText = won ? '–ü–û–ë–ï–î–ê!' : '–ü–û–†–ê–ñ–ï–ù–ò–ï!';
        const resultColor = won ? '#00ff00' : '#ff0000';
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —ç–∫—Ä–∞–Ω
        const resultBg = this.add.rectangle(
            this.scale.width / 2, 
            this.scale.height / 2, 
            this.scale.width - 40, 
            250, 
            0x000000, 
            0.8
        );
        resultBg.setDepth(DEPTH_CONSTANTS.UI_ELEMENTS);
        
        const titleText = this.add.text(
            this.scale.width / 2, 
            this.scale.height / 2 - 70, 
            resultText, 
            {
                fontSize: '32px',
                fill: resultColor,
                fontStyle: 'bold'
            }
        ).setOrigin(0.5);
        titleText.setDepth(DEPTH_CONSTANTS.UI_ELEMENTS + 1);
        
        const statsText = this.add.text(
            this.scale.width / 2, 
            this.scale.height / 2 - 20, 
            `–£–±–∏—Ç–æ –≤—Ä–∞–≥–æ–≤: ${stats.enemiesKilled}\n–í—Ä–µ–º—è: ${stats.gameTimeText}`, 
            {
                fontSize: '18px',
                fill: '#ffffff',
                align: 'center'
            }
        ).setOrigin(0.5);
        statsText.setDepth(DEPTH_CONSTANTS.UI_ELEMENTS + 1);
        
        // –ö–Ω–æ–ø–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
        const restartButton = this.add.rectangle(
            this.scale.width / 2 - 80, 
            this.scale.height / 2 + 50, 
            140, 
            40, 
            0x27ae60
        )
        .setInteractive()
        .on('pointerdown', () => {
            this.restartGame();
        })
        .on('pointerover', () => restartButton.setAlpha(0.8))
        .on('pointerout', () => restartButton.setAlpha(1));
        restartButton.setDepth(DEPTH_CONSTANTS.UI_ELEMENTS + 1);
        
        const restartText = this.add.text(
            this.scale.width / 2 - 80, 
            this.scale.height / 2 + 50, 
            '–†–ï–°–¢–ê–†–¢', 
            {
                fontSize: '16px',
                fill: '#ffffff',
                fontStyle: 'bold'
            }
        ).setOrigin(0.5);
        restartText.setDepth(DEPTH_CONSTANTS.UI_ELEMENTS + 2);
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        const menuButton = this.add.rectangle(
            this.scale.width / 2 + 80, 
            this.scale.height / 2 + 50, 
            140, 
            40, 
            0xe74c3c
        )
        .setInteractive()
        .on('pointerdown', () => {
            this.scene.start('MenuScene');
        })
        .on('pointerover', () => menuButton.setAlpha(0.8))
        .on('pointerout', () => menuButton.setAlpha(1));
        menuButton.setDepth(DEPTH_CONSTANTS.UI_ELEMENTS + 1);
        
        const menuText = this.add.text(
            this.scale.width / 2 + 80, 
            this.scale.height / 2 + 50, 
            '–í –ú–ï–ù–Æ', 
            {
                fontSize: '16px',
                fill: '#ffffff',
                fontStyle: 'bold'
            }
        ).setOrigin(0.5);
        menuText.setDepth(DEPTH_CONSTANTS.UI_ELEMENTS + 2);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã
     */
    getGameStats() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Date.now() –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å WaveSystem
        const gameTime = Date.now() - (this.waveSystem?.gameStartTime || 0);
        const minutes = Math.floor(gameTime / 60000);
        const seconds = Math.floor((gameTime % 60000) / 1000);
        
        return {
            enemiesKilled: this.waveSystem?.totalEnemiesKilled || 0,
            gameTime: gameTime,
            gameTimeText: `${minutes}:${seconds.toString().padStart(2, '0')}`,
            survived: this.egg && this.egg.health > 0
        };
    }
    
    /**
     * –ü–∞—É–∑–∞ –∏–≥—Ä—ã
     */
    pauseGame() {
        // –°–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ –ø–∞—É–∑–µ
        if (this.abilitiesDisplay) {
            this.abilitiesDisplay.hide();
        }
        this.scene.pause();
    }
    
    /**
     * –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
     */
    resumeGame() {
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –∏–≥—Ä–æ–∫ —Å–∞–º —Ä–µ—à–∞–µ—Ç —á–µ—Ä–µ–∑ Tab
        this.scene.resume();
    }
    
    /**
     * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
     */
    restartGame() {
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
        this.scene.restart();
    }
    
    /**
     * –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    endGame() {
        this.gameOver(false);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã
     */
    update(time, delta) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        if (this.probabilitySystem) {
            this.probabilitySystem.update(time, delta);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ª–Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        if (this.waveSystem) {
            this.waveSystem.update(time, delta);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ —á–µ—Ä–µ–∑ WaveSystem
        if (this.waveSystem) {
            this.waveSystem.updateEnemies(time, delta);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        if (this.abilitiesDisplay) {
            this.abilitiesDisplay.update(time, delta);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
        this.updateTimer();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        this.checkGameEnd();
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞—â–∏—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (—è–º—ã)
     */
    clearDefenses() {
        if (this.defenses && this.defenses.length > 0) {
            console.log(`üßπ –û—á–∏—â–∞–µ–º ${this.defenses.length} –∑–∞—â–∏—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤`);
            this.defenses.forEach(defense => {
                if (defense && defense.destroy) {
                    defense.destroy();
                }
            });
            this.defenses = [];
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–∞–≥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
     */
    createEnemy(enemyType, x, y) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–∞
        const enemy = Enemy.CreateEnemy(this, enemyType, x, y);
        
        if (enemy) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–ª—å (—è–π—Ü–æ), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
            if (this.egg) {
                enemy.setTarget(this.egg);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤ WaveSystem –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            if (this.waveSystem && this.waveSystem.enemies) {
                this.waveSystem.enemies.push(enemy);
            }
            
            if (enemyType === 'wasp' || enemyType === 'projectile') {
                console.log(`üêù [EggDefense] –û–°–ê: –°–æ–∑–¥–∞–Ω –≤—Ä–∞–≥ ${enemyType} –≤ –ø–æ–∑–∏—Ü–∏–∏ (${x}, ${y})`);
            }
        }
        
        return enemy;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —Å—Ü–µ–Ω—ã
     */
    destroy() {
        // –û—á–∏—â–∞–µ–º EventSystem
        if (this.eventSystem) {
            this.eventSystem.clear();
        }
        
        // –û—á–∏—â–∞–µ–º EffectHandler
        if (this.effectHandler) {
            this.effectHandler.destroy();
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
        if (this.abilitySystem) {
            this.abilitySystem.destroy();
        }
        
        if (this.waveSystem) {
            this.waveSystem.destroy();
        }
        
        if (this.gestureSystem) {
            this.gestureSystem.destroy();
        }
        
        if (this.itemDropSystem) {
            this.itemDropSystem.destroy();
        }
        
        // –û—á–∏—â–∞–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (—è–º—ã)
        this.clearDefenses();
        
        if (this.effectSystem) {
            this.effectSystem.clearAllEffects();
        }
        
        if (this.abilitiesDisplay) {
            this.abilitiesDisplay.destroy();
        }
        
        if (this.enemyEffectSystem) {
            this.enemyEffectSystem.destroy();
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (this.timerBackground) {
            this.timerBackground.destroy();
        }
        if (this.timerText) {
            this.timerText.destroy();
        }
    }
}
