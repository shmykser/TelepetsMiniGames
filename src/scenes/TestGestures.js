/**
 * –°—Ü–µ–Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–µ—Å—Ç–æ–≤ —Å $1 Recognizer
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å —Ñ–∏–≥—É—Ä—ã –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ $1
 */
import { DollarRecognizer, Point, Unistroke, Result } from '@/utils/dollar.js';

export class TestGestures extends Phaser.Scene {
    constructor() {
        super({ key: 'TestGestures' });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è $1 Recognizer
        this.dollarRecognizer = null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.isDrawing = false;
        this.currentStroke = [];
        this.strokeGraphics = null;
        this.strokePoints = [];
        
        // UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.resultLabel = null;
        this.canvasArea = null;
        this.clearButton = null;
        this.instructionText = null;
    }

    create() {
        const { width, height } = this.scale;
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω
        this.createBackground();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º $1 Recognizer
        this.initializeDollarRecognizer();
        
        // –°–æ–∑–¥–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.createUI();
        
        // –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.createDrawingArea();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞
        this.setupInputHandlers();
    }

    createBackground() {
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        const graphics = this.add.graphics();
        graphics.fillGradientStyle(0x1a1a2e, 0x16213e, 0x0f3460, 0x2c3e50, 1);
        graphics.fillRect(0, 0, this.scale.width, this.scale.height);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—É—é —Ç—Ä–∞–≤—É
        this.add.tileSprite(0, 0, this.scale.width, 200, 'grass')
            .setOrigin(0, 0)
            .setAlpha(0.2);
    }

    initializeDollarRecognizer() {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä $1 Recognizer
        this.dollarRecognizer = new DollarRecognizer();
        console.log('$1 Recognizer initialized with', this.dollarRecognizer.Unistrokes.length, 'gestures');
    }

    createUI() {
        const { width, height } = this.scale;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        this.add.text(width / 2, 50, 'üé® –¢–µ—Å—Ç –ñ–µ—Å—Ç–æ–≤ $1 Recognizer', {
            fontSize: '28px',
            fontFamily: 'Arial',
            fill: '#ffffff',
            align: 'center',
            stroke: '#000000',
            strokeThickness: 2
        }).setOrigin(0.5, 0.5);
        
        // –õ–µ–π–±–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        this.resultLabel = this.add.text(width / 2, 100, '–ù–∞—Ä–∏—Å—É–π—Ç–µ —Ñ–∏–≥—É—Ä—É –Ω–∞ –ø–æ–ª–µ –Ω–∏–∂–µ', {
            fontSize: '20px',
            fontFamily: 'Arial',
            fill: '#ffffff',
            align: 'center',
            backgroundColor: '#000000',
            padding: { x: 15, y: 8 }
        }).setOrigin(0.5, 0.5);
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        this.instructionText = this.add.text(width / 2, 140, 
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã: –∫—Ä—É–≥, —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫, –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, –∑–≤–µ–∑–¥–∞, —Å—Ç—Ä–µ–ª–∫–∞, –≥–∞–ª–æ—á–∫–∞, X, V', {
            fontSize: '16px',
            fontFamily: 'Arial',
            fill: '#bdc3c7',
            align: 'center'
        }).setOrigin(0.5, 0.5);
        
        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        this.clearButton = this.add.rectangle(width - 100, height - 80, 150, 50, 0xe74c3c)
            .setInteractive()
            .on('pointerdown', () => this.clearCanvas())
            .on('pointerover', () => this.clearButton.setAlpha(0.8))
            .on('pointerout', () => this.clearButton.setAlpha(1));
        
        this.add.text(width - 100, height - 80, '–û—á–∏—Å—Ç–∏—Ç—å', {
            fontSize: '18px',
            fontFamily: 'Arial',
            fill: '#ffffff',
            align: 'center'
        }).setOrigin(0.5, 0.5);
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        const menuButton = this.add.rectangle(100, height - 80, 150, 50, 0x2d5a27)
            .setInteractive()
            .on('pointerdown', () => this.scene.start('MenuScene'))
            .on('pointerover', () => menuButton.setAlpha(0.8))
            .on('pointerout', () => menuButton.setAlpha(1));
        
        this.add.text(100, height - 80, 'üè† –í –º–µ–Ω—é', {
            fontSize: '18px',
            fontFamily: 'Arial',
            fill: '#ffffff',
            align: 'center'
        }).setOrigin(0.5, 0.5);
    }

    createDrawingArea() {
        const { width, height } = this.scale;
        
        // –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è (—Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞)
        const canvasX = width / 2;
        const canvasY = height / 2 + 50;
        const canvasWidth = Math.min(width - 100, 500);
        const canvasHeight = Math.min(height - 300, 400);
        
        // –§–æ–Ω –æ–±–ª–∞—Å—Ç–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.canvasArea = this.add.rectangle(canvasX, canvasY, canvasWidth, canvasHeight, 0x2c3e50)
            .setStrokeStyle(3, 0xffffff)
            .setInteractive();
        
        // –ì—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∂–µ—Å—Ç–æ–≤
        this.strokeGraphics = this.add.graphics();
        this.strokeGraphics.setDepth(10);
        
        // –¢–µ–∫—Å—Ç "–ù–∞—Ä–∏—Å—É–π—Ç–µ –∑–¥–µ—Å—å"
        this.add.text(canvasX, canvasY, '–ù–∞—Ä–∏—Å—É–π—Ç–µ –∑–¥–µ—Å—å', {
            fontSize: '24px',
            fontFamily: 'Arial',
            fill: '#7f8c8d',
            align: 'center'
        }).setOrigin(0.5, 0.5);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.canvasBounds = {
            x: canvasX - canvasWidth / 2,
            y: canvasY - canvasHeight / 2,
            width: canvasWidth,
            height: canvasHeight
        };
    }

    setupInputHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏
        this.canvasArea.on('pointerdown', this.startDrawing, this);
        this.canvasArea.on('pointermove', this.draw, this);
        this.canvasArea.on('pointerup', this.stopDrawing, this);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞—á-—Å–æ–±—ã—Ç–∏–π
        this.canvasArea.on('pointerdown', this.startDrawing, this);
        this.canvasArea.on('pointermove', this.draw, this);
        this.canvasArea.on('pointerup', this.stopDrawing, this);
    }

    startDrawing(pointer) {
        if (!this.isPointInCanvas(pointer.x, pointer.y)) return;
        
        this.isDrawing = true;
        this.currentStroke = [];
        this.strokePoints = [];
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∂–µ—Å—Ç
        this.strokeGraphics.clear();
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —à—Ç—Ä–∏—Ö
        const point = new Point(pointer.x, pointer.y);
        this.currentStroke.push(point);
        this.strokePoints.push({ x: pointer.x, y: pointer.y });
        
        console.log('–ù–∞—á–∞–ª–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –≤ —Ç–æ—á–∫–µ:', pointer.x, pointer.y);
    }

    draw(pointer) {
        if (!this.isDrawing || !this.isPointInCanvas(pointer.x, pointer.y)) return;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ —Ç–µ–∫—É—â–∏–π —à—Ç—Ä–∏—Ö
        const point = new Point(pointer.x, pointer.y);
        this.currentStroke.push(point);
        this.strokePoints.push({ x: pointer.x, y: pointer.y });
        
        // –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏
        if (this.currentStroke.length > 1) {
            const prevPoint = this.currentStroke[this.currentStroke.length - 2];
            this.strokeGraphics.lineStyle(3, 0xffffff, 1);
            this.strokeGraphics.beginPath();
            this.strokeGraphics.moveTo(prevPoint.X, prevPoint.Y);
            this.strokeGraphics.lineTo(point.X, point.Y);
            this.strokeGraphics.strokePath();
        }
    }

    stopDrawing(pointer) {
        if (!this.isDrawing) return;
        
        this.isDrawing = false;
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —à—Ç—Ä–∏—Ö
        if (this.currentStroke.length > 0) {
            const point = new Point(pointer.x, pointer.y);
            this.currentStroke.push(point);
            this.strokePoints.push({ x: pointer.x, y: pointer.y });
        }
        
        console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è. –¢–æ—á–µ–∫:', this.currentStroke.length);
        
        // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∂–µ—Å—Ç
        if (this.currentStroke.length >= 10) { // –ú–∏–Ω–∏–º—É–º —Ç–æ—á–µ–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            this.recognizeGesture();
        } else {
            this.updateResult('–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∂–µ—Å—Ç. –ù–∞—Ä–∏—Å—É–π—Ç–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É.', '#e74c3c');
        }
    }

    recognizeGesture() {
        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç $1 Recognizer
            const points = this.currentStroke.map(point => new Point(point.X, point.Y));
            
            // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∂–µ—Å—Ç
            const result = this.dollarRecognizer.Recognize(points, false); // false = –∏—Å–ø–æ–ª—å–∑—É–µ–º Golden Section Search
            
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', result);
            
            if (result.Score > 0.6) { // –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                this.updateResult(
                    `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ${this.translateGestureName(result.Name)} (${Math.round(result.Score * 100)}%)`,
                    '#27ae60'
                );
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É—Å–ø–µ—Ö–∞
                this.playSuccessAnimation();
            } else {
                this.updateResult(
                    `–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∂–µ—Å—Ç (${Math.round(result.Score * 100)}%)`,
                    '#e74c3c'
                );
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error);
            this.updateResult('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∂–µ—Å—Ç–∞', '#e74c3c');
        }
    }

    translateGestureName(englishName) {
        const translations = {
            'triangle': '–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫',
            'circle': '–ö—Ä—É–≥',
            'rectangle': '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫',
            'star': '–ó–≤–µ–∑–¥–∞',
            'arrow': '–°—Ç—Ä–µ–ª–∫–∞',
            'check': '–ì–∞–ª–æ—á–∫–∞',
            'x': 'X',
            'v': 'V',
            'caret': '–î–æ–º–∏–∫',
            'zig-zag': '–ó–∏–≥–∑–∞–≥',
            'left square bracket': '–õ–µ–≤–∞—è —Å–∫–æ–±–∫–∞',
            'right square bracket': '–ü—Ä–∞–≤–∞—è —Å–∫–æ–±–∫–∞',
            'delete': '–£–¥–∞–ª–∏—Ç—å',
            'left curly brace': '–õ–µ–≤–∞—è —Ñ–∏–≥—É—Ä–Ω–∞—è —Å–∫–æ–±–∫–∞',
            'right curly brace': '–ü—Ä–∞–≤–∞—è —Ñ–∏–≥—É—Ä–Ω–∞—è —Å–∫–æ–±–∫–∞',
            'pigtail': '–•–≤–æ—Å—Ç–∏–∫'
        };
        
        return translations[englishName] || englishName;
    }

    updateResult(text, color = '#ffffff') {
        this.resultLabel.setText(text);
        this.resultLabel.setStyle({ fill: color });
    }

    playSuccessAnimation() {
        // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        this.tweens.add({
            targets: this.resultLabel,
            scaleX: 1.1,
            scaleY: 1.1,
            duration: 200,
            yoyo: true,
            ease: 'Power2.easeInOut'
        });
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.tweens.add({
            targets: this.canvasArea,
            alpha: 0.7,
            duration: 200,
            yoyo: true,
            ease: 'Power2.easeInOut'
        });
    }

    clearCanvas() {
        // –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫—É
        this.strokeGraphics.clear();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentStroke = [];
        this.strokePoints = [];
        this.isDrawing = false;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.updateResult('–ù–∞—Ä–∏—Å—É–π—Ç–µ —Ñ–∏–≥—É—Ä—É –Ω–∞ –ø–æ–ª–µ –Ω–∏–∂–µ', '#ffffff');
        
        console.log('–•–æ–ª—Å—Ç –æ—á–∏—â–µ–Ω');
    }

    isPointInCanvas(x, y) {
        return x >= this.canvasBounds.x && 
               x <= this.canvasBounds.x + this.canvasBounds.width &&
               y >= this.canvasBounds.y && 
               y <= this.canvasBounds.y + this.canvasBounds.height;
    }

    update() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    }

    destroy() {
        // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        if (this.strokeGraphics) {
            this.strokeGraphics.destroy();
        }
    }
}
