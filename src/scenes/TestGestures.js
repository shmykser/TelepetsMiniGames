/**
 * –°—Ü–µ–Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –∂–µ—Å—Ç–æ–≤
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å —Ñ–∏–≥—É—Ä—ã –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é $Q
 */
import { QDollarRecognizer, Point } from '../utils/qdollar.js';

export class TestGestures extends Phaser.Scene {
    constructor() {
        super({ key: 'TestGestures' });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è $Q —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
        this.recognizer = null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.isDrawing = false;
        this.strokeGraphics = null;
        this.lastPoint = null;
        this.drawingPoints = []; // –¢–æ—á–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        
        // UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.clearButton = null;
        this.resultText = null;
    }

    create() {
        const { width, height } = this.scale;
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω
        this.createBackground();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º $Q —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
        this.initializeRecognizer();
        
        // –°–æ–∑–¥–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.createUI();
        
        // –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.createDrawingArea();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞
        this.setupInputHandlers();
    }

    createBackground() {
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        const graphics = this.add.graphics();
        graphics.fillGradientStyle(0x1a1a2e, 0x16213e, 0x0f3460, 0x2c3e50, 1);
        graphics.fillRect(0, 0, this.scale.width, this.scale.height);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—É—é —Ç—Ä–∞–≤—É
        this.add.tileSprite(0, 0, this.scale.width, 200, 'grass')
            .setOrigin(0, 0)
            .setAlpha(0.2);
    }

    initializeRecognizer() {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä $Q —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
        this.recognizer = new QDollarRecognizer();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∂–µ—Å—Ç –∫—Ä—É–≥–∞
        this.addCustomGestures();
        
        console.log('$Q Recognizer initialized with', this.recognizer.PointClouds.length, 'gestures');
        
        // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤
        const gestureNames = this.recognizer.PointClouds.map(cloud => cloud.Name);
        console.log('Available gestures:', gestureNames.join(', '));
    }

    addCustomGestures() {
        // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –∫—Ä—É–≥–∞
        const circlePoints = this.createCircleTemplate();
        this.recognizer.AddGesture("circle", circlePoints);
        
        // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        const trianglePoints = this.createTriangleTemplate();
        this.recognizer.AddGesture("triangle", trianglePoints);
        
        // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –ª–∏–Ω–∏–π –ø–æ–¥ —Ä–∞–∑–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        this.addLineTemplates();
        
        console.log('Added custom gestures: circle, triangle, improved lines');
    }

    createCircleTemplate() {
        // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥ –ø–æ –æ–±—Ä–∞–∑—Ü—É –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∂–µ—Å—Ç–∞ "null", –Ω–æ –±–µ–∑ —Ç–æ—á–∫–∏ –≤–Ω—É—Ç—Ä–∏
        const centerX = 50;
        const centerY = 50;
        const radius = 25;
        const numPoints = 40; // –ú–Ω–æ–≥–æ —Ç–æ—á–µ–∫ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∫—Ä—É–≥–∞
        
        const points = [];
        
        // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥ –∏–∑ –æ–¥–Ω–æ–≥–æ —à—Ç—Ä–∏—Ö–∞ (ID = 1)
        for (let i = 0; i <= numPoints; i++) {
            const angle = (2 * Math.PI * i) / numPoints;
            const x = centerX + radius * Math.cos(angle);
            const y = centerY + radius * Math.sin(angle);
            points.push(new Point(x, y, 1));
        }
        
        return points;
    }

    createTriangleTemplate() {
        // –°–æ–∑–¥–∞–µ–º —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ 3 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —à—Ç—Ä–∏—Ö–æ–≤
        const centerX = 50;
        const centerY = 50;
        const radius = 30;
        
        const points = [];
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Ä—à–∏–Ω—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        const topX = centerX;
        const topY = centerY - radius;
        const leftX = centerX - radius * Math.cos(Math.PI/6);
        const leftY = centerY + radius * Math.sin(Math.PI/6);
        const rightX = centerX + radius * Math.cos(Math.PI/6);
        const rightY = centerY + radius * Math.sin(Math.PI/6);
        
        // –®—Ç—Ä–∏—Ö 1: –ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–æ—Ç –≤–µ—Ä—Ö–Ω–µ–π –≤–µ—Ä—à–∏–Ω—ã –∫ –ª–µ–≤–æ–π –Ω–∏–∂–Ω–µ–π)
        points.push(new Point(topX, topY, 1));
        points.push(new Point(leftX, leftY, 1));
        
        // –®—Ç—Ä–∏—Ö 2: –ø—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–æ—Ç –ª–µ–≤–æ–π –Ω–∏–∂–Ω–µ–π –∫ –ø—Ä–∞–≤–æ–π –Ω–∏–∂–Ω–µ–π)
        points.push(new Point(leftX, leftY, 2));
        points.push(new Point(rightX, rightY, 2));
        
        // –®—Ç—Ä–∏—Ö 3: –≤–µ—Ä—Ö–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ (–æ—Ç –ø—Ä–∞–≤–æ–π –Ω–∏–∂–Ω–µ–π –∫ –≤–µ—Ä—Ö–Ω–µ–π –≤–µ—Ä—à–∏–Ω–µ)
        points.push(new Point(rightX, rightY, 3));
        points.push(new Point(topX, topY, 3));
        
        return points;
    }

    addLineTemplates() {
        // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –ª–∏–Ω–∏–π –ø–æ–¥ —Ä–∞–∑–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ (–∫–∞–∂–¥—ã–µ 30 –≥—Ä–∞–¥—É—Å–æ–≤)
        for (let angle = 0; angle < 180; angle += 30) {
            const linePoints = this.createLineTemplate(angle);
            this.recognizer.AddGesture("line", linePoints);
        }
        
        console.log('Added line templates for angles: 0¬∞, 30¬∞, 60¬∞, 90¬∞, 120¬∞, 150¬∞');
    }

    createLineTemplate(angleDegrees) {
        const centerX = 50;
        const centerY = 50;
        const length = 40;
        const numPoints = 20;
        
        const points = [];
        const angleRad = (angleDegrees * Math.PI) / 180;
        
        // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—ã–º —É–≥–ª–æ–º
        for (let i = 0; i <= numPoints; i++) {
            const t = (i / numPoints) - 0.5; // –æ—Ç -0.5 –¥–æ 0.5
            const x = centerX + t * length * Math.cos(angleRad);
            const y = centerY + t * length * Math.sin(angleRad);
            points.push(new Point(x, y, 1));
        }
        
        return points;
    }

    createUI() {
        const { width, height } = this.scale;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        this.add.text(width / 2, 50, 'üé® –¢–µ—Å—Ç –†–∏—Å–æ–≤–∞–Ω–∏—è —Å $Q', {
            fontSize: '28px',
            fontFamily: 'Arial',
            fill: '#ffffff',
            align: 'center',
            stroke: '#000000',
            strokeThickness: 2
        }).setOrigin(0.5, 0.5);
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        this.add.text(width / 2, 90, '–†–∏—Å—É–π—Ç–µ –∂–µ—Å—Ç—ã: T, N, D, P, X, H, I, !, line, star, circle, triangle, arrow, null', {
            fontSize: '16px',
            fontFamily: 'Arial',
            fill: '#bdc3c7',
            align: 'center'
        }).setOrigin(0.5, 0.5);
        
        // –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)
        this.resultText = this.add.text(width / 2, 120, '–ù–∞—Ä–∏—Å—É–π—Ç–µ –∂–µ—Å—Ç –Ω–∞ –ø–æ–ª–µ –Ω–∏–∂–µ', {
            fontSize: '16px',
            fontFamily: 'Arial',
            fill: '#ffffff',
            align: 'center',
            backgroundColor: '#2c3e50',
            padding: { x: 10, y: 5 }
        }).setOrigin(0.5, 0.5);
        
        // –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ)
        this.filteredResultText = this.add.text(width / 2, 160, '', {
            fontSize: '20px',
            fontFamily: 'Arial',
            fill: '#ffffff',
            align: 'center',
            backgroundColor: '#27ae60',
            padding: { x: 15, y: 8 },
            fontStyle: 'bold'
        }).setOrigin(0.5, 0.5);
        
        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        this.clearButton = this.add.rectangle(width - 100, height - 80, 150, 50, 0xe74c3c)
            .setInteractive()
            .on('pointerdown', () => this.clearCanvas())
            .on('pointerover', () => this.clearButton.setAlpha(0.8))
            .on('pointerout', () => this.clearButton.setAlpha(1));
        
        this.add.text(width - 100, height - 80, '–û—á–∏—Å—Ç–∏—Ç—å', {
            fontSize: '18px',
            fontFamily: 'Arial',
            fill: '#ffffff',
            align: 'center'
        }).setOrigin(0.5, 0.5);
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        const menuButton = this.add.rectangle(100, height - 80, 150, 50, 0x2d5a27)
            .setInteractive()
            .on('pointerdown', () => this.scene.start('MenuScene'))
            .on('pointerover', () => menuButton.setAlpha(0.8))
            .on('pointerout', () => menuButton.setAlpha(1));
        
        this.add.text(100, height - 80, 'üè† –í –º–µ–Ω—é', {
            fontSize: '18px',
            fontFamily: 'Arial',
            fill: '#ffffff',
            align: 'center'
        }).setOrigin(0.5, 0.5);
    }

    createDrawingArea() {
        const { width, height } = this.scale;
        
        // –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è (—Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞)
        const canvasX = width / 2;
        const canvasY = height / 2 + 50;
        const canvasWidth = Math.min(width - 100, 500);
        const canvasHeight = Math.min(height - 300, 400);
        
        // –§–æ–Ω –æ–±–ª–∞—Å—Ç–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.canvasArea = this.add.rectangle(canvasX, canvasY, canvasWidth, canvasHeight, 0x2c3e50)
            .setStrokeStyle(3, 0xffffff)
            .setInteractive();
        
        // –ì—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∂–µ—Å—Ç–æ–≤
        this.strokeGraphics = this.add.graphics();
        this.strokeGraphics.setDepth(10);
        
        // –¢–µ–∫—Å—Ç "–ù–∞—Ä–∏—Å—É–π—Ç–µ –∑–¥–µ—Å—å"
        this.add.text(canvasX, canvasY, '–ù–∞—Ä–∏—Å—É–π—Ç–µ –∑–¥–µ—Å—å', {
            fontSize: '24px',
            fontFamily: 'Arial',
            fill: '#7f8c8d',
            align: 'center'
        }).setOrigin(0.5, 0.5);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.canvasBounds = {
            x: canvasX - canvasWidth / 2,
            y: canvasY - canvasHeight / 2,
            width: canvasWidth,
            height: canvasHeight
        };
    }

    setupInputHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏
        this.canvasArea.on('pointerdown', this.startDrawing, this);
        this.canvasArea.on('pointermove', this.draw, this);
        this.canvasArea.on('pointerup', this.stopDrawing, this);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞—á-—Å–æ–±—ã—Ç–∏–π
        this.canvasArea.on('pointerdown', this.startDrawing, this);
        this.canvasArea.on('pointermove', this.draw, this);
        this.canvasArea.on('pointerup', this.stopDrawing, this);
    }

    startDrawing(pointer) {
        if (!this.isPointInCanvas(pointer.x, pointer.y)) return;
        
        this.isDrawing = true;
        this.lastPoint = { x: pointer.x, y: pointer.y };
        this.drawingPoints = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∂–µ—Å—Ç–∞
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∏—Å—É–Ω–æ–∫
        this.strokeGraphics.clear();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.resultText.setText('–†–∏—Å—É—é...');
        this.resultText.setStyle({ fill: '#f39c12' });
        
        console.log('–ù–∞—á–∞–ª–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –≤ —Ç–æ—á–∫–µ:', pointer.x, pointer.y);
    }

    draw(pointer) {
        if (!this.isDrawing || !this.isPointInCanvas(pointer.x, pointer.y)) return;
        
        // –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏
        if (this.lastPoint) {
            this.strokeGraphics.lineStyle(3, 0xffffff, 1);
            this.strokeGraphics.beginPath();
            this.strokeGraphics.moveTo(this.lastPoint.x, this.lastPoint.y);
            this.strokeGraphics.lineTo(pointer.x, pointer.y);
            this.strokeGraphics.strokePath();
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        this.drawingPoints.push(new Point(pointer.x, pointer.y, 1));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É
        this.lastPoint = { x: pointer.x, y: pointer.y };
    }

    stopDrawing(pointer) {
        if (!this.isDrawing) return;
        
        this.isDrawing = false;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É
        if (pointer && this.isPointInCanvas(pointer.x, pointer.y)) {
            this.drawingPoints.push(new Point(pointer.x, pointer.y, 1));
        }
        
        // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∂–µ—Å—Ç, –µ—Å–ª–∏ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫
        if (this.drawingPoints.length >= 5) {
            this.recognizeGesture();
        } else {
            this.resultText.setText('–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∂–µ—Å—Ç. –ù–∞—Ä–∏—Å—É–π—Ç–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É.');
            this.resultText.setStyle({ fill: '#e74c3c' });
        }
        
        console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è. –¢–æ—á–µ–∫:', this.drawingPoints.length);
    }

    recognizeGesture() {
        try {
            // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∂–µ—Å—Ç —Å –ø–æ–º–æ—â—å—é $Q
            const result = this.recognizer.Recognize(this.drawingPoints);
            
            console.log('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç $Q:', result);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (result.Name === 'No match.') {
                this.resultText.setText('–ñ–µ—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω');
                this.resultText.setStyle({ fill: '#e74c3c' });
            } else {
                const gestureName = this.translateGestureName(result.Name);
                this.resultText.setText(`$Q: ${gestureName} (${Math.round(result.Score * 100)}%)`);
                this.resultText.setStyle({ fill: '#f39c12' });
            }
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            const filteredResult = this.filterGestureResult(result);
            this.displayFilteredResult(filteredResult);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error);
            this.resultText.setText('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è');
            this.resultText.setStyle({ fill: '#e74c3c' });
            this.filteredResultText.setText('–û–®–ò–ë–ö–ê');
            this.filteredResultText.setStyle({ backgroundColor: '#e74c3c' });
        }
    }

    displayFilteredResult(filteredResult) {
        const { name, score, color } = filteredResult;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–µ–π–±–ª
        this.filteredResultText.setText(`${name} (${score}%)`);
        this.filteredResultText.setStyle({ backgroundColor: color });
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        if (name !== '–ù–ï –†–ê–°–ü–û–ó–ù–ê–ù–û') {
            this.playSuccessAnimation();
        }
        
        console.log('–ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:', name, score + '%');
    }

    isLikelyLine() {
        if (this.drawingPoints.length < 3) return false;
        
        // –ù–∞—Ö–æ–¥–∏–º –∫—Ä–∞–π–Ω–∏–µ —Ç–æ—á–∫–∏
        let minX = Infinity, maxX = -Infinity, minY = Infinity, maxY = -Infinity;
        for (const point of this.drawingPoints) {
            minX = Math.min(minX, point.X);
            maxX = Math.max(maxX, point.X);
            minY = Math.min(minY, point.Y);
            maxY = Math.max(maxY, point.Y);
        }
        
        const width = maxX - minX;
        const height = maxY - minY;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        const aspectRatio = Math.max(width, height) / Math.min(width, height);
        
        // –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ –Ω–∞–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –¥—Ä—É–≥–æ–π, —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ª–∏–Ω–∏—è
        return aspectRatio > 3;
    }

    filterGestureResult(originalResult) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ 4 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const gestureName = originalResult.Name;
        const score = originalResult.Score;
        
        // –õ–ò–ù–ò–Ø: –µ—Å–ª–∏ $Q —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–∞–∫ line, exclamation, I, H, –∏–ª–∏ –≥–µ–æ–º–µ—Ç—Ä–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏–Ω–∏—é
        if (gestureName === 'line' || gestureName === 'exclamation' || gestureName === 'I' || gestureName === 'H' || this.isLikelyLine()) {
            return { name: '–õ–ò–ù–ò–Ø', score: Math.round(score * 100), color: '#27ae60' };
        }
        
        // –ö–†–£–ì: —Ä–∞—Å–ø–æ–∑–Ω–∞–ª—Å—è –∫–∞–∫ circle, null (–∫—Ä—É–≥ —Å —Ç–æ—á–∫–æ–π), –∏–ª–∏ D
        if (gestureName === 'circle' || gestureName === 'null' || gestureName === 'D') {
            return { name: '–ö–†–£–ì', score: Math.round(score * 100), color: '#3498db' };
        }
        
        // –¢–†–ï–£–ì–û–õ–¨–ù–ò–ö: —Ä–∞—Å–ø–æ–∑–Ω–∞–ª—Å—è –∫–∞–∫ triangle –∏–ª–∏ P
        if (gestureName === 'triangle' || gestureName === 'P') {
            return { name: '–¢–†–ï–£–ì–û–õ–¨–ù–ò–ö', score: Math.round(score * 100), color: '#e67e22' };
        }
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∂–µ—Å—Ç—ã —Å—á–∏—Ç–∞–µ–º –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º–∏
        return { name: '–ù–ï –†–ê–°–ü–û–ó–ù–ê–ù–û', score: 0, color: '#e74c3c' };
    }

    playSuccessAnimation() {
        // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–µ–π–±–ª–∞
        this.tweens.add({
            targets: this.filteredResultText,
            scaleX: 1.1,
            scaleY: 1.1,
            duration: 200,
            yoyo: true,
            ease: 'Power2.easeInOut'
        });
    }

    translateGestureName(englishName) {
        const translations = {
            'circle': '–ö—Ä—É–≥',
            'triangle': '–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫',
            'T': '–ë—É–∫–≤–∞ T',
            'N': '–ë—É–∫–≤–∞ N', 
            'D': '–ë—É–∫–≤–∞ D',
            'P': '–ë—É–∫–≤–∞ P',
            'X': '–ë—É–∫–≤–∞ X',
            'H': '–ë—É–∫–≤–∞ H',
            'I': '–ë—É–∫–≤–∞ I',
            'exclamation': '–í–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ (!)',
            'line': '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è',
            'five-point star': '–ü—è—Ç–∏–∫–æ–Ω–µ—á–Ω–∞—è –∑–≤–µ–∑–¥–∞',
            'six-point star': '–®–µ—Å—Ç–∏–∫–æ–Ω–µ—á–Ω–∞—è –∑–≤–µ–∑–¥–∞',
            'asterisk': '–ó–≤–µ–∑–¥–æ—á–∫–∞ (*)',
            'null': '–ù–æ–ª—å (–∫—Ä—É–≥ —Å —Ç–æ—á–∫–æ–π)',
            'arrowhead': '–°—Ç—Ä–µ–ª–∫–∞',
            'pitchfork': '–í–∏–ª—ã',
            'half-note': '–ü–æ–ª–æ–≤–∏–Ω–Ω–∞—è –Ω–æ—Ç–∞'
        };
        
        return translations[englishName] || englishName;
    }

    clearCanvas() {
        // –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫—É
        this.strokeGraphics.clear();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.isDrawing = false;
        this.lastPoint = null;
        this.drawingPoints = [];
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.resultText.setText('–ù–∞—Ä–∏—Å—É–π—Ç–µ –∂–µ—Å—Ç –Ω–∞ –ø–æ–ª–µ –Ω–∏–∂–µ');
        this.resultText.setStyle({ fill: '#ffffff' });
        
        this.filteredResultText.setText('');
        this.filteredResultText.setStyle({ backgroundColor: '#27ae60' });
        
        console.log('–•–æ–ª—Å—Ç –æ—á–∏—â–µ–Ω');
    }

    isPointInCanvas(x, y) {
        return x >= this.canvasBounds.x && 
               x <= this.canvasBounds.x + this.canvasBounds.width &&
               y >= this.canvasBounds.y && 
               y <= this.canvasBounds.y + this.canvasBounds.height;
    }

    update() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    }

    destroy() {
        // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        if (this.strokeGraphics) {
            this.strokeGraphics.destroy();
        }
    }
}
