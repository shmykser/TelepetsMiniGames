/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ü–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–º–∫–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—Ç–∏–≤–Ω—ã–µ Phaser –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–±–µ–∑ HTML)
 */

import { LOCK_TYPES, LOCK_LEVELS, LOCK_CONFIGS } from '../types/lockTypes.js';

export class TestLocks extends Phaser.Scene {
    constructor() {
        super({ key: 'TestLocks' });
        
        this.selectedType = LOCK_TYPES.SIMPLE;
        this.selectedLevel = LOCK_LEVELS.EASY;
        this.typeButtons = [];
        this.levelButtons = [];
    }

    create() {
        const { width, height } = this.scale;

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        this.add.text(width / 2, 60, 'üîí –¢–ï–°–¢ –ó–ê–ú–ö–û–í', {
            fontSize: '32px',
            fontFamily: 'Arial',
            color: '#ffffff',
            stroke: '#000000',
            strokeThickness: 4
        }).setOrigin(0.5);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –æ—Ç–º—ã—á–∫–∏)
        this.createTestPet();

        // UI –≤—ã–±–æ—Ä–∞
        this.createTypeSelector();
        this.createLevelSelector();
        this.createActionButtons();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ –æ—Ç–º—ã—á–∫–∞–º–∏
     */
    createTestPet() {
        this.testPet = {
            inventory: {
                items: {
                    lockpicks: Infinity // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –æ—Ç–º—ã—á–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                },
                get(key) {
                    return this.items[key];
                },
                set(key, value) {
                    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    console.log(`üéí [TestPet] –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ${key}: ${value} (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)`);
                }
            },
            scene: this
        };
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ Phaser Graphics –∏ Text
     */
    createButton(x, y, width, height, text, style = {}) {
        // –§–æ–Ω –∫–Ω–æ–ø–∫–∏ - Graphics —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        const bg = this.add.graphics();
        bg.fillStyle(style.backgroundColor || 0x333333, 1);
        bg.fillRoundedRect(x - width/2, y - height/2, width, height, 8);
        bg.lineStyle(style.borderWidth || 2, style.borderColor || 0x666666, 1);
        bg.strokeRoundedRect(x - width/2, y - height/2, width, height, 8);
        
        // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        const label = this.add.text(x, y, text, {
            fontSize: style.fontSize || '16px',
            fontFamily: 'Arial',
            color: style.color || '#ffffff',
            fontStyle: style.fontWeight || 'normal'
        }).setOrigin(0.5);
        
        // –î–µ–ª–∞–µ–º Graphics –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –Ω–∞–ø—Ä—è–º—É—é
        bg.setInteractive(
            new Phaser.Geom.Rectangle(x - width/2, y - height/2, width, height), 
            Phaser.Geom.Rectangle.Contains
        );
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–≤–µ–¥–µ–Ω–∏—è
        bg.on('pointerover', () => {
            bg.clear();
            bg.fillStyle(style.hoverColor || 0x555555, 1);
            bg.fillRoundedRect(x - width/2, y - height/2, width, height, 8);
            bg.lineStyle(style.borderWidth || 2, style.borderColor || 0x666666, 1);
            bg.strokeRoundedRect(x - width/2, y - height/2, width, height, 8);
        });
        
        bg.on('pointerout', () => {
            bg.clear();
            bg.fillStyle(style.backgroundColor || 0x333333, 1);
            bg.fillRoundedRect(x - width/2, y - height/2, width, height, 8);
            bg.lineStyle(style.borderWidth || 2, style.borderColor || 0x666666, 1);
            bg.strokeRoundedRect(x - width/2, y - height/2, width, height, 8);
        });
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å bg –∫–∞–∫ container –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return { container: bg, bg, label, x, y, width, height };
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
     */
    updateButtonStyle(button, style) {
        const { bg, x, y, width, height } = button;
        
        bg.clear();
        bg.fillStyle(style.backgroundColor || 0x333333, 1);
        bg.fillRoundedRect(x - width/2, y - height/2, width, height, 8);
        bg.lineStyle(style.borderWidth || 2, style.borderColor || 0x666666, 1);
        bg.strokeRoundedRect(x - width/2, y - height/2, width, height, 8);
    }

    /**
     * –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–º–∫–∞
     */
    createTypeSelector() {
        const { width } = this.scale;
        const y = 150;

        this.add.text(width / 2, y, '–¢–ò–ü –ó–ê–ú–ö–ê:', {
            fontSize: '18px',
            fontFamily: 'Arial',
            color: '#ffff00'
        }).setOrigin(0.5);

        const types = [
            { type: LOCK_TYPES.SIMPLE, label: 'üîì –ü—Ä–æ—Å—Ç–æ–π' },
            { type: LOCK_TYPES.MAZE, label: 'üß© –õ–∞–±–∏—Ä–∏–Ω—Ç' },
            { type: LOCK_TYPES.PATTERN, label: 'üéØ –ü–∞—Ç—Ç–µ—Ä–Ω' }
        ];

        types.forEach((item, index) => {
            const button = this.createButton(
                width / 2 - 110 + index * 110, 
                y + 50, 
                100, 
                60, 
                item.label,
                {
                    fontSize: '14px',
                    fontWeight: 'bold',
                    backgroundColor: 0x333333,
                    borderColor: 0x666666,
                    hoverColor: 0x555555
                }
            );
            
            button.container.on('pointerdown', () => {
                this.selectedType = item.type;
                this.updateButtons();
            });

            this.typeButtons.push({ button, type: item.type });
        });

        this.updateButtons();
    }

    /**
     * –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
     */
    createLevelSelector() {
        const { width } = this.scale;
        const y = 280;

        this.add.text(width / 2, y, '–°–õ–û–ñ–ù–û–°–¢–¨:', {
            fontSize: '18px',
            fontFamily: 'Arial',
            color: '#ffff00'
        }).setOrigin(0.5);

        const levels = [
            { level: LOCK_LEVELS.EASY, label: '–õ—ë–≥–∫–∏–π' },
            { level: LOCK_LEVELS.MEDIUM, label: '–°—Ä–µ–¥–Ω–∏–π' },
            { level: LOCK_LEVELS.HARD, label: '–°–ª–æ–∂–Ω—ã–π' }
        ];

        levels.forEach((item, index) => {
            const button = this.createButton(
                width / 2 - 110 + index * 110, 
                y + 50, 
                100, 
                50, 
                item.label,
                {
                    fontSize: '14px',
                    fontWeight: 'bold',
                    backgroundColor: 0x333333,
                    borderColor: 0x666666,
                    hoverColor: 0x555555
                }
            );
            
            button.container.on('pointerdown', () => {
                this.selectedLevel = item.level;
                this.updateButtons();
            });

            this.levelButtons.push({ button, level: item.level });
        });

        this.updateButtons();
    }

    /**
     * –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
     */
    createActionButtons() {
        const { width, height } = this.scale;

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        const startButton = this.createButton(
            width / 2, 
            height - 120, 
            200, 
            60, 
            'üîì –¢–ï–°–¢–ò–†–û–í–ê–¢–¨',
            {
                fontSize: '18px',
                fontWeight: 'bold',
                backgroundColor: 0x4CAF50,
                borderColor: 0x45a049,
                hoverColor: 0x45a049
            }
        );
        startButton.container.on('pointerdown', () => this.startTest());

        // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        const exitButton = this.createButton(
            width / 2, 
            height - 50, 
            150, 
            40, 
            '‚ùå –û—Ç–º–µ–Ω–∞',
            {
                fontSize: '14px',
                fontWeight: 'bold',
                backgroundColor: 0xf44336,
                borderColor: 0xda190b,
                hoverColor: 0xda190b
            }
        );
        exitButton.container.on('pointerdown', () => this.scene.start('MenuScene'));
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
     */
    updateButtons() {
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–∏–ø–æ–≤
        this.typeButtons.forEach(({ button, type }) => {
            const isSelected = type === this.selectedType;
            this.updateButtonStyle(button, {
                backgroundColor: isSelected ? 0x2196F3 : 0x333333,
                borderColor: isSelected ? 0xffff00 : 0x666666,
                borderWidth: isSelected ? 3 : 2
            });
        });

        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —É—Ä–æ–≤–Ω–µ–π
        this.levelButtons.forEach(({ button, level }) => {
            const isSelected = level === this.selectedLevel;
            this.updateButtonStyle(button, {
                backgroundColor: isSelected ? 0x2196F3 : 0x333333,
                borderColor: isSelected ? 0xffff00 : 0x666666,
                borderWidth: isSelected ? 3 : 2
            });
        });
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
     */
    startTest() {
        console.log('üîì [TestLocks] –ó–∞–ø—É—Å–∫:', this.selectedType, '—É—Ä–æ–≤–µ–Ω—å', this.selectedLevel);

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–º–∫–∞
        const lockConfig = LOCK_CONFIGS[this.selectedType];
        const difficultyConfig = lockConfig.difficulty[this.selectedLevel];

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω—É –ø–æ —Ç–∏–ø—É –∑–∞–º–∫–∞
        const sceneMap = {
            [LOCK_TYPES.SIMPLE]: 'SimpleLockScene',
            [LOCK_TYPES.MAZE]: 'MazeLockScene',
            [LOCK_TYPES.PATTERN]: 'PatternLockScene'
        };
        const sceneKey = sceneMap[this.selectedType];

        // –£—Å—ã–ø–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É (–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç update –ò —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥)
        this.scene.sleep();

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω—É –≤–∑–ª–æ–º–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        this.scene.launch(sceneKey, {
            pet: this.testPet,
            lockType: this.selectedType,
            lockLevel: this.selectedLevel,
            config: difficultyConfig,
            cost: 0, // –°—Ç–æ–∏–º–æ—Å—Ç—å 0 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ —Ç—Ä–∞—Ç–∏–º –æ—Ç–º—ã—á–∫–∏)
            lock: {
                type: this.selectedType,
                level: this.selectedLevel,
                onPickSuccess: () => {
                    console.log('‚úÖ [TestLocks] –£—Å–ø–µ—Ö!');
                },
                onPickFailed: () => {
                    console.log('‚ùå [TestLocks] –ü—Ä–æ–≤–∞–ª!');
                }
            }
        });

        // –°–ª—É—à–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç
        const lockScene = this.scene.get(sceneKey);
        if (lockScene) {
            lockScene.events.once('shutdown', () => {
                // –ü—Ä–æ–±—É–∂–¥–∞–µ–º —Å—Ü–µ–Ω—É (–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç update –ò —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥)
                this.scene.wake();
            });
        }
    }
}
