import { Button } from '../components/Button.js';
import { HealthBar } from '../components/HealthBar.js';
import { GameTimer } from '../components/GameTimer.js';
import { DamageIndicator } from '../components/DamageIndicator.js';
import { ResultsTable, createResultsTable } from '../components/ResultsTable.js';
import { UI_THEME } from '../utils/UITheme.js';

/**
 * –°—Ü–µ–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
export class DemoComponents extends Phaser.Scene {
    constructor() {
        super({ key: 'DemoComponents' });
        
        this.components = [];
        this.currentDemo = 0;
        this.demos = [
            'results',
            'buttons',
            'health',
            'timer',
            'damage'
        ];
    }

    create() {
        // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω
        this.createBackground();
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        this.createTitle();
        
        // –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        this.createNavigation();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–º–æ
        this.showDemo(this.demos[this.currentDemo]);
    }

    createBackground() {
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        const graphics = this.add.graphics();
        graphics.fillGradientStyle(0x0b1221, 0x1a1a2e, 0x16213e, 0x0f3460, 1);
        graphics.fillRect(0, 0, this.scale.width, this.scale.height);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—É—é —Ç—Ä–∞–≤—É
        this.add.tileSprite(0, 0, this.scale.width, 200, 'grass')
            .setOrigin(0, 0)
            .setAlpha(0.3);
    }

    createTitle() {
        this.title = this.add.text(
            this.scale.width / 2,
            50,
            'üé® –î–µ–º–æ UI –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
            {
                fontSize: '32px',
                fontFamily: 'Arial',
                fill: '#ffffff',
                align: 'center',
                stroke: '#000000',
                strokeThickness: 2
            }
        );
        this.title.setOrigin(0.5, 0.5);
    }

    createNavigation() {
        const navY = this.scale.height - 80;
        const navWidth = this.scale.width - 100;
        
        // –§–æ–Ω –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navBg = this.add.graphics();
        navBg.fillStyle(0x000000, 0.7);
        navBg.fillRoundedRect(50, navY - 30, navWidth, 60, 10);
        navBg.lineStyle(2, 0xffffff);
        navBg.strokeRoundedRect(50, navY - 30, navWidth, 60, 10);
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        this.backButton = new Button(this, 120, navY, {
            width: 100,
            height: 40,
            text: '‚óÄ –ù–∞–∑–∞–¥',
            backgroundColor: 0x4a4a6a,
            textColor: '#ffffff',
            fontSize: '16px'
        });
        this.backButton.onButtonClick = () => this.previousDemo();
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –¥–µ–º–æ
        this.demoInfo = this.add.text(
            this.scale.width / 2,
            navY,
            this.getDemoTitle(this.demos[this.currentDemo]),
            {
                fontSize: '18px',
                fontFamily: 'Arial',
                fill: '#ffffff',
                align: 'center'
            }
        );
        this.demoInfo.setOrigin(0.5, 0.5);
        
        // –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        this.nextButton = new Button(this, this.scale.width - 120, navY, {
            width: 100,
            height: 40,
            text: '–í–ø–µ—Ä–µ–¥ ‚ñ∂',
            backgroundColor: 0x4a4a6a,
            textColor: '#ffffff',
            fontSize: '16px'
        });
        this.nextButton.onButtonClick = () => this.nextDemo();
        
        // –ö–Ω–æ–ø–∫–∞ "–í –º–µ–Ω—é"
        this.menuButton = new Button(this, this.scale.width / 2, navY + 60, {
            width: 150,
            height: 40,
            text: 'üè† –í –º–µ–Ω—é',
            backgroundColor: 0x2d5a27,
            textColor: '#ffffff',
            fontSize: '16px'
        });
        this.menuButton.onButtonClick = () => this.scene.start('MenuScene');
    }

    getDemoTitle(demoType) {
        const titles = {
            'results': 'üìä –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
            'buttons': 'üîò –ö–Ω–æ–ø–∫–∏',
            'health': '‚ù§Ô∏è –ü–æ–ª–æ—Å–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è',
            'timer': '‚è±Ô∏è –¢–∞–π–º–µ—Ä',
            'damage': 'üí• –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–Ω–∞'
        };
        return titles[demoType] || demoType;
    }

    showDemo(demoType) {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        this.clearComponents();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–º–æ
        this.demoInfo.setText(this.getDemoTitle(demoType));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–µ–º–æ
        switch (demoType) {
            case 'results':
                this.showResultsDemo();
                break;
            case 'buttons':
                this.showButtonsDemo();
                break;
            case 'health':
                this.showHealthDemo();
                break;
            case 'timer':
                this.showTimerDemo();
                break;
            case 'damage':
                this.showDamageDemo();
                break;
        }
    }

    showResultsDemo() {
        const centerX = this.scale.width / 2;
        const centerY = this.scale.height / 2;
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('Creating results demo at:', centerX, centerY);
        
        // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É
        const simpleData = {
            '–¢–µ—Å—Ç': '–ó–Ω–∞—á–µ–Ω–∏–µ',
            '–í—Ä–µ–º—è': '3:25'
        };
        
        this.resultsTable1 = new ResultsTable(this, centerX, centerY, {
            title: '–¢–µ—Å—Ç',
            data: simpleData,
            width: 300,
            height: 150,
            backgroundColor: 0x8B0000,
            backgroundAlpha: 0.9,
            borderColor: 0xFF6B6B,
            titleColor: '#FFB6C1',
            textColor: '#FFE4E1'
        });
        
        console.log('Created resultsTable1:', this.resultsTable1);
        this.components.push(this.resultsTable1);
        
        // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const testRect = this.add.rectangle(centerX, centerY, 200, 100, 0x00ff00);
        testRect.setDepth(200);
        console.log('Created test rectangle at:', centerX, centerY);
        this.components.push(testRect);
        
        // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const testText = this.add.text(centerX, centerY + 150, '–¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–∞', {
            fontSize: '24px',
            fill: '#ffffff'
        });
        testText.setOrigin(0.5, 0.5);
        testText.setDepth(200);
        console.log('Created test text at:', centerX, centerY + 150);
        this.components.push(testText);
    }

    showButtonsDemo() {
        const centerX = this.scale.width / 2;
        const centerY = this.scale.height / 2;
        
        // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫
        const buttonStyles = [
            {
                text: '–û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞',
                backgroundColor: 0x4CAF50,
                textColor: '#ffffff',
                y: centerY - 100
            },
            {
                text: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
                backgroundColor: 0xFF9800,
                textColor: '#ffffff',
                y: centerY - 50
            },
            {
                text: '–û–ø–∞—Å–Ω–æ—Å—Ç—å',
                backgroundColor: 0xF44336,
                textColor: '#ffffff',
                y: centerY
            },
            {
                text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                backgroundColor: 0x2196F3,
                textColor: '#ffffff',
                y: centerY + 50
            },
            {
                text: '–í—Ç–æ—Ä–∏—á–Ω–∞—è',
                backgroundColor: 0x9E9E9E,
                textColor: '#ffffff',
                y: centerY + 100
            }
        ];
        
        buttonStyles.forEach((style, index) => {
            const button = new Button(this, centerX, style.y, {
                width: 200,
                height: 45,
                text: style.text,
                backgroundColor: style.backgroundColor,
                textColor: style.textColor,
                fontSize: '16px',
                borderRadius: 8
            });
            
            button.onButtonClick = () => {
                this.showButtonFeedback(button, style.text);
            };
            
            this.components.push(button);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            button.setAlpha(0);
            button.setScale(0.8);
            this.tweens.add({
                targets: button,
                alpha: 1,
                scaleX: 1,
                scaleY: 1,
                duration: 300,
                delay: index * 100,
                ease: 'Back.easeOut'
            });
        });
    }

    showButtonFeedback(button, text) {
        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
        this.tweens.add({
            targets: button,
            scaleX: 0.95,
            scaleY: 0.95,
            duration: 100,
            yoyo: true,
            ease: 'Power2.easeInOut'
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const feedback = this.add.text(
            button.x,
            button.y - 60,
            `–ù–∞–∂–∞—Ç–∞: ${text}`,
            {
                fontSize: '14px',
                fontFamily: 'Arial',
                fill: '#ffffff',
                align: 'center',
                backgroundColor: '#000000',
                padding: { x: 10, y: 5 }
            }
        );
        feedback.setOrigin(0.5, 0.5);
        
        this.tweens.add({
            targets: feedback,
            alpha: 0,
            y: feedback.y - 30,
            duration: 1000,
            ease: 'Power2.easeOut',
            onComplete: () => feedback.destroy()
        });
    }

    showHealthDemo() {
        const centerX = this.scale.width / 2;
        const centerY = this.scale.height / 2;
        
        // –ü–æ–ª–æ—Å–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
        const healthLevels = [
            { health: 100, label: '–ü–æ–ª–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ', color: 0x00FF00 },
            { health: 75, label: '–•–æ—Ä–æ—à–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ', color: 0x80FF00 },
            { health: 50, label: '–°—Ä–µ–¥–Ω–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ', color: 0xFFFF00 },
            { health: 25, label: '–ù–∏–∑–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ', color: 0xFF8000 },
            { health: 10, label: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ', color: 0xFF0000 }
        ];
        
        healthLevels.forEach((level, index) => {
            const y = centerY - 120 + (index * 60);
            
            // –ü–æ–¥–ø–∏—Å—å
            const label = this.add.text(
                centerX - 150,
                y,
                level.label,
                {
                    fontSize: '16px',
                    fontFamily: 'Arial',
                    fill: '#ffffff',
                    align: 'left'
                }
            );
            label.setOrigin(0, 0.5);
            this.components.push(label);
            
        // –ü–æ–ª–æ—Å–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        const mockTarget = { health: level.health, maxHealth: 100 };
        const healthBar = new HealthBar(this, mockTarget, {
            barWidth: 200,
            barHeight: 20,
            offsetX: centerX + 50 - this.scale.width / 2,
            offsetY: y - this.scale.height / 2,
            backgroundColor: 0x333333,
            healthColor: level.color,
            borderColor: 0xffffff,
            borderWidth: 1,
            showText: true
        });
            
            this.components.push(healthBar);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            healthBar.setAlpha(0);
            this.tweens.add({
                targets: healthBar,
                alpha: 1,
                duration: 500,
                delay: index * 200,
                ease: 'Power2.easeOut'
            });
        });
    }

    showTimerDemo() {
        const centerX = this.scale.width / 2;
        const centerY = this.scale.height / 2;
        
        // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        this.gameTimer = new GameTimer(this, centerX, centerY - 50, {
            timeLimit: 30,
            backgroundColor: 0x1a1a2e,
            color: '#ffffff',
            fontSize: '24px',
            borderColor: 0x4a4a6a,
            borderWidth: 2,
            showProgress: true
        });
        
        this.components.push(this.gameTimer);
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const startButton = new Button(this, centerX - 120, centerY + 50, {
            width: 100,
            height: 40,
            text: '–°—Ç–∞—Ä—Ç',
            backgroundColor: 0x4CAF50,
            textColor: '#ffffff'
        });
        startButton.onButtonClick = () => {
            this.gameTimer.start(30);
        };
        
        const pauseButton = new Button(this, centerX, centerY + 50, {
            width: 100,
            height: 40,
            text: '–°—Ç–æ–ø',
            backgroundColor: 0xFF9800,
            textColor: '#ffffff'
        });
        pauseButton.onButtonClick = () => {
            this.gameTimer.stop();
        };
        
        const resetButton = new Button(this, centerX + 120, centerY + 50, {
            width: 100,
            height: 40,
            text: '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫',
            backgroundColor: 0xF44336,
            textColor: '#ffffff'
        });
        resetButton.onButtonClick = () => {
            this.gameTimer.start(30);
        };
        
        this.components.push(startButton, pauseButton, resetButton);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        this.components.forEach((component, index) => {
            component.setAlpha(0);
            component.setScale(0.8);
            this.tweens.add({
                targets: component,
                alpha: 1,
                scaleX: 1,
                scaleY: 1,
                duration: 400,
                delay: index * 150,
                ease: 'Back.easeOut'
            });
        });
    }

    showDamageDemo() {
        const centerX = this.scale.width / 2;
        const centerY = this.scale.height / 2;
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–Ω–∞
        this.damageIndicator = new DamageIndicator(this, centerX, centerY, 0);
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const damageButton = new Button(this, centerX - 150, centerY + 100, {
            width: 120,
            height: 40,
            text: '–£—Ä–æ–Ω -50',
            backgroundColor: 0xF44336,
            textColor: '#ffffff'
        });
        damageButton.onButtonClick = () => {
            DamageIndicator.showDamage(this, { x: centerX, y: centerY - 100 }, -50);
        };
        
        const healButton = new Button(this, centerX, centerY + 100, {
            width: 120,
            height: 40,
            text: '–õ–µ—á–µ–Ω–∏–µ +30',
            backgroundColor: 0x4CAF50,
            textColor: '#ffffff'
        });
        healButton.onButtonClick = () => {
            DamageIndicator.showDamage(this, { x: centerX, y: centerY - 100 }, 30);
        };
        
        const critButton = new Button(this, centerX + 150, centerY + 100, {
            width: 120,
            height: 40,
            text: '–ö—Ä–∏—Ç -100',
            backgroundColor: 0x9C27B0,
            textColor: '#ffffff'
        });
        critButton.onButtonClick = () => {
            DamageIndicator.showDamage(this, { x: centerX, y: centerY - 100 }, -100);
        };
        
        this.components.push(damageButton, healButton, critButton);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        this.components.forEach((component, index) => {
            component.setAlpha(0);
            component.setScale(0.8);
            this.tweens.add({
                targets: component,
                alpha: 1,
                scaleX: 1,
                scaleY: 1,
                duration: 400,
                delay: index * 150,
                ease: 'Back.easeOut'
            });
        });
    }

    clearComponents() {
        this.components.forEach(component => {
            if (component && component.destroy) {
                component.destroy();
            }
        });
        this.components = [];
    }

    nextDemo() {
        this.currentDemo = (this.currentDemo + 1) % this.demos.length;
        this.showDemo(this.demos[this.currentDemo]);
    }

    previousDemo() {
        this.currentDemo = (this.currentDemo - 1 + this.demos.length) % this.demos.length;
        this.showDemo(this.demos[this.currentDemo]);
    }

    update() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        this.components.forEach(component => {
            if (component && component.update) {
                component.update();
            }
        });
    }
}
