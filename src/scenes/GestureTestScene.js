import Phaser from 'phaser';
import { ActionManager } from '../systems/actions/ActionManager';
import { GestureManager } from '../systems/gesture/GestureManager';
import { ItemDropManager } from '../systems/ItemDropManager';
import { TextureManager } from '../core/TextureManager';
import { WaveManager } from '../core/WaveManager';
import { GameTimer, WaveIndicator } from '../components';
import { Egg } from '../core/objects/Egg';
import { settings } from '../../config/settings';
/**
 * –°—Ü–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–µ—Å—Ç–æ–≤ —Å –≤—Ä–∞–≥–∞–º–∏
 */
export class GestureTestScene extends Phaser.Scene {
    constructor() {
        super({ key: 'GestureTestScene' });
        Object.defineProperty(this, "waveManager", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "actionManager", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "gameTimer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "waveIndicator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "egg", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    create() {
        const { width, height } = this.scale;
        // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—É—Ä—ã
        TextureManager.createAllTextures(this);
        // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω
        this.add.rectangle(width / 2, height / 2, width, height, 0x2c3e50);
        
        // –°–æ–∑–¥–∞–µ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        this.createUI();
        
        // –°–æ–∑–¥–∞–µ–º —è–π—Ü–æ –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞
        this.createEgg();
        
        // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤–æ–ª–Ω
        this.waveManager = new WaveManager(this);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupGameEvents();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        this.initializeManagers();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        this.startGame();
    }
    createUI() {
        const { width, height } = this.scale;
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ–ª–Ω—ã (–≤–≤–µ—Ä—Ö—É —Å–ª–µ–≤–∞)
        this.waveIndicator = new WaveIndicator(this, 125, 60, settings.game.ui.waveIndicator);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –∏–≥—Ä—ã (–≤–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞)
        this.gameTimer = new GameTimer(this, width - 75, 60, settings.game.ui.timer);
    }

    createEgg() {
        const { width, height } = this.scale;
        
        // –°–æ–∑–¥–∞–µ–º —è–π—Ü–æ –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞
        this.egg = Egg.CreateEgg(this, width / 2, height / 2, {
            health: 100,
            texture: 'egg'
        });
        
    }

    setupGameEvents() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        this.events.on('gameStarted', (gameData) => {
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            this.gameTimer.start(gameData.duration);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –º–∏–Ω—É—Ç—ã
        this.events.on('minuteChanged', (minuteData) => {
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ–ª–Ω—ã
            this.waveIndicator.updateWave({
                waveNumber: minuteData.minute,
                waveName: `–ú–∏–Ω—É—Ç–∞ ${minuteData.minute}`,
                maxWaves: settings.game.maxWaves
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∞–≤–Ω–∞ –≤—Ä–∞–≥–∞
        this.events.on('enemySpawned', (spawnData) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Ä–∞–≥–æ–≤
            this.updateEnemyCount();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ—Ä—Ç–∏ –≤—Ä–∞–≥–∞
        this.events.on('enemyKilled', (killData) => {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            this.itemDropManager.onEnemyKilled(killData.enemy);
            this.updateEnemyCount();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        this.events.on('gameEnded', (endData) => {
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            this.gameTimer.stop();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞–π–º–µ—Ä–∞
        this.gameTimer.on('warningTime', () => {
            this.waveIndicator.showDifficultyWarning();
        });
        
        this.gameTimer.on('criticalTime', () => {
            this.waveIndicator.showDifficultyWarning();
        });
        
        this.gameTimer.on('timeUp', () => {
        });
    }

    initializeManagers() {
        // –°–æ–∑–¥–∞–µ–º ItemDropManager
        this.itemDropManager = new ItemDropManager(this, this.egg);
        
        // –°–æ–∑–¥–∞–µ–º ActionManager —Å –≤—Ä–∞–≥–∞–º–∏ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–æ–ª–Ω –∏ —è–π—Ü–æ–º
        this.actionManager = new ActionManager(this, this.waveManager.enemies, [], this.egg, this.itemDropManager);
        
        // –°–æ–∑–¥–∞–µ–º GestureManager —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∂–µ—Å—Ç–æ–≤
        this.gestureManager = new GestureManager(this, {
            onTap: (gesture) => {
                console.log(`üëÜ –¢–∞–ø –≤ –ø–æ–∑–∏—Ü–∏–∏: (${gesture.x}, ${gesture.y})`);
                this.actionManager.handleGesture(gesture);
            },
            onDoubleTap: (gesture) => {
                console.log(`üëÜüëÜ –î–≤–æ–π–Ω–æ–π —Ç–∞–ø –≤ –ø–æ–∑–∏—Ü–∏–∏: (${gesture.x}, ${gesture.y})`);
                this.actionManager.handleGesture(gesture);
            },
            onLongTap: (gesture) => {
                console.log(`üëÜ‚è∞ –î–æ–ª–≥–∏–π —Ç–∞–ø –≤ –ø–æ–∑–∏—Ü–∏–∏: (${gesture.x}, ${gesture.y})`);
                this.actionManager.handleGesture(gesture);
            },
            onSwipe: (gesture) => {
                console.log(`üëÜ‚û°Ô∏è –°–≤–∞–π–ø ${gesture.direction} –≤ –ø–æ–∑–∏—Ü–∏–∏: (${gesture.x}, ${gesture.y})`);
                this.actionManager.handleGesture(gesture);
            }
        });
    }

    startGame() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–π—Ü–æ –∫–∞–∫ —Ü–µ–ª—å –¥–ª—è –≤—Ä–∞–≥–æ–≤
        if (this.egg && this.waveManager) {
            this.waveManager.setTarget(this.egg);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –≤–æ–ª–Ω
        this.waveManager.startGame();
    }

    updateEnemyCount() {
        if (this.waveIndicator && this.waveManager) {
            this.waveIndicator.updateEnemyCount(this.waveManager.currentEnemiesOnScreen);
        }
    }
    update() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤–æ–ª–Ω
        if (this.waveManager) {
            this.waveManager.update();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–∞–≥–æ–≤ (–¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ü–µ–ª–∏)
        if (this.waveManager && this.waveManager.enemies) {
            this.waveManager.enemies.forEach(enemy => {
                if (enemy && enemy.update) {
                    enemy.update(this.time.now, this.game.loop.delta);
                }
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ ActionManager
        if (this.actionManager && this.waveManager) {
            this.actionManager.updateObjects(this.waveManager.enemies, []);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º ItemDropManager
        if (this.itemDropManager) {
            this.itemDropManager.update(this.time.now, this.game.loop.delta);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ–ª–Ω—ã
        if (this.waveIndicator && this.waveManager) {
            const gameInfo = this.waveManager.getGameInfo();
            this.waveIndicator.updateProgress(gameInfo.gameProgress);
        }
    }
}
