/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞ –≤–∑–ª–æ–º–∞ –∑–∞–º–∫–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –∑–∞–º–∫–æ–≤: Simple, Maze, Pattern
 */

import { HTMLButton } from '../components/HTMLButton.js';
import { LOCK_TYPES } from '../types/lockTypes.js';

export class UniversalLockpickingScene extends Phaser.Scene {
    constructor() {
        super({ key: 'UniversalLockpickingScene' });
        
        this.lock = null;
        this.pet = null;
        this.lockType = LOCK_TYPES.SIMPLE;
        this.lockLevel = 1;
        this.config = null;
        this.cost = 1;
        
        // –ò–≥—Ä–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        this.attempts = 0;
        this.maxAttempts = 3;
        this.timeLeft = 0;
        this.timer = null;
        
        // UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.uiElements = [];
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
     */
    init(data) {
        console.log('üîì [UniversalLockpicking] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:', data);
        
        this.lock = data.lock;
        this.pet = data.pet;
        this.lockType = data.lockType || LOCK_TYPES.SIMPLE;
        this.lockLevel = data.lockLevel || 1;
        this.config = data.config || {};
        this.cost = data.cost || 1;
        
        this.attempts = 0;
        this.maxAttempts = this.config.maxAttempts || 3;
        this.timeLeft = this.config.timeLimit || 0;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
     */
    create() {
        console.log(`üîì [UniversalLockpicking] –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –≤–∑–ª–æ–º–∞ ${this.lockType} –∑–∞–º–∫–∞`);
        
        const { width, height } = this.scale;
        
        // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
        this.add.rectangle(width / 2, height / 2, width, height, 0x000000, 0.8).setDepth(0);
        
        // –°–æ–∑–¥–∞–µ–º UI
        this.createUI();
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–º–∫–∞
        switch (this.lockType) {
            case LOCK_TYPES.SIMPLE:
                this.createSimpleGame();
                break;
            case LOCK_TYPES.MAZE:
                this.createMazeGame();
                break;
            case LOCK_TYPES.PATTERN:
                this.createPatternGame();
                break;
            default:
                console.error('üîí [UniversalLockpicking] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–º–∫–∞:', this.lockType);
                this.exitLockpicking(false);
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
        this.setupInput();
        
        console.log('üîì [UniversalLockpicking] –°—Ü–µ–Ω–∞ –≥–æ—Ç–æ–≤–∞');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ UI
     */
    createUI() {
        const { width, height } = this.scale;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const title = this.add.text(width / 2, 80, `üîì –í–ó–õ–û–ú ${this.getLockTypeName().toUpperCase()}`, {
            fontSize: '28px',
            fontFamily: 'Arial',
            color: '#ffffff',
            stroke: '#000000',
            strokeThickness: 4,
            fontStyle: 'bold'
        }).setOrigin(0.5).setDepth(10);
        
        this.uiElements.push(title);
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        const info = this.add.text(width / 2, 120, `–£—Ä–æ–≤–µ–Ω—å: ${this.lockLevel} | –°—Ç–æ–∏–º–æ—Å—Ç—å: ${this.cost} –æ—Ç–º—ã—á–µ–∫`, {
            fontSize: '16px',
            fontFamily: 'Arial',
            color: '#ffff00',
            stroke: '#000000',
            strokeThickness: 2
        }).setOrigin(0.5).setDepth(10);
        
        this.uiElements.push(info);
        
        // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        this.attemptsText = this.add.text(width / 2, 150, `–ü–æ–ø—ã—Ç–æ–∫: ${this.maxAttempts - this.attempts}`, {
            fontSize: '16px',
            fontFamily: 'Arial',
            color: '#ffffff',
            stroke: '#000000',
            strokeThickness: 2
        }).setOrigin(0.5).setDepth(10);
        
        this.uiElements.push(this.attemptsText);
        
        // –¢–∞–π–º–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏)
        if (this.timeLeft > 0) {
            this.timerText = this.add.text(width / 2, 180, `–í—Ä–µ–º—è: ${this.timeLeft}—Å`, {
                fontSize: '16px',
                fontFamily: 'Arial',
                color: '#00ffff',
                stroke: '#000000',
                strokeThickness: 2
            }).setOrigin(0.5).setDepth(10);
            
            this.uiElements.push(this.timerText);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            this.startTimer();
        }
        
        // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        this.exitButton = new HTMLButton(this, width / 2, height - 70, {
            text: '‚ùå –û—Ç–º–µ–Ω–∞',
            width: 120,
            height: 35,
            fontSize: 14
        });
        
        this.exitButton.setOnClick(() => {
            this.exitLockpicking(false);
        });
        
        this.uiElements.push(this.exitButton);
        
        // –ú–æ–±–∏–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.createMobileControls();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    createMobileControls() {
        const { width, height } = this.scale;
        
        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–º–∫–∞ (SPACE)
        if (this.lockType === LOCK_TYPES.SIMPLE) {
            this.actionButton = new HTMLButton(this, width / 2, height - 120, {
                text: 'üîì –í–ó–õ–û–ú–ê–¢–¨',
                width: 150,
                height: 50,
                fontSize: 16,
                fontWeight: 'bold'
            });
            
            this.actionButton.setOnClick(() => {
                this.trySimplePick();
            });
            
            this.uiElements.push(this.actionButton);
        }
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ (—Å—Ç—Ä–µ–ª–∫–∏)
        if (this.lockType === LOCK_TYPES.MAZE) {
            const buttonSize = 60;
            const spacing = 80;
            const centerX = width / 2;
            const centerY = height - 100;
            
            // –í–≤–µ—Ä—Ö
            this.upButton = new HTMLButton(this, centerX, centerY - spacing, {
                text: '‚Üë',
                width: buttonSize,
                height: buttonSize,
                fontSize: 24
            });
            this.upButton.setOnClick(() => {
                this.onMobileInput('up');
            });
            
            // –í–ª–µ–≤–æ
            this.leftButton = new HTMLButton(this, centerX - spacing, centerY, {
                text: '‚Üê',
                width: buttonSize,
                height: buttonSize,
                fontSize: 24
            });
            this.leftButton.setOnClick(() => {
                this.onMobileInput('left');
            });
            
            // –í–ø—Ä–∞–≤–æ
            this.rightButton = new HTMLButton(this, centerX + spacing, centerY, {
                text: '‚Üí',
                width: buttonSize,
                height: buttonSize,
                fontSize: 24
            });
            this.rightButton.setOnClick(() => {
                this.onMobileInput('right');
            });
            
            // –í–Ω–∏–∑
            this.downButton = new HTMLButton(this, centerX, centerY + spacing, {
                text: '‚Üì',
                width: buttonSize,
                height: buttonSize,
                fontSize: 24
            });
            this.downButton.setOnClick(() => {
                this.onMobileInput('down');
            });
            
            this.uiElements.push(this.upButton, this.leftButton, this.rightButton, this.downButton);
        }
        
        // –î–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã - –∫–ª–∏–∫–∞–µ–º –ø–æ —Ç–æ—á–∫–∞–º
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
     */
    onMobileInput(direction) {
        if (this.lockType === LOCK_TYPES.MAZE && this.ball && this.ball.body) {
            const speed = this.config.ballSpeed || 200;
            
            switch (direction) {
                case 'up':
                    this.ball.body.setVelocityY(-speed);
                    break;
                case 'down':
                    this.ball.body.setVelocityY(speed);
                    break;
                case 'left':
                    this.ball.body.setVelocityX(-speed);
                    break;
                case 'right':
                    this.ball.body.setVelocityX(speed);
                    break;
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            this.time.delayedCall(100, () => {
                if (this.ball && this.ball.body) {
                    this.ball.body.setVelocity(0, 0);
                }
            });
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–º–∫–∞
     */
    createSimpleGame() {
        const { width, height } = this.scale;
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        const instruction = this.add.text(width / 2, 220, '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –í–ó–õ–û–ú–ê–¢–¨ –∫–æ–≥–¥–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∑–µ–ª–µ–Ω–æ–π –∑–æ–Ω–µ!', {
            fontSize: '14px',
            fontFamily: 'Arial',
            color: '#ffffff',
            stroke: '#000000',
            strokeThickness: 2
        }).setOrigin(0.5).setDepth(10);
        
        this.uiElements.push(instruction);
        
        // –°–æ–∑–¥–∞–µ–º –ø–∏–Ω—ã
        this.createSimplePins();
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        this.createSimpleIndicator();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–º–∫–∞
     */
    createSimplePins() {
        const { width, height } = this.scale;
        const numPins = this.config.pins || 1;
        const pinWidth = 50;
        const spacing = 70;
        const startX = width / 2 - (numPins - 1) * spacing / 2;
        const y = height / 2 - 30;
        
        this.pins = [];
        
        for (let i = 0; i < numPins; i++) {
            const x = startX + i * spacing;
            
            // –û—Å–Ω–æ–≤–∞ –ø–∏–Ω–∞
            const pinBase = this.add.rectangle(x, y, pinWidth, 80, 0x333333).setDepth(5);
            
            // –ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞ (—É—Å–ø–µ—Ö)
            const greenZone = this.add.rectangle(x, y - 5, pinWidth - 8, 25, 0x00ff00).setDepth(6);
            
            // –¢–µ–∫—Å—Ç –ø–∏–Ω–∞
            const pinText = this.add.text(x, y + 50, `–ü–∏–Ω ${i + 1}`, {
                fontSize: '12px',
                fontFamily: 'Arial',
                color: '#ffffff',
                stroke: '#000000',
                strokeThickness: 2
            }).setOrigin(0.5).setDepth(10);
            
            // –°—Ç–∞—Ç—É—Å –ø–∏–Ω–∞
            const status = this.add.text(x, y + 65, '‚ö™', {
                fontSize: '20px'
            }).setOrigin(0.5).setDepth(10);
            
            this.pins.push({
                base: pinBase,
                greenZone: greenZone,
                text: pinText,
                status: status,
                unlocked: false,
                x: x,
                y: y
            });
        }
        
        this.currentPin = 0;
        this.highlightCurrentPin();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–º–∫–∞
     */
    createSimpleIndicator() {
        if (!this.pins || !this.pins[this.currentPin]) return;
        
        const pin = this.pins[this.currentPin];
        
        this.indicator = this.add.rectangle(
            pin.x,
            pin.y + 40,
            40,
            8,
            0xff0000
        ).setDepth(7);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        this.tweens.add({
            targets: this.indicator,
            y: pin.y - 40,
            duration: 1200 / this.config.indicatorSpeed,
            yoyo: true,
            repeat: -1,
            ease: 'Linear'
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
     */
    createMazeGame() {
        const { width, height } = this.scale;
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        const instruction = this.add.text(width / 2, 220, '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —à–∞—Ä–∏–∫ –∫ –≤—ã—Ö–æ–¥—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–µ–ª–æ–∫', {
            fontSize: '14px',
            fontFamily: 'Arial',
            color: '#ffffff',
            stroke: '#000000',
            strokeThickness: 2
        }).setOrigin(0.5).setDepth(10);
        
        this.uiElements.push(instruction);
        
        // –°–æ–∑–¥–∞–µ–º –ª–∞–±–∏—Ä–∏–Ω—Ç
        this.createMaze();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
     */
    createMaze() {
        const { width, height } = this.scale;
        const mazeSize = this.config.mazeSize || 5;
        const cellSize = 40;
        const mazeWidth = mazeSize * cellSize;
        const mazeHeight = mazeSize * cellSize;
        const startX = (width - mazeWidth) / 2;
        const startY = (height - mazeHeight) / 2;
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç–µ–Ω—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        this.mazeWalls = this.add.group();
        
        // –í–Ω–µ—à–Ω–∏–µ —Å—Ç–µ–Ω—ã
        this.add.rectangle(startX + mazeWidth/2, startY - 5, mazeWidth, 10, 0x333333).setDepth(5);
        this.add.rectangle(startX + mazeWidth/2, startY + mazeHeight + 5, mazeWidth, 10, 0x333333).setDepth(5);
        this.add.rectangle(startX - 5, startY + mazeHeight/2, 10, mazeHeight, 0x333333).setDepth(5);
        this.add.rectangle(startX + mazeWidth + 5, startY + mazeHeight/2, 10, mazeHeight, 0x333333).setDepth(5);
        
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–µ–Ω—ã (—Å–ª—É—á–∞–π–Ω—ã–µ)
        for (let i = 1; i < mazeSize - 1; i++) {
            for (let j = 1; j < mazeSize - 1; j++) {
                if (Math.random() > 0.5) {
                    const wall = this.add.rectangle(
                        startX + i * cellSize + cellSize/2,
                        startY + j * cellSize + cellSize/2,
                        cellSize - 5,
                        cellSize - 5,
                        0x333333
                    ).setDepth(5);
                    
                    this.mazeWalls.add(wall);
                }
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º —à–∞—Ä–∏–∫
        this.ball = this.add.circle(
            startX + cellSize/2,
            startY + cellSize/2,
            8,
            0xff0000
        ).setDepth(6);
        
        // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥
        this.exit = this.add.circle(
            startX + (mazeSize - 1) * cellSize + cellSize/2,
            startY + (mazeSize - 1) * cellSize + cellSize/2,
            10,
            0x00ff00
        ).setDepth(6);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–∑–∏–∫—É
        this.physics.add.existing(this.ball);
        this.ball.body.setCollideWorldBounds(true);
        this.ball.body.setSize(16, 16);
        
        // –ö–æ–ª–ª–∏–∑–∏–∏ —Å —Å—Ç–µ–Ω–∞–º–∏
        this.physics.add.collider(this.ball, this.mazeWalls);
        
        // –ö–æ–ª–ª–∏–∑–∏—è —Å –≤—ã—Ö–æ–¥–æ–º
        this.physics.add.overlap(this.ball, this.exit, () => {
            this.onMazeSuccess();
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    createPatternGame() {
        const { width, height } = this.scale;
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        const instruction = this.add.text(width / 2, 220, '–°–æ–µ–¥–∏–Ω–∏—Ç–µ —Ç–æ—á–∫–∏ –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π! –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Ç–æ—á–∫–∞–º', {
            fontSize: '14px',
            fontFamily: 'Arial',
            color: '#ffffff',
            stroke: '#000000',
            strokeThickness: 2
        }).setOrigin(0.5).setDepth(10);
        
        this.uiElements.push(instruction);
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
        this.createPattern();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    createPattern() {
        const { width, height } = this.scale;
        const points = this.config.points || 4;
        const gridSize = Math.ceil(Math.sqrt(points));
        const cellSize = 60;
        const patternWidth = gridSize * cellSize;
        const patternHeight = gridSize * cellSize;
        const startX = (width - patternWidth) / 2;
        const startY = (height - patternHeight) / 2;
        
        this.patternPoints = [];
        this.selectedPoints = [];
        this.lines = [];
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏
        for (let i = 0; i < points; i++) {
            const row = Math.floor(i / gridSize);
            const col = i % gridSize;
            const x = startX + col * cellSize + cellSize/2;
            const y = startY + row * cellSize + cellSize/2;
            
            const point = this.add.circle(x, y, 12, 0xffffff).setDepth(6);
            point.setInteractive();
            point.setData('index', i);
            
            point.on('pointerdown', () => {
                this.onPatternPointClick(point, i);
            });
            
            this.patternPoints.push(point);
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        this.correctPattern = this.generateCorrectPattern(points);
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    generateCorrectPattern(points) {
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ—á–µ–∫
        const pattern = [];
        for (let i = 0; i < points - 1; i++) {
            pattern.push([i, i + 1]);
        }
        return pattern;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ—á–∫–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    onPatternPointClick(point, index) {
        if (this.selectedPoints.includes(index)) {
            // –£–∂–µ –≤—ã–±—Ä–∞–Ω–∞ - —É–±–∏—Ä–∞–µ–º
            this.selectedPoints = this.selectedPoints.filter(i => i !== index);
            point.setFillStyle(0xffffff);
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º
            this.selectedPoints.push(index);
            point.setFillStyle(0x00ff00);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
        if (this.selectedPoints.length === this.correctPattern.length + 1) {
            this.checkPattern();
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    checkPattern() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        const isCorrect = this.selectedPoints.every((point, index) => {
            return index === 0 || point === this.selectedPoints[index - 1] + 1;
        });
        
        if (isCorrect) {
            this.onPatternSuccess();
        } else {
            this.onPatternFailed();
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–≤–æ–¥–∞
     */
    setupInput() {
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        this.input.keyboard.on('keydown-SPACE', () => {
            if (this.lockType === LOCK_TYPES.SIMPLE) {
                this.trySimplePick();
            }
        });
        
        this.input.keyboard.on('keydown-ESC', () => {
            this.exitLockpicking(false);
        });
        
        // –°—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        this.cursors = this.input.keyboard.createCursorKeys();
        this.wasd = this.input.keyboard.addKeys('W,S,A,D');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã
     */
    update(time, delta) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∞–±–∏—Ä–∏–Ω—Ç
        if (this.lockType === LOCK_TYPES.MAZE && this.ball) {
            this.updateMazeMovement();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ
     */
    updateMazeMovement() {
        if (!this.ball || !this.ball.body) return;
        
        const speed = this.config.ballSpeed || 200;
        
        if (this.cursors.left.isDown || this.wasd.A.isDown) {
            this.ball.body.setVelocityX(-speed);
        } else if (this.cursors.right.isDown || this.wasd.D.isDown) {
            this.ball.body.setVelocityX(speed);
        } else {
            this.ball.body.setVelocityX(0);
        }
        
        if (this.cursors.up.isDown || this.wasd.W.isDown) {
            this.ball.body.setVelocityY(-speed);
        } else if (this.cursors.down.isDown || this.wasd.S.isDown) {
            this.ball.body.setVelocityY(speed);
        } else {
            this.ball.body.setVelocityY(0);
        }
    }
    
    /**
     * –ü–æ–ø—ã—Ç–∫–∞ –≤–∑–ª–æ–º–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–º–∫–∞
     */
    trySimplePick() {
        if (!this.indicator || !this.pins[this.currentPin]) return;
        
        const pin = this.pins[this.currentPin];
        const indicatorY = this.indicator.y;
        const greenZoneY = pin.greenZone.y;
        const tolerance = this.config.tolerance || 20;
        
        const success = Math.abs(indicatorY - greenZoneY) < tolerance;
        
        if (success) {
            pin.unlocked = true;
            pin.status.setText('‚úÖ');
            pin.greenZone.setFillStyle(0x00ff00, 0.3);
            
            this.currentPin++;
            
            if (this.currentPin >= this.pins.length) {
                this.onSimpleSuccess();
            } else {
                if (this.indicator) {
                    this.indicator.destroy();
                }
                this.createSimpleIndicator();
                this.highlightCurrentPin();
            }
        } else {
            this.onPickFailed();
        }
    }
    
    /**
     * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–∏–Ω–∞
     */
    highlightCurrentPin() {
        if (!this.pins) return;
        
        this.pins.forEach((pin, i) => {
            if (i === this.currentPin && !pin.unlocked) {
                pin.base.setStrokeStyle(3, 0xffff00);
            } else {
                pin.base.setStrokeStyle(0);
            }
        });
    }
    
    /**
     * –£—Å–ø–µ—Ö –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–º–∫–∞
     */
    onSimpleSuccess() {
        this.onPickSuccess();
    }
    
    /**
     * –£—Å–ø–µ—Ö –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
     */
    onMazeSuccess() {
        this.onPickSuccess();
    }
    
    /**
     * –£—Å–ø–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    onPatternSuccess() {
        this.onPickSuccess();
    }
    
    /**
     * –ü—Ä–æ–≤–∞–ª –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    onPatternFailed() {
        this.onPickFailed();
    }
    
    /**
     * –£—Å–ø–µ—à–Ω—ã–π –≤–∑–ª–æ–º
     */
    onPickSuccess() {
        console.log('‚úÖ [UniversalLockpicking] –ó–∞–º–æ–∫ —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–Ω!');
        
        // –≠—Ñ—Ñ–µ–∫—Ç —É—Å–ø–µ—Ö–∞
        this.cameras.main.flash(500, 0, 255, 0);
        
        const { width, height } = this.scale;
        
        const successText = this.add.text(width / 2, height / 2, '‚úÖ –ó–ê–ú–û–ö –í–ó–õ–û–ú–ê–ù!', {
            fontSize: '36px',
            fontFamily: 'Arial',
            color: '#00ff00',
            stroke: '#000000',
            strokeThickness: 4,
            fontStyle: 'bold'
        }).setOrigin(0.5).setDepth(100);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        this.tweens.add({
            targets: successText,
            scale: 1.2,
            duration: 200,
            yoyo: true,
            repeat: 2
        });
        
        // –í—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
        this.time.delayedCall(1500, () => {
            this.exitLockpicking(true);
        });
    }
    
    /**
     * –ü—Ä–æ–≤–∞–ª –≤–∑–ª–æ–º–∞
     */
    onPickFailed() {
        this.attempts++;
        this.attemptsText.setText(`–ü–æ–ø—ã—Ç–æ–∫: ${this.maxAttempts - this.attempts}`);
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–≤–∞–ª–∞
        this.cameras.main.flash(200, 255, 0, 0);
        
        if (this.attempts >= this.maxAttempts) {
            this.onPickFailedFinal();
        }
    }
    
    /**
     * –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–ª
     */
    onPickFailedFinal() {
        console.log('‚ùå [UniversalLockpicking] –ü—Ä–æ–≤–∞–ª –≤–∑–ª–æ–º–∞! –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏.');
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–≤–∞–ª–∞
        this.cameras.main.shake(300, 0.01);
        
        const { width, height } = this.scale;
        
        const failText = this.add.text(width / 2, height / 2, '‚ùå –û–¢–ú–´–ß–ö–ê –°–õ–û–ú–ê–õ–ê–°–¨!', {
            fontSize: '32px',
            fontFamily: 'Arial',
            color: '#ff0000',
            stroke: '#000000',
            strokeThickness: 4,
            fontStyle: 'bold'
        }).setOrigin(0.5).setDepth(100);
        
        // –í—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
        this.time.delayedCall(1500, () => {
            this.exitLockpicking(false);
        });
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
     */
    startTimer() {
        this.timer = this.time.addEvent({
            delay: 1000,
            callback: () => {
                this.timeLeft--;
                this.timerText.setText(`–í—Ä–µ–º—è: ${this.timeLeft}—Å`);
                
                if (this.timeLeft <= 0) {
                    this.onPickFailedFinal();
                }
            },
            loop: true
        });
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–º–∫–∞
     */
    getLockTypeName() {
        switch (this.lockType) {
            case LOCK_TYPES.SIMPLE:
                return '–ü—Ä–æ—Å—Ç–æ–π';
            case LOCK_TYPES.MAZE:
                return '–õ–∞–±–∏—Ä–∏–Ω—Ç';
            case LOCK_TYPES.PATTERN:
                return '–ü–∞—Ç—Ç–µ—Ä–Ω';
            default:
                return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        }
    }
    
    /**
     * –í—ã—Ö–æ–¥ –∏–∑ –º–∏–Ω–∏-–∏–≥—Ä—ã
     */
    exitLockpicking(success) {
        console.log('üö™ [UniversalLockpicking] –í—ã—Ö–æ–¥ –∏–∑ –º–∏–Ω–∏-–∏–≥—Ä—ã. –£—Å–ø–µ—Ö:', success);
        
        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.input.keyboard.off('keydown-SPACE');
        this.input.keyboard.off('keydown-ESC');
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (this.timer) {
            this.timer.destroy();
        }
        
        // –û—á–∏—â–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.uiElements.forEach(element => {
            if (element && element.destroy) {
                element.destroy();
            }
        });
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ü–µ–Ω—É
        this.scene.stop('UniversalLockpickingScene');
        
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ü–µ–Ω—É
        const previousScene = this.scene.get('HouseInteriorScene') || this.scene.get('PetThiefScene');
        if (previousScene) {
            this.scene.resume(previousScene.scene.key);
        }
        
        // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (success) {
            this.lock.onPickSuccess();
        } else {
            this.lock.onPickFailed();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–º—ã—á–∫–∏
        if (this.pet) {
            this.pet.inventory.lockpicks -= this.cost;
            if (this.pet.scene && this.pet.scene.updateInventoryUI) {
                this.pet.scene.updateInventoryUI();
            }
        }
    }
}
