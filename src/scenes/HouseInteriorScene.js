/**
 * –°—Ü–µ–Ω–∞ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –¥–æ–º–∞
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –≤—Ö–æ–¥–∏—Ç –≤ –∂–∏–ª–∏—â–µ
 */

import { Chest } from '../objects/Chest.js';
import { HTMLButton } from '../components/HTMLButton.js';

export class HouseInteriorScene extends Phaser.Scene {
    constructor() {
        super({ key: 'HouseInteriorScene' });
        
        // –î–∞–Ω–Ω—ã–µ –¥–æ–º–∞
        this.houseData = null;
        this.returnData = null; // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–∏—Ä
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–æ–º–∞
     */
    init(data) {
        console.log('üè† [HouseInterior] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
        
        this.houseData = data.house || {};
        this.pet = data.pet || null; // –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∏—Ç–æ–º—Ü–∞
        this.returnData = {
            petPosition: data.petPosition || { x: 1500, y: 1500 },
            worldData: data.worldData || null,
            collectedItems: data.collectedItems || { coins: 0, jewels: 0, keys: 0 }
        };
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
     */
    create() {
        console.log('üè† [HouseInterior] –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –¥–æ–º–∞');
        
        const { width, height } = this.scale;
        
        // –§–æ–Ω –∫–æ–º–Ω–∞—Ç—ã
        this.createBackground();
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ
        this.createHouseInfo();
        
        // –°–æ–∑–¥–∞—ë–º —Å—É–Ω–¥—É–∫–∏
        this.createChests();
        
        // UI
        this.createUI();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers();
        
        console.log('üè† [HouseInterior] –ò–Ω—Ç–µ—Ä—å–µ—Ä —Å–æ–∑–¥–∞–Ω');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã
     */
    createBackground() {
        const { width, height } = this.scale;
        
        // –ü–æ–ª (–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)
        const floor = this.add.rectangle(
            width / 2,
            height / 2,
            width,
            height,
            0x8B4513 // –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
        ).setDepth(0);
        
        // –£–∑–æ—Ä –Ω–∞ –ø–æ–ª—É
        for (let i = 0; i < 10; i++) {
            const line = this.add.rectangle(
                width / 10 * i,
                0,
                2,
                height,
                0x654321
            ).setDepth(1);
        }
        
        // –°—Ç–µ–Ω—ã (—Ç–µ–º–Ω–µ–µ)
        const wallTop = this.add.rectangle(
            width / 2,
            30,
            width,
            60,
            0x654321
        ).setDepth(2);
        
        const wallBottom = this.add.rectangle(
            width / 2,
            height - 30,
            width,
            60,
            0x654321
        ).setDepth(2);
        
        console.log('üè† [HouseInterior] –§–æ–Ω —Å–æ–∑–¥–∞–Ω');
    }
    
    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ
     */
    createHouseInfo() {
        const { width } = this.scale;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ–π —ç—Ç–æ –¥–æ–º
        const isPlayerHouse = this.houseData.isPlayerHouse || false;
        const ownerName = this.houseData.ownerName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        
        let titleText = isPlayerHouse ? 'üè° –ú–û–ô –î–û–ú' : `üè† –î–æ–º ${ownerName}`;
        
        const title = this.add.text(
            width / 2,
            80,
            titleText,
            {
                fontSize: '24px',
                fontFamily: 'Arial',
                color: '#ffffff',
                stroke: '#000000',
                strokeThickness: 4,
                fontStyle: 'bold'
            }
        ).setOrigin(0.5).setDepth(100);
        
        // –ü–æ–¥—Å–∫–∞–∑–∫–∞
        if (!isPlayerHouse) {
            const hint = this.add.text(
                width / 2,
                120,
                '–°–æ–±–µ—Ä–∏ —Å–æ–∫—Ä–æ–≤–∏—â–∞ –∏ —É—Ö–æ–¥–∏!',
                {
                    fontSize: '16px',
                    fontFamily: 'Arial',
                    color: '#ffff00',
                    stroke: '#000000',
                    strokeThickness: 2
                }
            ).setOrigin(0.5).setDepth(100);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–Ω–¥—É–∫–æ–≤
     */
    createChests() {
        const { width, height } = this.scale;
        
        this.chests = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—É–Ω–¥—É–∫–∞—Ö
        const chestsData = this.houseData.chests || [];
        
        if (chestsData.length === 0) {
            console.warn('üí∞ [HouseInterior] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—É–Ω–¥—É–∫–∞—Ö –¥–ª—è –¥–æ–º–∞');
            return;
        }
        
        console.log(`üí∞ [HouseInterior] –°–æ–∑–¥–∞–Ω–∏–µ ${chestsData.length} —Å—É–Ω–¥—É–∫–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∏—Ä–∞`);
        
        // –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å—É–Ω–¥—É–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º 3)
        const positions = [
            { x: width * 0.3, y: height * 0.5 },
            { x: width * 0.5, y: height * 0.5 },
            { x: width * 0.7, y: height * 0.5 }
        ];
        
        // –°–æ–∑–¥–∞–µ–º —Å—É–Ω–¥—É–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        chestsData.forEach((chestData, i) => {
            const pos = positions[i % positions.length];
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–ø—É—Å—Ç–æ—à–µ–Ω–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏
            if (chestData.isEmpty) {
                console.log(`üí∞ [HouseInterior] –°—É–Ω–¥—É–∫ ${i} —É–∂–µ –æ–ø—É—Å—Ç–æ—à–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                return;
            }
            
            const chest = new Chest(this, pos.x, pos.y, {
                id: chestData.id,
                coins: chestData.coins,
                jewels: chestData.jewels,
                keys: chestData.keys,
                isLocked: chestData.isLocked,
                lockLevel: chestData.lockLevel,
                ownerId: this.houseData.id
            });
            
            // –ï—Å–ª–∏ —Å—É–Ω–¥—É–∫ —É–∂–µ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ —Å—Ä–∞–∑—É
            if (chestData.isOpened) {
                chest.isOpened = true;
                chest.setText('üì¶');
                chest.setAlpha(0.7);
                chest.disableInteractive();
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è
            chest.on('chest:opened', (data) => {
                this.onChestOpened(data, chestData);
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–º–∫–∞
            chest.on('chest:locked', (data) => {
                this.onChestLocked(data);
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å—É–Ω–¥—É–∫—É
            chest.on('pointerdown', () => {
                console.log('üí∞ [HouseInterior] –ö–ª–∏–∫ –ø–æ —Å—É–Ω–¥—É–∫—É');
                chest.tryOpen();
            });
            
            this.chests.push(chest);
        });
    }
    
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ UI
     */
    createUI() {
        const { width, height } = this.scale;
        
        // –°—á–µ—Ç—á–∏–∫ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ
        this.collectedText = this.add.text(
            width / 2,
            height - 100,
            this.getCollectedText(),
            {
                fontSize: '20px',
                fontFamily: 'Arial',
                color: '#ffff00',
                stroke: '#000000',
                strokeThickness: 3,
                fontStyle: 'bold'
            }
        ).setOrigin(0.5).setDepth(100);
        
        // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        this.exitButton = new HTMLButton(this, width / 2, height - 50, {
            text: 'üö™ –í—ã–π—Ç–∏ –∏–∑ –¥–æ–º–∞',
            width: 150,
            height: 35,
            fontSize: 16,
            fontWeight: 'bold'
        });
        
        this.exitButton.setOnClick(() => {
            this.exitHouse();
        });
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ
     */
    getCollectedText() {
        const { coins, jewels, keys } = this.returnData.collectedItems;
        
        let parts = [];
        if (coins > 0) parts.push(`üí∞ ${coins}`);
        if (jewels > 0) parts.push(`üíé ${jewels}`);
        if (keys > 0) parts.push(`üîë ${keys}`);
        
        return parts.length > 0 ? `–°–æ–±—Ä–∞–Ω–æ: ${parts.join(' ')}` : '–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–±—Ä–∞–Ω–æ';
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ESC - –≤—ã—Ö–æ–¥
        this.input.keyboard.on('keydown-ESC', () => {
            this.exitHouse();
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É–Ω–¥—É–∫–∞
     */
    onChestOpened(data, chestData) {
        console.log('üí∞ [HouseInterior] –°—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç:', data);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        const contents = data.chest.collectContents();
        
        if (contents) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–æ–±—Ä–∞–Ω–Ω–æ–º—É
            this.returnData.collectedItems.coins += contents.coins;
            this.returnData.collectedItems.jewels += contents.jewels;
            this.returnData.collectedItems.keys += contents.keys;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.collectedText.setText(this.getCollectedText());
            
            // –≠—Ñ—Ñ–µ–∫—Ç —Å–±–æ—Ä–∞
            this.showCollectionEffect(data.chest, contents);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É–Ω–¥—É–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –º–∏—Ä–∞
            if (chestData) {
                chestData.isOpened = true;
                chestData.isEmpty = true;
                chestData.coins = 0;
                chestData.jewels = 0;
                chestData.keys = 0;
            }
            
            console.log('üí∞ [HouseInterior] –î–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é:', contents);
            console.log('üíæ [HouseInterior] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É–Ω–¥—É–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –¥–∞–Ω–Ω—ã—Ö –º–∏—Ä–∞');
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–µ—Ä—Ç–æ —Å—É–Ω–¥—É–∫–∞
     */
    onChestLocked(data) {
        console.log('üîí [HouseInterior] –°—É–Ω–¥—É–∫ –∑–∞–ø–µ—Ä—Ç:', data);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const { width, height } = this.scale;
        
        const message = this.add.text(
            width / 2,
            height / 2,
            `üîí –ó–∞–º–æ–∫ ${data.lockLevel} —É—Ä–æ–≤–Ω—è!\n–ù—É–∂–Ω–∞ –æ—Ç–º—ã—á–∫–∞ –∏–ª–∏ –Ω–∞–≤—ã–∫ –≤–∑–ª–æ–º–∞`,
            {
                fontSize: '18px',
                fontFamily: 'Arial',
                color: '#ff0000',
                stroke: '#000000',
                strokeThickness: 3,
                align: 'center'
            }
        ).setOrigin(0.5).setDepth(200);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        this.time.delayedCall(2000, () => {
            message.destroy();
        });
        
        // TODO: –í –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏–º –º–∏–Ω–∏-–∏–≥—Ä—É –≤–∑–ª–æ–º–∞
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ChestLockpickingScene)
     */
    updateInventoryUI() {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ChestLockpickingScene
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ
        console.log('üè† [HouseInterior] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è');
    }
    
    /**
     * –≠—Ñ—Ñ–µ–∫—Ç —Å–±–æ—Ä–∞ —Å–æ–∫—Ä–æ–≤–∏—â
     */
    showCollectionEffect(chest, contents) {
        // –õ–µ—Ç—è—â–∏–π —Ç–µ–∫—Å—Ç
        const text = this.add.text(
            chest.x,
            chest.y,
            this.formatContents(contents),
            {
                fontSize: '20px',
                fontFamily: 'Arial',
                color: '#ffff00',
                stroke: '#000000',
                strokeThickness: 3,
                fontStyle: 'bold'
            }
        ).setOrigin(0.5).setDepth(150);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –≤–≤–µ—Ä—Ö –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
        this.tweens.add({
            targets: text,
            y: chest.y - 80,
            alpha: 0,
            duration: 1500,
            ease: 'Cubic.easeOut',
            onComplete: () => {
                text.destroy();
            }
        });
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    formatContents(contents) {
        let parts = [];
        if (contents.coins > 0) parts.push(`+${contents.coins} üí∞`);
        if (contents.jewels > 0) parts.push(`+${contents.jewels} üíé`);
        if (contents.keys > 0) parts.push(`+${contents.keys} üîë`);
        return parts.join('\n');
    }
    
    /**
     * –í—ã—Ö–æ–¥ –∏–∑ –¥–æ–º–∞
     */
    exitHouse() {
        console.log('üö™ [HouseInterior] –í—ã—Ö–æ–¥ –∏–∑ –¥–æ–º–∞, —Å–æ–±—Ä–∞–Ω–æ:', this.returnData.collectedItems);
        
        // –û—á–∏—â–∞–µ–º —Å—É–Ω–¥—É–∫–∏
        if (this.chests) {
            this.chests.forEach(chest => chest.destroy());
        }
        
        // –û—á–∏—â–∞–µ–º –∫–Ω–æ–ø–∫—É
        if (this.exitButton) {
            this.exitButton.destroy();
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ü–µ–Ω—É —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        this.scene.stop('HouseInteriorScene');
        this.scene.resume('PetThiefScene');
        
        // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω–æ–µ –æ–±—Ä–∞—Ç–Ω–æ
        this.scene.get('PetThiefScene').onReturnFromHouse(this.returnData);
    }
}

