import { Enemy } from '../objects/Enemy.js';
import { EnemyEffectSystem } from '../systems/EnemyEffectSystem.js';
import { Egg } from '../objects/Egg.js';
import { enemyTypes } from '../types/enemyTypes.js';

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ü–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–≤–µ–¥–µ–Ω–∏–π –≤—Ä–∞–≥–æ–≤
 */
export class TestBehaviors extends Phaser.Scene {
    constructor() {
        super({ key: 'TestBehaviors' });
        
        this.enemies = [];
        this.target = null;
        this.effectSystem = null;
        this.enemyButtons = [];
        this.tooltip = null; // –í—Å–ø–ª—ã–≤–∞—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
        this.tooltipTimer = null; // –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    }
    
    create() {
        console.log('üéÆ [TestBehaviors] –°—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞');
        
        // –°–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω
        this.cameras.main.setBackgroundColor('#f8f9fa');
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—Ä–∞–≥–æ–≤ –∏ —Å–Ω–∞—Ä—è–¥–æ–≤
        this.enemies = [];
        this.projectiles = [];
        this.target = null;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        this.initEffectSystem();
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Ä–∞–≥–æ–≤
        this.createEnemyButtons();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∏–∫–∏ –º—ã—à–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏
        this.setupMouseControls();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏
        this.setupCollisions();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        this.addInstruction();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
     */
    initEffectSystem() {
        this.effectSystem = new EnemyEffectSystem(this);
        Enemy.initEffectSystem(this.effectSystem);
        console.log('‚ú® [TestBehaviors] –°–∏—Å—Ç–µ–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞
     */
    createEnemyButtons() {
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤—Ä–∞–≥–æ–≤ —Å –∏—Ö —Å–∏–º–≤–æ–ª–∞–º–∏
        const enemyButtonsData = Object.keys(enemyTypes).map(type => ({
            type: type,
            emoji: enemyTypes[type].texture || '‚ùì',
            color: this.getEnemyColor(type)
        }));
        
        // –°–æ–∑–¥–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–µ—Ç–∫–µ
        const buttonSize = 40; // –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
        const buttonSpacing = 5;
        const buttonsPerRow = 12; // –ö–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
        const startX = 20;
        const startY = 80;
        
        enemyButtonsData.forEach((enemyData, index) => {
            const row = Math.floor(index / buttonsPerRow);
            const col = index % buttonsPerRow;
            
            const x = startX + col * (buttonSize + buttonSpacing);
            const y = startY + row * (buttonSize + buttonSpacing);
            
            // –°–æ–∑–¥–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –∫—Ä—É–≥–ª—É—é –∫–Ω–æ–ø–∫—É
            const button = this.add.circle(x, y, buttonSize / 2, enemyData.color);
            button.setStrokeStyle(2, 0x000000);
            button.setDepth(10);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
            const emojiText = this.add.text(x, y, enemyData.emoji, {
                fontSize: '16px'
            }).setOrigin(0.5).setDepth(11);
            
            // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π
            button.setInteractive();
            
            // –≠—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–≤–µ–¥–µ–Ω–∏—è
            button.on('pointerover', () => {
                button.setAlpha(0.8);
                button.setScale(1.1);
                emojiText.setScale(1.1);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                this.tooltipTimer = this.time.delayedCall(300, () => {
                    this.showTooltip(enemyData.type, x, y);
                });
            });
            
            button.on('pointerout', () => {
                button.setAlpha(1.0);
                button.setScale(1.0);
                emojiText.setScale(1.0);
                
                // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –∏ —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                if (this.tooltipTimer) {
                    this.tooltipTimer.remove();
                    this.tooltipTimer = null;
                }
                this.hideTooltip();
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ - —Å–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–∞
            button.on('pointerdown', () => {
                this.createEnemy(enemyData.type);
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É
            this.enemyButtons.push({
                button: button,
                emoji: emojiText,
                type: enemyData.type
            });
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∫—Ä–æ—Ç–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Å—Ç–∏–ª–µ
        this.createMoleGameStyleButton();
        
        console.log(`üéÆ [TestBehaviors] –°–æ–∑–¥–∞–Ω–æ ${enemyButtonsData.length} –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—Ä–∞–≥–æ–≤`);
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫—Ä–æ—Ç–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Å—Ç–∏–ª–µ
     */
    createMoleGameStyleButton() {
        const { width } = this.scale;
        const buttonSize = 50;
        const x = width - 80; // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ —ç–∫—Ä–∞–Ω–∞
        const y = 120;
        
        // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é –∫–Ω–æ–ø–∫—É —Å —Ä–∞–º–∫–æ–π
        const button = this.add.rectangle(x, y, buttonSize, buttonSize, 0xFF6B35);
        button.setStrokeStyle(3, 0x000000);
        button.setDepth(10);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç "GAME"
        const gameText = this.add.text(x, y - 15, 'GAME', {
            fontSize: '10px',
            fill: '#FFFFFF',
            fontStyle: 'bold'
        }).setOrigin(0.5).setDepth(11);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫—Ä–æ—Ç–∞
        const moleEmoji = this.add.text(x, y + 5, 'üêÄ', {
            fontSize: '20px'
        }).setOrigin(0.5).setDepth(11);
        
        // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π
        button.setInteractive();
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–≤–µ–¥–µ–Ω–∏—è
        button.on('pointerover', () => {
            button.setAlpha(0.8);
            button.setScale(1.1);
            gameText.setScale(1.1);
            moleEmoji.setScale(1.1);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            this.showMoleGameStyleTooltip(x, y);
        });
        
        button.on('pointerout', () => {
            button.setAlpha(1.0);
            button.setScale(1.0);
            gameText.setScale(1.0);
            moleEmoji.setScale(1.0);
            
            this.hideTooltip();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ - —Å–æ–∑–¥–∞–µ–º –∫—Ä–æ—Ç–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Å—Ç–∏–ª–µ —Å delayedCall
        button.on('pointerdown', () => {
            this.createMoleGameStyleWithDelay();
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É
        this.enemyButtons.push({
            button: button,
            emoji: moleEmoji,
            type: 'mole_game_style'
        });
        
        console.log(`üéÆ [TestBehaviors] –°–æ–∑–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫—Ä–æ—Ç–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Å—Ç–∏–ª–µ`);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –∫—Ä–æ—Ç–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Å—Ç–∏–ª–µ
     */
    showMoleGameStyleTooltip(x, y) {
        this.hideTooltip();
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω –ø–æ–¥—Å–∫–∞–∑–∫–∏
        const tooltipBg = this.add.rectangle(x, y - 80, 250, 100, 0x000000, 0.8);
        tooltipBg.setStrokeStyle(2, 0xffffff);
        tooltipBg.setDepth(20);
        tooltipBg.setAlpha(0);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const tooltipText = this.add.text(x, y - 80, 
            '–ö–†–û–¢ –° DELAYEDCALL\n' +
            '–°–ø–∞–≤–Ω –∑–∞ —ç–∫—Ä–∞–Ω–æ–º + delayedCall\n' +
            '–° enhancementMultiplier = 1.0\n' +
            '–ò–º–∏—Ç–∏—Ä—É–µ—Ç WaveSystem.scheduleNextSpawn()\n' +
            '–¢–µ—Å—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Ç–∞–π–º–µ—Ä–æ–≤', 
            {
                fontSize: '12px',
                fill: '#ffffff',
                align: 'center',
                wordWrap: { width: 230 }
            }
        ).setOrigin(0.5).setDepth(21);
        tooltipText.setAlpha(0);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        this.tweens.add({
            targets: [tooltipBg, tooltipText],
            alpha: 1,
            duration: 200,
            ease: 'Power2'
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏
        this.tooltip = {
            bg: tooltipBg,
            text: tooltipText
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞
     */
    getEnemyColor(enemyType) {
        const colorMap = {
            'unknown': 0x808080,
            'ant': 0x8B4513,
            'beetle': 0x228B22,
            'rhinoceros': 0x654321,
            'mosquito': 0x696969,
            'spider': 0x8B4513,
            'fly': 0x696969,
            'bee': 0xFFD700,
            'butterfly': 0xFF69B4,
            'dragonfly': 0x00CED1,
            'wasp': 0xFFA500,
            'slug': 0x90EE90,
            'snail': 0x98FB98,
            'spiderQueen': 0x8B4513,
            'mole': 0x2F4F4F,
            'antChain': 0x654321,
            'beeSwarm': 0xFFD700,
            'flySwarm': 0x696969
        };
        
        return colorMap[enemyType] || 0x808080;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
     */
    showTooltip(enemyType, x, y) {
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
        this.hideTooltip();
        
        const enemyData = enemyTypes[enemyType];
        if (!enemyData) return;
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω –ø–æ–¥—Å–∫–∞–∑–∫–∏
        const tooltipBg = this.add.rectangle(x, y - 60, 200, 80, 0x000000, 0.8);
        tooltipBg.setStrokeStyle(2, 0xffffff);
        tooltipBg.setDepth(20);
        tooltipBg.setAlpha(0); // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–∞–≥–µ
        const tooltipText = this.add.text(x, y - 60, 
            `${enemyData.name}\n` +
            `‚ù§Ô∏è ${enemyData.health} | ‚öîÔ∏è ${enemyData.damage}\n` +
            `üèÉ ${enemyData.speed} | üìè ${enemyData.attackRange}`, 
            {
                fontSize: '12px',
                fill: '#ffffff',
                align: 'center',
                wordWrap: { width: 180 }
            }
        ).setOrigin(0.5).setDepth(21);
        tooltipText.setAlpha(0); // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        this.tweens.add({
            targets: [tooltipBg, tooltipText],
            alpha: 1,
            duration: 200,
            ease: 'Power2'
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏
        this.tooltip = {
            bg: tooltipBg,
            text: tooltipText
        };
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
     */
    hideTooltip() {
        if (this.tooltip) {
            // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
            this.tweens.add({
                targets: [this.tooltip.bg, this.tooltip.text],
                alpha: 0,
                duration: 150,
                ease: 'Power2',
                onComplete: () => {
                    if (this.tooltip) {
                        if (this.tooltip.bg) {
                            this.tooltip.bg.destroy();
                        }
                        if (this.tooltip.text) {
                            this.tooltip.text.destroy();
                        }
                        this.tooltip = null;
                    }
                }
            });
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–æ—Ç–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Å—Ç–∏–ª–µ (–∫–∞–∫ –≤ WaveSystem)
     */
    createMoleGameStyle() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤—Ä–∞–≥–æ–≤
        this.clearAllEnemies();
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º WaveSystem.getSpawnPosition()
        const { width, height } = this.scale;
        const margin = 50; // SPAWN_MARGIN
        
        // –°–ø–∞–≤–Ω–∏–º –ø–æ –∫—Ä–∞—è–º —ç–∫—Ä–∞–Ω–∞ (–∫–∞–∫ –≤ –∏–≥—Ä–æ–≤–æ–π —Å—Ü–µ–Ω–µ)
        const side = Math.floor(Math.random() * 4); // 0-–≤–µ—Ä—Ö, 1-–ø—Ä–∞–≤–æ, 2-–Ω–∏–∑, 3-–ª–µ–≤–æ
        
        let x, y;
        switch (side) {
            case 0: // –í–µ—Ä—Ö
                x = Phaser.Math.Between(margin, width - margin);
                y = -margin;
                break;
            case 1: // –ü—Ä–∞–≤–æ
                x = width + margin;
                y = Phaser.Math.Between(margin, height - margin);
                break;
            case 2: // –ù–∏–∑
                x = Phaser.Math.Between(margin, width - margin);
                y = height + margin;
                break;
            case 3: // –õ–µ–≤–æ
                x = -margin;
                y = Phaser.Math.Between(margin, height - margin);
                break;
        }
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º WaveSystem.spawnEnemy()
        const enemyType = 'mole';
        const enhancementMultiplier = 1.0; // –ö–∞–∫ –≤ –∏–≥—Ä–æ–≤–æ–π —Å—Ü–µ–Ω–µ
        
        console.log(`üéÆ [TestBehaviors] –°–æ–∑–¥–∞–µ–º –∫—Ä–æ—Ç–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Å—Ç–∏–ª–µ –≤ –ø–æ–∑–∏—Ü–∏–∏ (${x}, ${y})`);
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–∞ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ WaveSystem
        const enemy = Enemy.CreateEnemy(this, enemyType, x, y, enhancementMultiplier);
        if (!enemy) {
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        this.enemies.push(enemy);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.target) {
            enemy.setTarget(this.target);
        }
        
        console.log(`üéÆ [TestBehaviors] –ö—Ä–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ –∏–≥—Ä–æ–≤–æ–º —Å—Ç–∏–ª–µ: ${enemyType} –≤ –ø–æ–∑–∏—Ü–∏–∏ (${x}, ${y})`);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–æ—Ç–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Å—Ç–∏–ª–µ —Å delayedCall (–∫–∞–∫ –≤ WaveSystem)
     */
    createMoleGameStyleWithDelay() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤—Ä–∞–≥–æ–≤
        this.clearAllEnemies();
        
        console.log(`üéÆ [TestBehaviors] –ó–∞–ø—É—Å–∫–∞–µ–º delayedCall –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–æ—Ç–∞...`);
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º WaveSystem.scheduleNextSpawn() —Å delayedCall
        const delay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        this.time.delayedCall(delay, () => {
            console.log(`üéÆ [TestBehaviors] delayedCall –≤—ã–ø–æ–ª–Ω–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∫—Ä–æ—Ç–∞...`);
            this.createMoleGameStyle();
        });
        
        console.log(`üéÆ [TestBehaviors] delayedCall –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${delay}–º—Å`);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–∞–≥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
     */
    createEnemy(enemyType, x = null, y = null) {
        // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º –≤ —Å–ª—É—á–∞–π–Ω–æ–º –º–µ—Å—Ç–µ
        if (x === null || y === null) {
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤—Ä–∞–≥–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–∞–≥–∞
            this.clearAllEnemies();
            
            const { width, height } = this.scale;
            x = x || Phaser.Math.Between(100, width - 100);
            y = y || Phaser.Math.Between(100, height - 100);
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–∞
        const enemy = Enemy.CreateEnemy(this, enemyType, x, y);
        
        if (enemy) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–ª—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
            if (this.target) {
                enemy.setTarget(this.target);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            this.enemies.push(enemy);
            
            console.log(`üéÆ [TestBehaviors] –°–æ–∑–¥–∞–Ω –≤—Ä–∞–≥: ${enemyType} –≤ –ø–æ–∑–∏—Ü–∏–∏ (${x}, ${y})`);
            console.log(`üéÆ [TestBehaviors] –í—Ä–∞–≥ –∏–º–µ–µ—Ç —Ü–µ–ª—å:`, enemy.target ? '–î–∞' : '–ù–µ—Ç');
            console.log(`üéÆ [TestBehaviors] –ê–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:`, enemy._activeBehavior ? enemy._activeBehavior.constructor.name : '–ù–µ—Ç');
        }
    }
    
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à—å—é
     */
    setupMouseControls() {
        // –ö–ª–∏–∫ –º—ã—à–∏ —Å–æ–∑–¥–∞–µ—Ç/–ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ü–µ–ª—å
        this.input.on('pointerdown', (pointer) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ
            const clickedButton = this.enemyButtons.find(btn => 
                btn.button.getBounds().contains(pointer.x, pointer.y)
            );
            
            if (!clickedButton) {
                this.createTarget(pointer.x, pointer.y);
            }
        });
        
        // ESC –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        this.input.keyboard.on('keydown-ESC', () => {
            this.scene.start('MenuScene');
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –º–µ–∂–¥—É —Å–Ω–∞—Ä—è–¥–∞–º–∏ –∏ —Ü–µ–ª—å—é
     */
    setupCollisions() {
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞—Ä—è–¥–æ–≤
        this.events.on('projectile_created', (projectile) => {
            this.projectiles.push(projectile);
            console.log(`üéØ [TestBehaviors] –°–Ω–∞—Ä—è–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É. –í—Å–µ–≥–æ —Å–Ω–∞—Ä—è–¥–æ–≤: ${this.projectiles.length}`);
        });
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è —Å–Ω–∞—Ä—è–¥–æ–≤
        this.events.on('projectile_destroyed', (projectile) => {
            const index = this.projectiles.indexOf(projectile);
            if (index > -1) {
                this.projectiles.splice(index, 1);
                console.log(`üéØ [TestBehaviors] –°–Ω–∞—Ä—è–¥ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã. –û—Å—Ç–∞–ª–æ—Å—å —Å–Ω–∞—Ä—è–¥–æ–≤: ${this.projectiles.length}`);
            }
        });
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–ø–∞–¥–∞–Ω–∏—è —Å–Ω–∞—Ä—è–¥–æ–≤
        this.events.on('projectile_hit', (data) => {
            console.log(`üí• [TestBehaviors] –°–Ω–∞—Ä—è–¥ –ø–æ–ø–∞–ª –≤ —Ü–µ–ª—å! –£—Ä–æ–Ω: ${data.damage}`);
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ –ø–æ –∫–ª–∏–∫—É –º—ã—à–∏
     */
    createTarget(x, y) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ü–µ–ª—å
        if (this.target) {
            this.target.destroy();
        }
        
        // –°–æ–∑–¥–∞–µ–º —è–π—Ü–æ –∫–∞–∫ —Ü–µ–ª—å
        this.target = Egg.CreateEgg(this, x, y, {
            health: 100,
            damage: 0, // –Ø–π—Ü–æ –Ω–µ –∞—Ç–∞–∫—É–µ—Ç
            attackRange: 0,
            cooldown: 0
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –¥–ª—è –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
        this.enemies.forEach(enemy => {
            if (enemy && enemy.isAlive) {
                enemy.setTarget(this.target);
            }
        });
        
        console.log(`ü•ö [TestBehaviors] –Ø–π—Ü–æ —Å–æ–∑–¥–∞–Ω–æ –≤ (${x.toFixed(0)}, ${y.toFixed(0)})`);
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
     */
    clearAllEnemies() {
        this.enemies.forEach(enemy => {
            if (enemy && enemy.isAlive) {
                enemy.destroy();
            }
        });
        this.enemies = [];
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
     */
    addInstruction() {
        const { width } = this.scale;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        this.add.text(width / 2, 20, '–¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–π –≤—Ä–∞–≥–æ–≤', {
            fontSize: '24px',
            fill: '#333333',
            fontStyle: 'bold'
        }).setOrigin(0.5).setDepth(15);
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        this.add.text(width / 2, 50, '–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ = —Å–æ–∑–¥–∞—Ç—å –≤—Ä–∞–≥–∞ | –ö–ª–∏–∫ –ø–æ —ç–∫—Ä–∞–Ω—É = —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å', {
            fontSize: '14px',
            fill: '#666666'
        }).setOrigin(0.5).setDepth(15);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫—Ä–æ—Ç–∞
        this.add.text(width / 2, 70, '–û—Ä–∞–Ω–∂–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∞ = –∫—Ä–æ—Ç —Å delayedCall (—Ç–µ—Å—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Ç–∞–π–º–µ—Ä–æ–≤)', {
            fontSize: '12px',
            fill: '#FF6B35',
            fontStyle: 'bold'
        }).setOrigin(0.5).setDepth(15);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã
     */
    update(time, delta) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–∞–≥–æ–≤
        this.enemies.forEach(enemy => {
            if (enemy && enemy.isAlive) {
                // –Ø–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º update –¥–ª—è –≤—Ä–∞–≥–∞
                enemy.update(time, delta);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –º–µ–∂–¥—É —Å–Ω–∞—Ä—è–¥–∞–º–∏ –∏ —Ü–µ–ª—å—é
        this.checkProjectileCollisions();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –º–µ–∂–¥—É —Å–Ω–∞—Ä—è–¥–∞–º–∏ –∏ —Ü–µ–ª—å—é
     */
    checkProjectileCollisions() {
        if (!this.target || !this.target.isAlive) return;
        
        this.projectiles.forEach(projectile => {
            if (projectile && projectile.active) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å–Ω–∞—Ä—è–¥–æ–º –∏ —Ü–µ–ª—å—é
                const distance = Phaser.Math.Distance.Between(
                    projectile.x, projectile.y,
                    this.target.x, this.target.y
                );
                
                // –ï—Å–ª–∏ —Å–Ω–∞—Ä—è–¥ –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏ (—Ä–∞–¥–∏—É—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è 20 –ø–∏–∫—Å–µ–ª–µ–π)
                if (distance < 20) {
                    console.log(`üí• [TestBehaviors] –°–Ω–∞—Ä—è–¥ –ø–æ–ø–∞–ª –≤ —Ü–µ–ª—å! –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance.toFixed(1)}px`);
                    
                    // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
                    if (this.target.takeDamage) {
                        this.target.takeDamage(projectile.damage, projectile.source);
                    }
                    
                    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å–Ω–∞—Ä—è–¥
                    projectile.destroy();
                }
            }
        });
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —Å—Ü–µ–Ω—ã
     */
    destroy() {
        // –û—á–∏—â–∞–µ–º –≤—Ä–∞–≥–æ–≤
        this.clearAllEnemies();
        
        // –û—á–∏—â–∞–µ–º —Ü–µ–ª—å
        if (this.target) {
            this.target.destroy();
        }
        
        // –û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        if (this.effectSystem) {
            this.effectSystem.destroy();
        }
        
        // –û—á–∏—â–∞–µ–º –∫–Ω–æ–ø–∫–∏
        this.enemyButtons.forEach(btn => {
            if (btn.button) btn.button.destroy();
            if (btn.emoji) btn.emoji.destroy();
        });
        this.enemyButtons = [];
        
        // –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ —Ç–∞–π–º–µ—Ä
        if (this.tooltipTimer) {
            this.tooltipTimer.remove();
            this.tooltipTimer = null;
        }
        this.hideTooltip();
        
        super.destroy();
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∞–≤–Ω–∞ –≤—Ä–∞–≥–æ–≤ –æ—Ç —Å–∞–º–∫–∏ –ø–∞—É–∫–∞
        this.events.on('enemy:spawn', (spawnData) => {
            console.log('üï∑Ô∏è [TestBehaviors] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–ø–∞–≤–Ω–∞:', spawnData);
            
            if (spawnData.enemyType && spawnData.x && spawnData.y) {
                const enemy = this.createEnemy(spawnData.enemyType, spawnData.x, spawnData.y);
                
                // –ï—Å–ª–∏ —Å–ø–∞–≤–Ω–∏–º—ã–π –≤—Ä–∞–≥ - —Å–Ω–∞—Ä—è–¥, –∏ –µ—Å—Ç—å —Ü–µ–ª—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
                if (spawnData.enemyType === 'projectile' && spawnData.target && enemy && enemy.aiCoordinator) {
                    console.log('üéØ [TestBehaviors] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –¥–ª—è —Å–ø–∞–≤–Ω–µ–Ω–Ω–æ–≥–æ —Å–Ω–∞—Ä—è–¥–∞');
                    enemy.aiCoordinator.setTarget(spawnData.target);
                }
            }
        });
        
        console.log('üéÆ [TestBehaviors] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }
}